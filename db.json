{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/new-vue.png","path":"images/new-vue.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/vue渲染过程分析.md","path":"images/vue渲染过程分析.md","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/nginx/image-20200607145042859.png","path":"images/nginx/image-20200607145042859.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/reactFiber/fiber1.png","path":"images/reactFiber/fiber1.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/reactFiber/fiber2.png","path":"images/reactFiber/fiber2.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/reactFiber/react-beta.png","path":"images/reactFiber/react-beta.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/singleSpa/1.png","path":"images/singleSpa/1.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/singleSpa/state.png","path":"images/singleSpa/state.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/data/today.json","path":"data/today.json","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/typed/typed.min.js","path":"lib/typed/typed.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1728404113886},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1728404278090},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1728404278010},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1728404278120},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1728404278091},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1728404278063},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1728404278039},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1728404278027},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1728404278056},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1728404278063},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1728404278075},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1728404278058},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1728404278122},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728404278125},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728404278125},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728404278125},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1728404278127},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1728404278124},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1728404278130},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1728404278132},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1728404278133},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1728404278134},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1728404278128},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1728404278137},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1728404278142},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1728404278140},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1728404278145},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1728404278139},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1728404278148},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1728404278144},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1728404278148},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1728404278153},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1728404278150},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1728404278152},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1728404278156},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1728404278157},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1728404278160},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1728404278154},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1728404278162},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1728404278083},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1728404278165},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1728404278163},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1728404278167},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1728404278169},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1728404278171},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1728404278066},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1728404278076},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1728404278025},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1728404278072},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1728404278015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1728404278018},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1728404278030},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1728404278022},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1728404278049},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1728404278060},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1728404278068},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1728404278051},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1728404278036},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1728404278053},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1728404278094},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1728404278047},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1728404278095},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1728404278119},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1728404278044},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1728404278088},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1728404278013},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1728404278032},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1728404278062},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1728404278041},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1728404278070},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1728404278047},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1728404278110},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1728404278098},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1728404278105},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1728404278079},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1728404278102},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1728404278103},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1728404278107},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1728404278108},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1728404278100},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1728404278112},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1728404278111},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1728404278115},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1728404278117},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1728404278085},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1728404278086},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1728404278081},{"_id":"public/2024/10/09/hello-world/index.html","hash":"f6af73dd806e58b1f069b4203102cb58ab6a75c4","modified":1728435720516},{"_id":"public/index.html","hash":"50cbb20d2f76e409d59aa540306e6412d3fdceb9","modified":1728472732543},{"_id":"public/archives/index.html","hash":"0aaa2601b318a6f45d536fc0576c844668e780f1","modified":1728472732543},{"_id":"public/archives/2024/index.html","hash":"7db52d62e8154368c224e522f577ad93abc3c2d0","modified":1728472732543},{"_id":"public/archives/2024/10/index.html","hash":"dffbefd69d73d6b594151ddd9b263d886515cf72","modified":1728435720516},{"_id":"public/css/style.css","hash":"c3f2d0f4abb7a31f3b5e17e92c5d555469a8a664","modified":1728472732543},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1728472732543},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1728472732543},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1728472732543},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1728472732543},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1728472732543},{"_id":"source/_posts/第一篇博客测试.md","hash":"f1efe2fed8e85068530b962ac25998b1591f641f","modified":1728434797809},{"_id":"public/2024/10/09/第一篇博客测试/index.html","hash":"485c8511bdca7bba6e70d99d4761fd107f315045","modified":1728434973722},{"_id":"source/_posts/CICD/持续集成 - 代码质量扫描篇.md","hash":"26ce457bb4d486a2342cd8d0d60382b2bc0d819f","modified":1728461851688},{"_id":"source/_posts/CICD/持续集成 - 使用Gilab CI构建你的前端项目.md","hash":"237481e3175535b4f39a337a6e310b446919b4b2","modified":1728461871982},{"_id":"source/_posts/MicroFrontend/Single-SPA微前端框架的使用Demo汇总.md","hash":"429e99c65ba4a4eaa63c8dbc9d95daefc54b78d4","modified":1728435504342},{"_id":"source/_posts/MicroFrontend/1.md","hash":"3281748af12bee441cdfdfec706829c866033794","modified":1728435504341},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案1 - 思考.md","hash":"7e0874837f8383ac1d56630c45a0d0251b4da670","modified":1728435504343},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案2 - Single-SPA.md","hash":"f1d85e1f4292f642c92b74cf64b731e7bbaf2cac","modified":1728461926746},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案3 - 模块加载器.md","hash":"17ee6d50857c065cd9c7beb6369d046b132895d7","modified":1728461932735},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案4 - 消息总线.md","hash":"05f367dd0cb027f11e075b1b64dcda8a3fa756cd","modified":1728461939548},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案6 - 构建与部署.md","hash":"f9dafb1cbe6bd71770aa474bcce81784de19ce86","modified":1728461949724},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案5 - 路由分发.md","hash":"9458e18a57bb59a1f1a17eebb1b129a2d1fc2d69","modified":1728461944510},{"_id":"source/_posts/MicroFrontend/前端微服务化进阶1 - 基于umi的微服务化方案.md","hash":"984a117e4f97ee4826c1dade83f0f479432da824","modified":1728461966341},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案7 - 静态数据共享.md","hash":"47321edbe189556599e82bac638e13e8dc5dd8a4","modified":1728461955706},{"_id":"source/_posts/MicroFrontend/前端微服务化解决方案8 - 二次构建.md","hash":"fd4c7d008673c881f8fba8bc2c83cd9650c442be","modified":1728461961671},{"_id":"source/_posts/MicroFrontend/前端微服务化进阶2 - 本地开发指南.md","hash":"b19bcc5249aaabb58389ebdb7a05292335e1e88b","modified":1728461971134},{"_id":"source/_posts/MicroFrontend/前端微服务化进阶3 - 跨模块共享组件.md","hash":"21670cab7c1b9fe68eb4bbadac7d483e7e3dcdf2","modified":1728461977331},{"_id":"source/_posts/MicroFrontend/前端微服务化进阶4 - 跨框架共享组件(微件化).md","hash":"56324bca806be50c0e486218689119d7ae66e89a","modified":1728461983065},{"_id":"source/_posts/nginx/nginx.md","hash":"64ccef2afaf4453663687e8fb33c8795a0c6981b","modified":1728438721606},{"_id":"source/_posts/MicroFrontend/如何在webpack与system中构建你的Single-SPA微前端应用.md","hash":"f2487855882ceb70327945db413606c1b4dc3166","modified":1728461988225},{"_id":"source/_posts/nginx/nginx基础.md","hash":"0f14b5a91790441a76c8c79bebaee93a3fbe11e4","modified":1728438730879},{"_id":"source/_posts/nginx/nginx实战.md","hash":"d220e4e53288c2b9a9572a37414e94c052569d3b","modified":1728438747206},{"_id":"source/_posts/nodejs/global.md","hash":"649bc6e99ffbe2518362a934866eaba68f0e8131","modified":1728435504383},{"_id":"source/_posts/reactFiber/React Element.md","hash":"6b12f65f44d5390f1c1624cdafea52ba812d85d1","modified":1728435504400},{"_id":"source/_posts/reactFiber/index.md","hash":"200ec43a86fcf7ddfee5920215b4444cab0628bb","modified":1728435504400},{"_id":"source/_posts/reference/[Typescript] reference(使用技巧).md","hash":"73188d3539ae8e9bcf49b3c1a51f250eb3593206","modified":1728435504469},{"_id":"source/_posts/singleSpa/single-spa-api.md","hash":"aa19e5a0b2e4af591e8555cf9dcd0ae7be676a38","modified":1728470707382},{"_id":"source/_posts/singleSpa/single-spa脉络.md","hash":"cf8736a2dca58b69347ecd2deb1600d340f47a5f","modified":1728470707382},{"_id":"source/_posts/Taro/1.Taro跨端开发之跨端开发新时代的思考与举措.md","hash":"cbd387f0be412efba732120e195646f85f78fcf1","modified":1728435504502},{"_id":"source/_posts/Taro/2.Taro跨端开发之依赖管理问题.md","hash":"75074d1f5281752ef9c71110ebb5f6f37091efb9","modified":1728435504503},{"_id":"source/_posts/Taro/3.Taro跨端开发之多业务模块管理React Native篇(上).md","hash":"7822b64584e57301a037362c41bff754d793b010","modified":1728435504504},{"_id":"source/_posts/Taro/4.Taro跨端开发之多业务模块管理React Native篇(中).md","hash":"a356f234ce1212363247c280e99349d6454fc01b","modified":1728435504504},{"_id":"source/_posts/Taro/5.Taro跨端开发之多业务模块管理React Native篇(终篇).md","hash":"e346b337d46134cf9ec470c54ec8cccb884339e8","modified":1728435504505},{"_id":"source/_posts/Taro/6.Taro跨端开发之让Taro UI支持React Native.md","hash":"2616cfaec8c19081fdf71eb9870fd1b5f1a66bb1","modified":1728435504506},{"_id":"source/_posts/Taro/7.使用Taro开发的快应用如何优化体积.md","hash":"4d9e3448acc62d0bb6bfe348dff87db64c707cfe","modified":1728435504506},{"_id":"source/_posts/Taro/8.使用Taro开发各端的顺序建议.md","hash":"e477550f7266c5628b5920eb86b326f6527a70c3","modified":1728435504507},{"_id":"source/_posts/Taro/9.h5 日志.md","hash":"cd4b68a3aa5475a46ae40f86b4d9d9440e0d8ac8","modified":1728438914698},{"_id":"source/_posts/virtualTask/task.md","hash":"c081cf7bbdc09e591b91ffcefdea23ea3cf33dab","modified":1728435504532},{"_id":"source/_posts/Worker/Code Review工具推荐以及使用报告.md","hash":"81a2c203e1d0a6f9e49c65f94f9e2059df1a9715","modified":1728435504562},{"_id":"source/_posts/Worker/使用husky提升Code Review的效率.md","hash":"99b164927ff1e48dd3005fc66dfc421441e65ec2","modified":1728435504563},{"_id":"source/_posts/Worker/如何通过 Code Review 帮助团队提升代码质量.md","hash":"46379499301dbba552623142303949a26f1a37c2","modified":1728435504563},{"_id":"source/_posts/Worker/让团队保持Code Review习惯的三大法宝.md","hash":"2b43d8e8d8443f794ce20ef0b4a30515f58ae99d","modified":1728435504564},{"_id":"source/_posts/monorepo.md","hash":"34d8d39b28d70db004dc56d831710de97ab739ae","modified":1728435504601},{"_id":"source/_posts/new-vue.png","hash":"1869481f5edf40419c4a26e6ffc4e0044a93234c","modified":1728435504615},{"_id":"source/_posts/vue渲染过程分析.md","hash":"ac7090687e9dee3f31572726b9877afe52036118","modified":1728435504648},{"_id":"source/_posts/新的起点.md","hash":"0263e0ed1eaa7ad5a496ced89e86301f900e35e8","modified":1728435504587},{"_id":"source/_posts/whistle.md","hash":"17c4de875be1bbb4c910d9a9087f07390ee13a1c","modified":1728437616576},{"_id":"source/_posts/proxy.png","hash":"66627dbb8321a9c93de45d87fe54003eec37ef49","modified":1728435504634},{"_id":"public/2024/10/09/whistle/index.html","hash":"d521ffefbc3475faee4d78fa49ede5ca7dbdea9e","modified":1728435720516},{"_id":"public/2024/10/09/vue渲染过程分析/index.html","hash":"e272daa279bbcec3b79ad522c32ba2dc379aa149","modified":1728435720516},{"_id":"public/2024/10/09/monorepo/index.html","hash":"cbbd86b6a0e3de91079d82f46539a9ded4c55696","modified":1728435720516},{"_id":"public/2024/10/09/virtualTask/task/index.html","hash":"331382b0368c0f6dd829f7d6f97476acb6b64f3e","modified":1728435720516},{"_id":"public/2024/10/09/Taro/9.h5 日志/index.html","hash":"aeefe21ee283957a69fd9671d0907b73035abf6f","modified":1728435720516},{"_id":"public/2024/10/09/singleSpa/single-spa脉络/index.html","hash":"6d1013b1e8978f012490056f25443f97ee39c871","modified":1728435720516},{"_id":"public/2024/10/09/singleSpa/single-spa-api/index.html","hash":"40219052e50dd5e554bfad67fd0a67923f5ee876","modified":1728435720516},{"_id":"public/2024/10/09/reference/[Typescript] reference(使用技巧)/index.html","hash":"edb1c326d81604534942df99f1dbea42616eb5db","modified":1728435720516},{"_id":"public/2024/10/09/reactFiber/index/index.html","hash":"13a3d4b292db23be2bf5b17db9bd6519797d1da2","modified":1728435720516},{"_id":"public/2024/10/09/reactFiber/React Element/index.html","hash":"d20ca8b161247be32f6b7ec692ee85df3dea1628","modified":1728435720516},{"_id":"public/2024/10/09/nginx/nginx实战/index.html","hash":"6fa981d936bed09ce4ca3681feef4362fe65327c","modified":1728435720516},{"_id":"public/2024/10/09/nginx/nginx基础/index.html","hash":"41aad11a71841382683c97b02affcbcc0b8836b9","modified":1728435720516},{"_id":"public/2024/10/09/nginx/nginx/index.html","hash":"17c3073bb7d9111df6ee5aae3bf8c460fb59d184","modified":1728435720516},{"_id":"public/2024/10/09/MicroFrontend/1/index.html","hash":"28fa4b9d5d729d1531ae116f4278c3acac7c7e0b","modified":1728435720516},{"_id":"public/2020/12/16/Taro/8.使用Taro开发各端的顺序建议/index.html","hash":"8b7b5f92aa89766e554dce5b99933945beaa8af9","modified":1728458957356},{"_id":"public/2020/08/27/Taro/6.Taro跨端开发之让Taro UI支持React Native/index.html","hash":"3a69295b8d9bd850b2ce2bc43dfe6afedb442941","modified":1728458957356},{"_id":"public/2020/12/15/Taro/7.使用Taro开发的快应用如何优化体积/index.html","hash":"bd1a14a66374f444cd204852478f998bad9ef5fb","modified":1728458957356},{"_id":"public/2020/08/25/Taro/5.Taro跨端开发之多业务模块管理React Native篇(终篇)/index.html","hash":"619c36365a2f1d2e0259c498f98b539c367351bc","modified":1728458957356},{"_id":"public/2020/08/23/Taro/4.Taro跨端开发之多业务模块管理React Native篇(中)/index.html","hash":"bc88a9deaeb10a12c5d81b2cb7f5166e503374f6","modified":1728458957356},{"_id":"public/2020/08/21/Taro/3.Taro跨端开发之多业务模块管理React Native篇(上)/index.html","hash":"439b56e6fd7370a1a33084c4c652f9f06222255f","modified":1728458957356},{"_id":"public/2020/08/20/Taro/2.Taro跨端开发之依赖管理问题/index.html","hash":"1e25d4182c901de88effdff5a2662b7a0638d07e","modified":1728458957356},{"_id":"public/2020/06/25/nodejs/global/index.html","hash":"67788572d2d7ac018ad4b009f26d289c7934e7e8","modified":1728472732543},{"_id":"public/2020/06/25/新的起点/index.html","hash":"c747760941bab079f95a649a96db30c29e32c420","modified":1728445444177},{"_id":"public/2020/06/16/Taro/1.Taro跨端开发之跨端开发新时代的思考与举措/index.html","hash":"9cf1f07653d818099da21edce85e2135969c4457","modified":1728458957356},{"_id":"public/2019/12/15/CICD/持续集成 - 代码质量扫描篇/index.html","hash":"8366c0100c639f5909f0b87bf04331b53c7dce1b","modified":1728458957356},{"_id":"public/2019/05/12/MicroFrontend/前端微服务化进阶3 - 跨模块共享组件/index.html","hash":"9dcd5da35b1dc20d92df8ba7538af11bef00ea78","modified":1728458957356},{"_id":"public/2019/06/22/MicroFrontend/前端微服务化进阶4 - 跨框架共享组件(微件化)/index.html","hash":"c223394a8a60416a51bb8837f65e07040b741135","modified":1728458957356},{"_id":"public/2019/04/22/MicroFrontend/前端微服务化进阶2 - 本地开发指南/index.html","hash":"f0aae253d751f85335c8ebb82be1e180d67f5a95","modified":1728458957356},{"_id":"public/2019/09/20/CICD/持续集成 - 使用Gilab CI构建你的前端项目/index.html","hash":"01477c5a08dcc4d8247eb5ed724c9dcc167f303e","modified":1728458957356},{"_id":"public/2019/04/13/MicroFrontend/前端微服务化进阶1 - 基于umi的微服务化方案/index.html","hash":"fcce45438d6e04cd65b5b82c57b2349d2e59dc5d","modified":1728458957356},{"_id":"public/2018/12/04/Worker/使用husky提升Code Review的效率/index.html","hash":"1a15106f65e196b70dca190fe395b7ad58f52e6a","modified":1728472732543},{"_id":"public/2018/11/12/Worker/Code Review工具推荐以及使用报告/index.html","hash":"11f95e36420bd0aed107f4c981ed4197cc0dcc43","modified":1728472732543},{"_id":"public/2018/11/30/Worker/让团队保持Code Review习惯的三大法宝/index.html","hash":"bf2fa08997c5561384d3859b28654c9312c457cc","modified":1728472732543},{"_id":"public/2018/11/08/Worker/如何通过 Code Review 帮助团队提升代码质量/index.html","hash":"f8a1f01fffd45f75ea5adbbdc2f6d5a5f39e5f00","modified":1728472732543},{"_id":"public/2018/10/31/MicroFrontend/如何在webpack与system中构建你的Single-SPA微前端应用/index.html","hash":"9f3c3afebe7c7f4c94ef672a4d14399557409d37","modified":1728458957356},{"_id":"public/2018/10/31/MicroFrontend/Single-SPA微前端框架的使用Demo汇总/index.html","hash":"a0d84d0b61b38ea68bec7607b861d1bfad0955dd","modified":1728435720516},{"_id":"public/2018/09/07/MicroFrontend/前端微服务化解决方案8 - 二次构建/index.html","hash":"69ec11a29ff594baf7a1c733ac93b987d5322f04","modified":1728458957356},{"_id":"public/2018/09/06/MicroFrontend/前端微服务化解决方案7 - 静态数据共享/index.html","hash":"ef1987f91304190711d12780082c34a36f43dd2b","modified":1728458957356},{"_id":"public/2018/09/05/MicroFrontend/前端微服务化解决方案6 - 构建与部署/index.html","hash":"2f4e3dd0438121ee859a62fdb419629735c1981e","modified":1728458957356},{"_id":"public/2018/09/04/MicroFrontend/前端微服务化解决方案5 - 路由分发/index.html","hash":"45a8b971221a852fb67d4785a5aeb9383d871982","modified":1728458957356},{"_id":"public/2018/09/03/MicroFrontend/前端微服务化解决方案4 - 消息总线/index.html","hash":"b72e2c9fa05666cf65b477b8b9221b0fa8f0fffc","modified":1728458957356},{"_id":"public/2018/09/03/MicroFrontend/前端微服务化解决方案3 - 模块加载器/index.html","hash":"39c327425f703ecdf4b90a3e51b5067e0591783f","modified":1728458957356},{"_id":"public/2018/09/02/MicroFrontend/前端微服务化解决方案2 - Single-SPA/index.html","hash":"aab80ef4628d798b2bcad2587b3481cce77d53d0","modified":1728458957356},{"_id":"public/2018/09/01/MicroFrontend/前端微服务化解决方案1 - 思考/index.html","hash":"0c0c159e7bc325a9aaf68eb707ecf9063ed89e98","modified":1728458957356},{"_id":"public/page/2/index.html","hash":"f5d048f7fb4f9009ce540ad759c1bee3f3d279cf","modified":1728472732543},{"_id":"public/page/3/index.html","hash":"79577dab53899d0aa6824153513d08ab1989d4c4","modified":1728458957356},{"_id":"public/page/4/index.html","hash":"34315c47c870947da637cd23502c0347e20c054f","modified":1728458957356},{"_id":"public/page/5/index.html","hash":"5738a1180c4d9adf0aa4170ccdc77574c42354ad","modified":1728435720516},{"_id":"public/archives/page/2/index.html","hash":"4841ae0e9590516f665d6b82619a9023098b5abb","modified":1728445444177},{"_id":"public/archives/page/4/index.html","hash":"650c7ec94c9060954ae67f7fb27c491fce63b5f4","modified":1728445444177},{"_id":"public/archives/page/3/index.html","hash":"e7ed22c470162dd324aa42e760a4a339c3aae85e","modified":1728445444177},{"_id":"public/archives/page/5/index.html","hash":"3d82760e9cea16a14cedae17ec2d30c29e58d218","modified":1728445444177},{"_id":"public/archives/2018/index.html","hash":"c213072664440c066e788f7c6c48172404a38c4e","modified":1728472732543},{"_id":"public/archives/2018/page/2/index.html","hash":"beb3a4926193d3caee271b0962bfa9e4dcee9981","modified":1728445444177},{"_id":"public/archives/2018/10/index.html","hash":"5ab6fe83a433fa88cdb02ed69e5faa1756528821","modified":1728472732543},{"_id":"public/archives/2018/11/index.html","hash":"1897c9d57d4922ce4412047715c8d42be44cc0ff","modified":1728472732543},{"_id":"public/archives/2018/09/index.html","hash":"4e346f7bc06d93f4a64b4e68fc216fd665dfcac8","modified":1728472732543},{"_id":"public/archives/2018/12/index.html","hash":"57b422f945577e7030556c0724e61244451cc6a1","modified":1728472732543},{"_id":"public/archives/2019/index.html","hash":"994a55094318aa849537c4b3141f80215d553c51","modified":1728458957356},{"_id":"public/archives/2019/04/index.html","hash":"4dbb2f721f40424f1f2c1261ee3b427cdbb43583","modified":1728458957356},{"_id":"public/archives/2019/05/index.html","hash":"1624e77e37346a1bbb7c504699e663be3d70b5e0","modified":1728458957356},{"_id":"public/archives/2019/06/index.html","hash":"2158c1e83ecf1a6bdf7f404ed0d72c82e17c2dd8","modified":1728458957356},{"_id":"public/archives/2019/09/index.html","hash":"2bddd79ea357e4b509b7956c54ca86a578f27025","modified":1728458957356},{"_id":"public/archives/2019/12/index.html","hash":"86cc746722aa6ae9ae92b41b4751aff3f0fb012b","modified":1728458957356},{"_id":"public/archives/2020/index.html","hash":"5d2656f2994c55838fa042e6c6b54cc14b5b38bb","modified":1728472732543},{"_id":"public/archives/2020/06/index.html","hash":"22aefdb4b0614ed246307aa682c6cb75d1138814","modified":1728472732543},{"_id":"public/archives/2020/08/index.html","hash":"8aacf4c6cf56abd74fcec31db90f85c7319c10f1","modified":1728458957356},{"_id":"public/archives/2020/12/index.html","hash":"cad41ab928bd27738cdb352b2d2b30476b8acea7","modified":1728458957356},{"_id":"public/archives/2024/page/2/index.html","hash":"e042a7c52daef27b92ba03948b62051027279add","modified":1728435720516},{"_id":"public/archives/2024/10/page/2/index.html","hash":"c2fa38ef0a3b75613615fe6f435e53438e3c6f14","modified":1728435720516},{"_id":"public/tags/持续集成/index.html","hash":"1c374b2136cd92abc0b9e572b8c75370ca906e50","modified":1728472732543},{"_id":"public/tags/微前端/index.html","hash":"6c7ba04105db9fb78941dce0b37b554897f9d169","modified":1728472732543},{"_id":"public/tags/微前端/page/2/index.html","hash":"45b54bee63cfe09d68993d75af66bd774816107e","modified":1728445444177},{"_id":"public/tags/MicroFrontend/index.html","hash":"89ad4578452ac5b4a133438029c97d33e455d542","modified":1728472732543},{"_id":"public/tags/MicroFrontend/page/2/index.html","hash":"43eede352a2aa4ab954b14bff5355e4d6d77a1f8","modified":1728445444177},{"_id":"public/tags/前端架构/index.html","hash":"50bf2e1e0d77052125bb7ecfdd42a93be70f1a94","modified":1728458957356},{"_id":"public/tags/前端架构/page/2/index.html","hash":"f8987cea65fcce48cda2d9c0564c0baef6160f40","modified":1728445444177},{"_id":"public/tags/前端架构/page/3/index.html","hash":"55e45b0247fc57e2983825c0c941106003216522","modified":1728445444177},{"_id":"public/tags/nodejs/index.html","hash":"a49c881f1de3e6c2412b9ace7c87f4b8a9ef51e3","modified":1728472732543},{"_id":"public/tags/Taro/index.html","hash":"4a87204489a18597118d8a2d3cc56e772cddbb64","modified":1728458957356},{"_id":"public/tags/跨端开发/index.html","hash":"e0bb975540b07622c801224582b29c67cdf41a9c","modified":1728458957356},{"_id":"public/tags/Code-Review/index.html","hash":"b99f13264f573093997437b079101e5781288230","modified":1728472732543},{"_id":"public/tags/里程碑/index.html","hash":"74f1d7aec6bc3c5de22d30708a89e56741bfead2","modified":1728445444177},{"_id":"source/about/index.md","hash":"78a0c38dba8806bca1246342d47a404b470c4071","modified":1728470707382},{"_id":"themes/cactus-dark/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1728435396817},{"_id":"themes/cactus-dark/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1728435396819},{"_id":"themes/cactus-dark/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1728435396818},{"_id":"themes/cactus-dark/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1728435396820},{"_id":"themes/cactus-dark/README.md","hash":"812091a58d1d20467eede2d8b3d7bcf0fc0e8a50","modified":1728435396820},{"_id":"themes/cactus-dark/_config.yml","hash":"2626f39fdb178c378cef8616a99a9a24fb65f2af","modified":1728441871033},{"_id":"themes/cactus-dark/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1728435396822},{"_id":"themes/cactus-dark/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1728435396855},{"_id":"themes/cactus-dark/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1728435396823},{"_id":"themes/cactus-dark/languages/de.yml","hash":"34687574bf97085cec6ab8b807745cfde1a6c4c9","modified":1728444715371},{"_id":"themes/cactus-dark/languages/en.yml","hash":"815ccd05aaf710f4b11712fb7eb280bc17a4ca48","modified":1728444721254},{"_id":"themes/cactus-dark/languages/default.yml","hash":"815ccd05aaf710f4b11712fb7eb280bc17a4ca48","modified":1728444721254},{"_id":"themes/cactus-dark/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1728435396825},{"_id":"themes/cactus-dark/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1728435396825},{"_id":"themes/cactus-dark/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1728435396826},{"_id":"themes/cactus-dark/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1728435396827},{"_id":"themes/cactus-dark/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1728435396828},{"_id":"themes/cactus-dark/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1728435396829},{"_id":"themes/cactus-dark/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1728435396829},{"_id":"themes/cactus-dark/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1728435396830},{"_id":"themes/cactus-dark/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1728435396830},{"_id":"themes/cactus-dark/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1728435396831},{"_id":"themes/cactus-dark/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1728435396831},{"_id":"themes/cactus-dark/languages/zh-CN.yml","hash":"83dddc08616466896960c949d40ddafa0aaa72c5","modified":1728460922322},{"_id":"themes/cactus-dark/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1728435396832},{"_id":"themes/cactus-dark/layout/index.ejs","hash":"cfc2a5bbdd8f4093bd68b9390889017966085b4c","modified":1728460060734},{"_id":"themes/cactus-dark/layout/archive.ejs","hash":"9e5eb5392ef687bea2aec5b1b26a695adb899108","modified":1728455918639},{"_id":"themes/cactus-dark/layout/page.ejs","hash":"ce16201f110102b8086b939df8cea87cf2dade06","modified":1728455460730},{"_id":"themes/cactus-dark/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1728435396851},{"_id":"themes/cactus-dark/layout/post.ejs","hash":"50b6c39060b6fa88e0a79dd99c299cf3ca0cb4f7","modified":1728452748303},{"_id":"themes/cactus-dark/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1728435396857},{"_id":"themes/cactus-dark/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1728435396860},{"_id":"themes/cactus-dark/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1728435396861},{"_id":"themes/cactus-dark/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1728435396858},{"_id":"themes/cactus-dark/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1728435396835},{"_id":"themes/cactus-dark/layout/_partial/head.ejs","hash":"51f498238b748a4a0230eed7082f94ee6c4d0be2","modified":1728470706264},{"_id":"themes/cactus-dark/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1728435396838},{"_id":"themes/cactus-dark/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1728435396836},{"_id":"themes/cactus-dark/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1728435396838},{"_id":"themes/cactus-dark/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1728435396847},{"_id":"themes/cactus-dark/layout/_partial/scripts.ejs","hash":"6f6107f5530b77595b829500c65d10b349708ace","modified":1728470408217},{"_id":"themes/cactus-dark/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1728435396848},{"_id":"themes/cactus-dark/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1728435396869},{"_id":"themes/cactus-dark/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1728435396870},{"_id":"themes/cactus-dark/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1728435396934},{"_id":"themes/cactus-dark/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1728435396945},{"_id":"themes/cactus-dark/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1728435396946},{"_id":"themes/cactus-dark/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1728435396946},{"_id":"themes/cactus-dark/source/css/style.styl","hash":"dec23cf1ea4870002713bee9033e385fae25e056","modified":1728460041262},{"_id":"themes/cactus-dark/source/js/main.js","hash":"d55e29bce78c35b81b89039f0a80be6bb65c70d5","modified":1728458785500},{"_id":"themes/cactus-dark/source/js/search.js","hash":"62df6eeb66e002a600317a288e3f8fcd0e9c5492","modified":1728435396976},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1728435396949},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1728435396950},{"_id":"themes/cactus-dark/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1728435396951},{"_id":"themes/cactus-dark/source/images/new-vue.png","hash":"1869481f5edf40419c4a26e6ffc4e0044a93234c","modified":1728435396955},{"_id":"themes/cactus-dark/source/images/vue渲染过程分析.md","hash":"ac7090687e9dee3f31572726b9877afe52036118","modified":1728435396973},{"_id":"themes/cactus-dark/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1728435396840},{"_id":"themes/cactus-dark/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1728435396841},{"_id":"themes/cactus-dark/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1728435396841},{"_id":"themes/cactus-dark/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1728435396842},{"_id":"themes/cactus-dark/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1728435396843},{"_id":"themes/cactus-dark/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1728435396844},{"_id":"themes/cactus-dark/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1728435396845},{"_id":"themes/cactus-dark/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1728435396846},{"_id":"themes/cactus-dark/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1728435396866},{"_id":"themes/cactus-dark/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1728435396867},{"_id":"themes/cactus-dark/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1728435396868},{"_id":"themes/cactus-dark/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1728435396865},{"_id":"themes/cactus-dark/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1728435396872},{"_id":"themes/cactus-dark/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1728435396873},{"_id":"themes/cactus-dark/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1728435396874},{"_id":"themes/cactus-dark/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1728435396876},{"_id":"themes/cactus-dark/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1728435396875},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1728435396879},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1728435396881},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1728435396882},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1728435396882},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1728435396884},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1728435396885},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1728435396886},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1728435396883},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1728435396887},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1728435396888},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1728435396888},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1728435396889},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1728435396890},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1728435396890},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1728435396891},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1728435396892},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1728435396893},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1728435396893},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1728435396894},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1728435396895},{"_id":"themes/cactus-dark/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1728435396896},{"_id":"themes/cactus-dark/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1728435396898},{"_id":"themes/cactus-dark/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1728435396897},{"_id":"themes/cactus-dark/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1728435396899},{"_id":"themes/cactus-dark/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1728435396898},{"_id":"themes/cactus-dark/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1728435396900},{"_id":"themes/cactus-dark/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1728435396901},{"_id":"themes/cactus-dark/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1728435396901},{"_id":"themes/cactus-dark/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1728435396902},{"_id":"themes/cactus-dark/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1728435396905},{"_id":"themes/cactus-dark/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1728435396903},{"_id":"themes/cactus-dark/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1728435396904},{"_id":"themes/cactus-dark/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1728435396905},{"_id":"themes/cactus-dark/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1728435396906},{"_id":"themes/cactus-dark/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1728435396907},{"_id":"themes/cactus-dark/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1728435396908},{"_id":"themes/cactus-dark/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1728435396909},{"_id":"themes/cactus-dark/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1728435396909},{"_id":"themes/cactus-dark/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1728435396910},{"_id":"themes/cactus-dark/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1728435396911},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1728435396912},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1728435396913},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1728435396914},{"_id":"themes/cactus-dark/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1728435396916},{"_id":"themes/cactus-dark/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1728435396915},{"_id":"themes/cactus-dark/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1728435396916},{"_id":"themes/cactus-dark/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1728435396917},{"_id":"themes/cactus-dark/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1728435396918},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1728435396918},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1728435396919},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1728435396920},{"_id":"themes/cactus-dark/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1728435396921},{"_id":"themes/cactus-dark/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1728435396921},{"_id":"themes/cactus-dark/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1728435396922},{"_id":"themes/cactus-dark/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1728435396924},{"_id":"themes/cactus-dark/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1728435396924},{"_id":"themes/cactus-dark/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1728435396923},{"_id":"themes/cactus-dark/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1728435396925},{"_id":"themes/cactus-dark/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1728435396926},{"_id":"themes/cactus-dark/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1728435396927},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1728435396928},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1728435396929},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1728435396929},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1728435396930},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1728435396931},{"_id":"themes/cactus-dark/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1728435396931},{"_id":"themes/cactus-dark/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1728435396932},{"_id":"themes/cactus-dark/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1728435396933},{"_id":"themes/cactus-dark/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1728435396935},{"_id":"themes/cactus-dark/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1728435396936},{"_id":"themes/cactus-dark/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1728435396936},{"_id":"themes/cactus-dark/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1728435396937},{"_id":"themes/cactus-dark/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1728435396938},{"_id":"themes/cactus-dark/source/css/_partial/header.styl","hash":"519af79eb34ee922b48e6c19aa8f4856e3f76486","modified":1728435396938},{"_id":"themes/cactus-dark/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1728435396939},{"_id":"themes/cactus-dark/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1728435396940},{"_id":"themes/cactus-dark/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1728435396943},{"_id":"themes/cactus-dark/source/css/_partial/tags.styl","hash":"2ac685ffd4185530cc801d6db65748a05bbf9ca0","modified":1728456241943},{"_id":"themes/cactus-dark/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1728435396944},{"_id":"themes/cactus-dark/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1728435396977},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1728435397094},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1728435397096},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1728435397105},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1728435397107},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1728435397114},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1728435397116},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1728435397125},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1728435397127},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1728435397134},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1728435397136},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1728435397144},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1728435397146},{"_id":"themes/cactus-dark/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1728435397147},{"_id":"themes/cactus-dark/source/images/reactFiber/react-beta.png","hash":"175f7ce3db07872f7646dc582c9ee84475694327","modified":1728435396965},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_desktop.styl","hash":"ae3d9090bf4d934d443c0a431cb09d009743155a","modified":1728435396941},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1728435396942},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1728435396981},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1728435397000},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1728435397003},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1728435397004},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1728435397005},{"_id":"themes/cactus-dark/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1728435397025},{"_id":"themes/cactus-dark/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1728435397027},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1728435397023},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1728435397089},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1728435397092},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1728435397099},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1728435397102},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1728435397109},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1728435397112},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1728435397119},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1728435397122},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1728435397129},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1728435397132},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1728435397139},{"_id":"themes/cactus-dark/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1728435397141},{"_id":"themes/cactus-dark/source/images/reactFiber/fiber2.png","hash":"44129d9e68af05e913fe02e3ecde8b718ab0f541","modified":1728435396963},{"_id":"themes/cactus-dark/source/images/singleSpa/state.png","hash":"4d5b5d84f01328e42ef8b20459e5a55258ebbdcf","modified":1728435396971},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1728435396997},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1728435396996},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1728435397019},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1728435397021},{"_id":"themes/cactus-dark/source/images/nginx/image-20200607145042859.png","hash":"c5cf9ce0948e8a4b6c068d6061474fc127630f48","modified":1728435396958},{"_id":"themes/cactus-dark/source/images/reactFiber/fiber1.png","hash":"48f8b77286d50bb007a4c9263eb310a83b7ebb54","modified":1728435396961},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1728435396983},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1728435396994},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1728435397002},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1728435397008},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1728435397016},{"_id":"themes/cactus-dark/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1728435396953},{"_id":"themes/cactus-dark/source/images/singleSpa/1.png","hash":"008cd2181973fd6038248ddf6d9bdf604393c34f","modified":1728435396968},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1728435397035},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1728435397056},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1728435397077},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1728435397040},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1728435397061},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1728435397081},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1728435397031},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1728435397046},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1728435397051},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1728435397066},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1728435397072},{"_id":"themes/cactus-dark/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1728435397086},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1728435396989},{"_id":"themes/cactus-dark/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1728435397014},{"_id":"public/about/index.html","hash":"3fc8e573cec3768f8feeef9990be0de9e1e5f80a","modified":1728472732543},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1728472732543},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1728472732543},{"_id":"public/images/new-vue.png","hash":"1869481f5edf40419c4a26e6ffc4e0044a93234c","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1728472732543},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1728472732543},{"_id":"public/images/reactFiber/react-beta.png","hash":"175f7ce3db07872f7646dc582c9ee84475694327","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1728472732543},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1728472732543},{"_id":"public/js/search.js","hash":"62df6eeb66e002a600317a288e3f8fcd0e9c5492","modified":1728472732543},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1728472732543},{"_id":"public/js/main.js","hash":"d55e29bce78c35b81b89039f0a80be6bb65c70d5","modified":1728472732543},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1728472732543},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1728472732543},{"_id":"public/images/vue渲染过程分析.html","hash":"98804ad24ccc57c54d3131dd1c48c42f8a22d2b0","modified":1728472732543},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1728472732543},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1728472732543},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1728472732543},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1728472732543},{"_id":"public/images/reactFiber/fiber2.png","hash":"44129d9e68af05e913fe02e3ecde8b718ab0f541","modified":1728472732543},{"_id":"public/images/singleSpa/state.png","hash":"4d5b5d84f01328e42ef8b20459e5a55258ebbdcf","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1728472732543},{"_id":"public/images/reactFiber/fiber1.png","hash":"48f8b77286d50bb007a4c9263eb310a83b7ebb54","modified":1728472732543},{"_id":"public/images/nginx/image-20200607145042859.png","hash":"c5cf9ce0948e8a4b6c068d6061474fc127630f48","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1728472732543},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1728472732543},{"_id":"public/images/singleSpa/1.png","hash":"008cd2181973fd6038248ddf6d9bdf604393c34f","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1728472732543},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1728472732543},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1728472732543},{"_id":"source/_posts/react/Fiber架构.md","hash":"9ac46889d696a25c8e286618b78b1045eb56f1be","modified":1728470707382},{"_id":"source/_posts/cicd/持续集成 - 使用Gilab CI构建你的前端项目.md","hash":"240ec04e58947c547363c6bb2fbd2cb969b8f406","modified":1728435504329},{"_id":"source/_posts/cicd/持续集成 - 代码质量扫描篇.md","hash":"328309dcf422208d0ebc0910cc15c6114d550f1b","modified":1728435504329},{"_id":"source/_posts/vue/task.md","hash":"b63434823eca1d1843f72ace7849933ad15acf65","modified":1728438476681},{"_id":"source/_posts/debug/whistle.md","hash":"c26bc1c673b9d4268acb68f85b2e1074b362df0e","modified":1728462926956},{"_id":"source/_posts/vue/vue渲染过程分析.md","hash":"48b5dd6a907d8b3ff071c6f91a5bacbee5dde404","modified":1728470707383},{"_id":"source/_posts/MicroFrontend/module-federation.md","hash":"0a7feb550fa766a962b1e595b80e6ff192c9a44b","modified":1728470707383},{"_id":"source/_posts/singleSpa/Single-SPA微前端框架的使用Demo汇总.md","hash":"e5bda00df6635fda8572c3b2cde114c92ab9d458","modified":1728470707383},{"_id":"source/_data/projects.json","hash":"d44629439799d2b0f62d2ca56d2e23900f1e7561","modified":1728463043027},{"_id":"public/2023/09/01/vue/task/index.html","hash":"5ed7d86259b1b51e3a5c75ddc3518215e83ddca4","modified":1728472732543},{"_id":"public/2022/09/01/vue/vue渲染过程分析/index.html","hash":"3b5b6c2f465e76de1fd7621d1bcf68f1dfb9f738","modified":1728458957356},{"_id":"public/2020/06/25/nginx/nginx基础/index.html","hash":"ea7bab2845c75af607cef122a989e3d456bfa368","modified":1728472732543},{"_id":"public/2020/06/25/nginx/nginx实战/index.html","hash":"73741f1d986eb4d1f14714eb39e64ad6c240ff9c","modified":1728472732543},{"_id":"public/2020/06/25/nginx/nginx/index.html","hash":"564d8193a495751b88adbb5bc6a0564a5d2c6a30","modified":1728472732543},{"_id":"public/2019/12/15/debug/whistle/index.html","hash":"c6e08f4c6b7ccd9f61b6bb8d7b76521cfebcf2b7","modified":1728458957356},{"_id":"public/2018/10/31/singleSpa/Single-SPA微前端框架的使用Demo汇总/index.html","hash":"48f13b44d03f4ea7d75d483863c7a61f90aaafac","modified":1728472732543},{"_id":"public/2018/09/01/singleSpa/single-spa脉络/index.html","hash":"d186683790f7b0c0f77efa06dbf4780a07c1454e","modified":1728472732543},{"_id":"public/2018/09/01/Taro/9.h5 日志/index.html","hash":"be8616b9c3ee67e315a03b66a1b8356134e15526","modified":1728458957356},{"_id":"public/2018/09/01/singleSpa/single-spa-api/index.html","hash":"33b307a1b0dc100d4d44244165c1479b0f35465b","modified":1728472732543},{"_id":"public/2018/09/01/react/Fiber架构/index.html","hash":"7b3772807906aa3bb3af2cf7502d3dac718142fd","modified":1728458957356},{"_id":"public/archives/2018/09/page/2/index.html","hash":"292e13967e77aad6a533ee6011cff3a330363001","modified":1728445444177},{"_id":"public/archives/2022/09/index.html","hash":"35c1ca9df5650543a4b2247f3cec2bbf3d1207f8","modified":1728458957356},{"_id":"public/archives/2022/index.html","hash":"cb276233ef1dcd217b1804c3487ef03c04bd9e5f","modified":1728458957356},{"_id":"public/archives/2023/index.html","hash":"ed57ba1b503930da6e068226fed54390070609f6","modified":1728472732543},{"_id":"public/archives/2023/09/index.html","hash":"2bf021862f6a1508411ec182ad55437c64576543","modified":1728472732543},{"_id":"public/nginx/index.html","hash":"f199f227ccba7ff5cab14336f83aacfe4ac25ce6","modified":1728445444177},{"_id":"public/nginx/page/3/index.html","hash":"ee04b95c5f26fbc0b40dbd3908fbee050b65b4ad","modified":1728445444177},{"_id":"public/nginx/page/2/index.html","hash":"c40a0ff4958160529be09798992eab5806beefef","modified":1728445444177},{"_id":"public/nginx/page/4/index.html","hash":"3df4fea3fb4ba1d2964c5e6b1ac8e1fca3e73908","modified":1728445444177},{"_id":"public/nginx/page/5/index.html","hash":"01802c310b1ccc849201d5d73e57e9a905e9d8c5","modified":1728445444177},{"_id":"public/2018/09/01/MicroFrontend/module-federation/index.html","hash":"6bdfcf193a95a3d0ded73e12b9e40c36875bc971","modified":1728458957356},{"_id":"public/archives/2020/page/2/index.html","hash":"fea4d58522c1bd8e2a9ff033fd3bb975570de930","modified":1728445444177},{"_id":"public/tags/debug/index.html","hash":"481ed85aa2553cf443ec71ba75088c83897e3b42","modified":1728472732543},{"_id":"public/tags/源码/index.html","hash":"04d2c323684c064fe5e709b440fbd570562f921d","modified":1728472732543},{"_id":"public/tags/React/index.html","hash":"abde5981cd168ed180b7c28cbf9f55e147fe2b30","modified":1728472732543},{"_id":"public/tags/vue/index.html","hash":"e9a3723ed59217502023a560f16b35972f8b91fe","modified":1728472732543},{"_id":"public/tags/移动端/index.html","hash":"5f9c54d24928a8dc3b46a805b7329ec81f24bf29","modified":1728472732543},{"_id":"public/tags/Nginx/index.html","hash":"6cb1c3fc06a262a9f81b3878d9e191b4caddf8af","modified":1728472732543},{"_id":"source/_posts/hh.md","hash":"219ed8504687e2bf6818d1909fed5043b1b0eaf4","modified":1728452755673},{"_id":"themes/cactus-dark/layout/_partial/tagcloud.ejs","hash":"452ff0db6a0b6792ad7f00adc54e854c82d77527","modified":1728450807351},{"_id":"themes/cactus-dark/source/data/today.json","hash":"f84ec1e5475ba3088710d890f5ee6216c4fd3998","modified":1728460746980},{"_id":"public/data/today.json","hash":"ec7725e3c9d8a650f5c38857021af5713d50ceb2","modified":1728472732543},{"_id":"source/_posts/_Taro/5.Taro跨端开发之多业务模块管理React Native篇(终篇).md","hash":"74ad5c466ab4a774cb57f6033e4d63d40a85c832","modified":1728470707382},{"_id":"source/_posts/_Taro/6.Taro跨端开发之让Taro UI支持React Native.md","hash":"799978bd97816bec696d3652b1e3b1317e4498bd","modified":1728470707382},{"_id":"source/_posts/_Taro/2.Taro跨端开发之依赖管理问题.md","hash":"482cf3a6e63dacec1c4f5b11829d3fcaa5788001","modified":1728470707382},{"_id":"source/_posts/_Taro/1.Taro跨端开发之跨端开发新时代的思考与举措.md","hash":"e30a7e5733a71e7a90fd2535ebfef9056a62d07a","modified":1728470707383},{"_id":"source/_posts/_Taro/4.Taro跨端开发之多业务模块管理React Native篇(中).md","hash":"8ed6bfac33213c90b688ff43951a2ab6b3bd2c0f","modified":1728470707382},{"_id":"source/_posts/_Taro/7.使用Taro开发的快应用如何优化体积.md","hash":"f9f5701e575253872684feb560f9bb8cc326dda1","modified":1728470707382},{"_id":"source/_posts/_Taro/9.h5 日志.md","hash":"c965fa3277cf3c79ee857f5390e10304e1d08701","modified":1728470707383},{"_id":"source/_posts/_Taro/3.Taro跨端开发之多业务模块管理React Native篇(上).md","hash":"e3882bcb3b2d3c813ce2f9171880363e19de0081","modified":1728470707383},{"_id":"source/_posts/_Taro/8.使用Taro开发各端的顺序建议.md","hash":"03f9430ba2aaef579894fd6cfbfd73e174ed6525","modified":1728470707382},{"_id":"source/_data/_1.js","hash":"e184fd7715456680cd51217306e523f37672960f","modified":1728463036128},{"_id":"source/_posts/_Taro/前端微服务化解决方案4 - 消息总线.md","hash":"9bb1c96f594590fa18fd2c43172dda379afec956","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化解决方案1 - 思考.md","hash":"53ed6309746f653402bb189016a819a878b4c549","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化解决方案3 - 模块加载器.md","hash":"23e76ed8a00ed9c89ba2480b11e684155d5858da","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化解决方案2 - Single-SPA.md","hash":"696a4faeb5c9a288b2583f44b9acc0559aae4e29","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化解决方案5 - 路由分发.md","hash":"5bc10a964c7170bbd5b6da74321fce3e39614e7a","modified":1728470707383},{"_id":"source/_posts/_Taro/前端微服务化解决方案6 - 构建与部署.md","hash":"a64c607d0f41d8e52e5be01d8bceca50f121f97d","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化解决方案7 - 静态数据共享.md","hash":"191729bac1af17bf6f163778ce511d62105c5206","modified":1728470707383},{"_id":"source/_posts/_Taro/前端微服务化解决方案8 - 二次构建.md","hash":"031920428b5b5933ada18f2d68683f94b9364e90","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化进阶2 - 本地开发指南.md","hash":"8cd9dde67d63d5e060fc0a4c43c31a9a5a47b839","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化进阶1 - 基于umi的微服务化方案.md","hash":"60e77332cc49f96eda7915a1a9c07fc3790e7f90","modified":1728470707382},{"_id":"source/_posts/_Taro/前端微服务化进阶4 - 跨框架共享组件(微件化).md","hash":"7bf584c8da5335ce023a72f338f3cfb9bcbab9b0","modified":1728470707383},{"_id":"source/_posts/_Taro/前端微服务化进阶3 - 跨模块共享组件.md","hash":"f15fa596706f3ee130ebc92022b433d7fd2d7094","modified":1728470707382},{"_id":"source/_posts/_Taro/如何在webpack与system中构建你的Single-SPA微前端应用.md","hash":"f2487855882ceb70327945db413606c1b4dc3166","modified":1728461988225},{"_id":"source/_posts/debug/h5 日志.md","hash":"c965fa3277cf3c79ee857f5390e10304e1d08701","modified":1728470707382},{"_id":"source/_data/_projects.json","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1728463779282},{"_id":"themes/cactus-dark/source/lib/typed/typed.min.js","hash":"52e6f43e53d2a917a8e209f6e8d38de47972c17e","modified":1728470088681},{"_id":"public/2024/09/15/CICD/持续集成 - 使用Gilab CI构建你的前端项目/index.html","hash":"80f23705e4f092844c5a5a808d8ce619aef883f3","modified":1728472732543},{"_id":"public/2024/09/15/CICD/持续集成 - 代码质量扫描篇/index.html","hash":"3161ac4256406b62c7c0aa32d5766a3f3dea15bd","modified":1728472732543},{"_id":"public/2024/06/15/MicroFrontend/module-federation/index.html","hash":"b0703ebdaec17c24e161ba24ac6a9449b9b4f26c","modified":1728472732543},{"_id":"public/2024/03/01/react/Fiber架构/index.html","hash":"0dd540e6ffede6b6f839eaa026c8bde9637767a3","modified":1728472732543},{"_id":"public/2023/09/01/vue/vue渲染过程分析/index.html","hash":"61f5c0c4d9ea6798f417b62bc3804ccf26c4d315","modified":1728472732543},{"_id":"public/2018/09/15/debug/whistle/index.html","hash":"6d1b2cbe5220567b7ae27b6a0c3e7ecd321eec60","modified":1728472732543},{"_id":"public/2018/09/01/debug/h5 日志/index.html","hash":"3a80a65d9723139cbc6e9b7f62b78df4f62fcf86","modified":1728472732543},{"_id":"public/archives/2024/03/index.html","hash":"a4c5fb214b66dbb2c6b85f788b5d495c0f7c43e7","modified":1728472732543},{"_id":"public/archives/2024/09/index.html","hash":"50c57c732344970754ccbd6fce27ba1e9698a756","modified":1728472732543},{"_id":"public/archives/2024/06/index.html","hash":"e448e8b8f76858d5fd3017b644e4975feb8fccae","modified":1728472732543},{"_id":"public/tags/前端全栈/index.html","hash":"5fcaf4edd42ff745f130f38a8c604339e013f15f","modified":1728472732543},{"_id":"public/lib/typed/typed.min.js","hash":"52e6f43e53d2a917a8e209f6e8d38de47972c17e","modified":1728472732543}],"Category":[],"Data":[{"_id":"_1","data":"[\n    {\n       \"name\":\"程序猿数学基础\",\n       \"url\":\"https://alili.tech/tags/%E6%95%B0%E5%AD%A6/\",\n       \"desc\":\"程序员的数学基础课学习笔记\"\n    },\n    {\n        \"name\":\"微前端系列文章\",\n        \"url\":\"https://alili.tech/tags/microfrontend/\",\n        \"desc\":\"讲述我的微前端的落地历程\"\n     },\n    {\n       \"name\":\"跨端开发系列文章\",\n       \"url\":\"https://alili.tech/tags/%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/\",\n       \"desc\":\"我们是如何一套代码跑8个端的实践心得\"\n    },\n    {\n        \"name\":\"AliToSign\",\n        \"url\":\"https://github.com/Num142857/AliToSign\",\n        \"desc\":\"基于nodejs的阿里云API签名生成工具\"\n     },\n    {\n       \"name\":\"StillFantasy\",\n       \"url\":\"https://github.com/Num142857/StillFantasy/\",\n       \"desc\":\"歌词自动下载工具\"\n    }\n]"}],"Page":[{"title":"About Me","date":"2020-06-25T06:31:51.000Z","_content":"\n# 技术方向: Front End Developer ---> Full Stack Developer\n\n## 个人简历\n\n性别：男 出生地：江西·上饶 生日：1989.01\n\n电子邮箱：codcer@gmail.com | 2969206932@qq.com\n\n毕业院校：南昌理工 2008.09-2012.07 专业：计算机科学与技术\n\n所在地: 厦门\n\n## 专业技能\n\n- 熟悉 HTML5、CSS、JavaScript、TypeScript、Ajax、PWA、性能优化、模块化、node、自动化、gulp、i18n、前端规范（eslint+pritter+husky+changelog+git cz） 等相关 web 前端技术；\n- 熟悉常用的 UI 框架（element-ui、antd、antm、cube-ui、vux）等其它 ui 框架的使用；\n- 熟悉浏览器、H5 兼容性，bug 分析、定位，编写底层封装、webpack 插件来提升打包、性能及体验等；\n- 熟练使用 webpack 搭建开发 H5(各种适配方案)、PC 端、Hybird、SPA、MPA 等自定环境；\n- 熟练 MVC、发布-订阅等设计模式、主流技术栈全家桶完成开发；\n- 熟练 MVVM 框架开发（VUE、React）及生态（vuex、saga、redux、redux-thunk）运用等；\n- 发布 npm：v-vuex【vuex model 化】、postcss-pxtovw-includes【针对特定目录转 vw】、hijacking-webpack-plugin【防 DNS 劫持】;j 具体见本人 github（juhttp://github.com/codcer）;\n- 对性能优化，前端全栈方案的持续探究等。（长任务-time-slice，请求过度-axios-cancelToken，微前端服务-simple-spa-可落地）。\n\n## 项目经验\n\n> `神州优车` 2019.7 - 至今\n\n前端工程师 福建~厦门\n\n负责买买车业务系统的前端设计及改进，并参与后管系统、车主还款 H5 端、hbiryd 开发；\n\n负责系统优化，如打包，缓存，垫片等策略方面；\n\n带新人；\n\n负责前端埋点监控系统研发，技术基建开发。（个人发起）【开发中】\n\n技术栈：vue + vuex + elementUI + cube-ui + webpack + 垫片（主要用于 H5 端）\n\n主要负责：\n\n- 后管系统（vue + vuex + elementUI + webpack）\n\n  1. 底层封装：axios 拦截器配置，全局防重复请求，主要利用 axios.cancelToken 生成对应 cancel 方法，利用 hash（req.url + 参数哈希 + method）标记唯一性，队列中存在相同的请求，后入队列请求 cancel，请求结束移除对应的请求；\n  2. 组件取消请求 mixin：通过钩子 created、beforeDestroy2 个钩子，在 created 生成 cancel，在 beforeDestroy 执行 cancel；\n  3. 无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据，和 elementUI 菜单组件、路由传递权限拼装；页面级 provide、组件级 inject；\n  4. tab 导航生成，利用 v-vuex、vuex 全局和 router，生成已打开菜单组，删除，右键批量操作更新相应的 vuex 中 mutaion、action;\n  5. 封装动态表单及动态校验；\n\n- 车主还款 h5 端 + hybrid 端（ios、安卓）（vue + vuex + cube-ui + webpack + 垫片 + PWA + pxtovw）\n\n  1. 封装一套代码适用 h5、hybrid 端，jsbridge 封装（js 桥、数据加密、解密封装）、动态惰性切换请求模式；\n  2. 三方支付（支付宝、银联、云闪付、微信）app 和 h5 端对接；\n  3. 为了解决产品要求一致性，重写键盘界面 + 相对复杂的交互；\n  4. 垫片采取 core-js 按需导入方式解决浏览器 api 不兼容问题；\n  5. PWA 策略：静态资源通过缓存优先，接口资源通过网络优先策略；online、offline 提醒；添加桌面应用；\n\n> `杭州铭师堂教育有限公司` 2016.5 - 2019.7\n\n前端工程师(业务负责人) 浙江~杭州\n\n负责 OA 业务系统的前端设计及优化，OA 业务系统 H5、hbiryd 端开发；\n\n负责系统优化，如打包，缓存，垫片等策略方面；\n\n参与其它业务线专题、h5 开发；\n\n技术栈：react + redux + antd（PC）｜ antm（h5）、vue + vuex + vux + babel-polyfill 垫片（H5、hybrid 端）\n\n主要负责：\n\n- 后管系统（react + redux + antd + webpack + i18n）- PC 端 OA\n\n  1. 组件、页面取消请求 高阶组件：通过钩子 constructor、componentWillUnmount、render 个钩子，在 constructor 生成 cancel，在 componentWillUnmount 执行 cancel, 在 render 返回高阶组件的属性代理；\n  2. 无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据， 菜单 Menu、SubMenu、Item 组件、路由 prop 传递权限拼装；页面级 provider、组件级 consumer；\n  3. 面包屑 tab 导航生成，利用 redux redux-thunk 和 router，生成已打开菜单组，删除，右键批量操作更新相应的 redux 中 action -> reducer -> state。\n\n- OA 业务系统 H5、hbiryd 端开发 （vue + vuex + vux + babel-polyfill 垫片+pxtorem）- 移动端 OA\n\n  1. 大数据量优化 - 虚拟列表优化；\n  2. 员工地图定位、签到拍照打卡，基于高德地图 api 定位，定位准确率 97%；签到工作流缓存策略；\n  3. 拍照上传压缩优化进度展示；压缩之后比例 500kb 之内；\n\n- 其它业务线专题页、h5 开发 （react + redux + antd + webpack + MPA）\n  1. 专题页 采取 MPA 方式即多入口页面开发，router 自动生成，依据 require.context 扫描目录生成 routes 表，主要是因为各个页面不相互关联，故采取这种 2B 方式开发；\n  2. 页面 store 采取动态注入方式，主要通过的 getComponent, combineReducer Api；\n  3. 做过的功能，如做题，题目解析，分析报告图表 echart；活动下单存储策略；多个块滚动吸附吸顶；\n\n> `杭州粉团网络公司` 2012.4 - 2016.5\n\n前端工程师(前端 leader) 浙江~杭州\n\n负责借贷后台系统的前端设计及优化，借贷 H5、hbiryd 端开发，系统优化；\n\n技术栈：react + redux + antd（PC）、jquery + html5(H5、hybrid 端)\n\n## 友情链接\n \n-","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2020-06-25 14:31:51\n---\n\n# 技术方向: Front End Developer ---> Full Stack Developer\n\n## 个人简历\n\n性别：男 出生地：江西·上饶 生日：1989.01\n\n电子邮箱：codcer@gmail.com | 2969206932@qq.com\n\n毕业院校：南昌理工 2008.09-2012.07 专业：计算机科学与技术\n\n所在地: 厦门\n\n## 专业技能\n\n- 熟悉 HTML5、CSS、JavaScript、TypeScript、Ajax、PWA、性能优化、模块化、node、自动化、gulp、i18n、前端规范（eslint+pritter+husky+changelog+git cz） 等相关 web 前端技术；\n- 熟悉常用的 UI 框架（element-ui、antd、antm、cube-ui、vux）等其它 ui 框架的使用；\n- 熟悉浏览器、H5 兼容性，bug 分析、定位，编写底层封装、webpack 插件来提升打包、性能及体验等；\n- 熟练使用 webpack 搭建开发 H5(各种适配方案)、PC 端、Hybird、SPA、MPA 等自定环境；\n- 熟练 MVC、发布-订阅等设计模式、主流技术栈全家桶完成开发；\n- 熟练 MVVM 框架开发（VUE、React）及生态（vuex、saga、redux、redux-thunk）运用等；\n- 发布 npm：v-vuex【vuex model 化】、postcss-pxtovw-includes【针对特定目录转 vw】、hijacking-webpack-plugin【防 DNS 劫持】;j 具体见本人 github（juhttp://github.com/codcer）;\n- 对性能优化，前端全栈方案的持续探究等。（长任务-time-slice，请求过度-axios-cancelToken，微前端服务-simple-spa-可落地）。\n\n## 项目经验\n\n> `神州优车` 2019.7 - 至今\n\n前端工程师 福建~厦门\n\n负责买买车业务系统的前端设计及改进，并参与后管系统、车主还款 H5 端、hbiryd 开发；\n\n负责系统优化，如打包，缓存，垫片等策略方面；\n\n带新人；\n\n负责前端埋点监控系统研发，技术基建开发。（个人发起）【开发中】\n\n技术栈：vue + vuex + elementUI + cube-ui + webpack + 垫片（主要用于 H5 端）\n\n主要负责：\n\n- 后管系统（vue + vuex + elementUI + webpack）\n\n  1. 底层封装：axios 拦截器配置，全局防重复请求，主要利用 axios.cancelToken 生成对应 cancel 方法，利用 hash（req.url + 参数哈希 + method）标记唯一性，队列中存在相同的请求，后入队列请求 cancel，请求结束移除对应的请求；\n  2. 组件取消请求 mixin：通过钩子 created、beforeDestroy2 个钩子，在 created 生成 cancel，在 beforeDestroy 执行 cancel；\n  3. 无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据，和 elementUI 菜单组件、路由传递权限拼装；页面级 provide、组件级 inject；\n  4. tab 导航生成，利用 v-vuex、vuex 全局和 router，生成已打开菜单组，删除，右键批量操作更新相应的 vuex 中 mutaion、action;\n  5. 封装动态表单及动态校验；\n\n- 车主还款 h5 端 + hybrid 端（ios、安卓）（vue + vuex + cube-ui + webpack + 垫片 + PWA + pxtovw）\n\n  1. 封装一套代码适用 h5、hybrid 端，jsbridge 封装（js 桥、数据加密、解密封装）、动态惰性切换请求模式；\n  2. 三方支付（支付宝、银联、云闪付、微信）app 和 h5 端对接；\n  3. 为了解决产品要求一致性，重写键盘界面 + 相对复杂的交互；\n  4. 垫片采取 core-js 按需导入方式解决浏览器 api 不兼容问题；\n  5. PWA 策略：静态资源通过缓存优先，接口资源通过网络优先策略；online、offline 提醒；添加桌面应用；\n\n> `杭州铭师堂教育有限公司` 2016.5 - 2019.7\n\n前端工程师(业务负责人) 浙江~杭州\n\n负责 OA 业务系统的前端设计及优化，OA 业务系统 H5、hbiryd 端开发；\n\n负责系统优化，如打包，缓存，垫片等策略方面；\n\n参与其它业务线专题、h5 开发；\n\n技术栈：react + redux + antd（PC）｜ antm（h5）、vue + vuex + vux + babel-polyfill 垫片（H5、hybrid 端）\n\n主要负责：\n\n- 后管系统（react + redux + antd + webpack + i18n）- PC 端 OA\n\n  1. 组件、页面取消请求 高阶组件：通过钩子 constructor、componentWillUnmount、render 个钩子，在 constructor 生成 cancel，在 componentWillUnmount 执行 cancel, 在 render 返回高阶组件的属性代理；\n  2. 无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据， 菜单 Menu、SubMenu、Item 组件、路由 prop 传递权限拼装；页面级 provider、组件级 consumer；\n  3. 面包屑 tab 导航生成，利用 redux redux-thunk 和 router，生成已打开菜单组，删除，右键批量操作更新相应的 redux 中 action -> reducer -> state。\n\n- OA 业务系统 H5、hbiryd 端开发 （vue + vuex + vux + babel-polyfill 垫片+pxtorem）- 移动端 OA\n\n  1. 大数据量优化 - 虚拟列表优化；\n  2. 员工地图定位、签到拍照打卡，基于高德地图 api 定位，定位准确率 97%；签到工作流缓存策略；\n  3. 拍照上传压缩优化进度展示；压缩之后比例 500kb 之内；\n\n- 其它业务线专题页、h5 开发 （react + redux + antd + webpack + MPA）\n  1. 专题页 采取 MPA 方式即多入口页面开发，router 自动生成，依据 require.context 扫描目录生成 routes 表，主要是因为各个页面不相互关联，故采取这种 2B 方式开发；\n  2. 页面 store 采取动态注入方式，主要通过的 getComponent, combineReducer Api；\n  3. 做过的功能，如做题，题目解析，分析报告图表 echart；活动下单存储策略；多个块滚动吸附吸顶；\n\n> `杭州粉团网络公司` 2012.4 - 2016.5\n\n前端工程师(前端 leader) 浙江~杭州\n\n负责借贷后台系统的前端设计及优化，借贷 H5、hbiryd 端开发，系统优化；\n\n技术栈：react + redux + antd（PC）、jquery + html5(H5、hybrid 端)\n\n## 友情链接\n \n-","updated":"2024-10-09T10:45:07.382Z","path":"about/index.html","_id":"cm215xfkr0000an9kczieh8rf","comments":1,"layout":"page","content":"<h1 id=\"技术方向-Front-End-Developer-—-Full-Stack-Developer\"><a href=\"#技术方向-Front-End-Developer-—-Full-Stack-Developer\" class=\"headerlink\" title=\"技术方向: Front End Developer —&gt; Full Stack Developer\"></a>技术方向: Front End Developer —&gt; Full Stack Developer</h1><h2 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h2><p>性别：男 出生地：江西·上饶 生日：1989.01</p>\n<p>电子邮箱：<a href=\"mailto:&#x63;&#111;&#x64;&#99;&#101;&#114;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x63;&#111;&#x64;&#99;&#101;&#114;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a> | <a href=\"mailto:&#50;&#57;&#54;&#57;&#50;&#x30;&#54;&#x39;&#x33;&#50;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;\">&#50;&#57;&#54;&#57;&#50;&#x30;&#54;&#x39;&#x33;&#50;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a></p>\n<p>毕业院校：南昌理工 2008.09-2012.07 专业：计算机科学与技术</p>\n<p>所在地: 厦门</p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li>熟悉 HTML5、CSS、JavaScript、TypeScript、Ajax、PWA、性能优化、模块化、node、自动化、gulp、i18n、前端规范（eslint+pritter+husky+changelog+git cz） 等相关 web 前端技术；</li>\n<li>熟悉常用的 UI 框架（element-ui、antd、antm、cube-ui、vux）等其它 ui 框架的使用；</li>\n<li>熟悉浏览器、H5 兼容性，bug 分析、定位，编写底层封装、webpack 插件来提升打包、性能及体验等；</li>\n<li>熟练使用 webpack 搭建开发 H5(各种适配方案)、PC 端、Hybird、SPA、MPA 等自定环境；</li>\n<li>熟练 MVC、发布-订阅等设计模式、主流技术栈全家桶完成开发；</li>\n<li>熟练 MVVM 框架开发（VUE、React）及生态（vuex、saga、redux、redux-thunk）运用等；</li>\n<li>发布 npm：v-vuex【vuex model 化】、postcss-pxtovw-includes【针对特定目录转 vw】、hijacking-webpack-plugin【防 DNS 劫持】;j 具体见本人 github（ju<a href=\"http://github.com/codcer%EF%BC%89\">http://github.com/codcer）</a>;</li>\n<li>对性能优化，前端全栈方案的持续探究等。（长任务-time-slice，请求过度-axios-cancelToken，微前端服务-simple-spa-可落地）。</li>\n</ul>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><blockquote>\n<p><code>神州优车</code> 2019.7 - 至今</p>\n</blockquote>\n<p>前端工程师 福建~厦门</p>\n<p>负责买买车业务系统的前端设计及改进，并参与后管系统、车主还款 H5 端、hbiryd 开发；</p>\n<p>负责系统优化，如打包，缓存，垫片等策略方面；</p>\n<p>带新人；</p>\n<p>负责前端埋点监控系统研发，技术基建开发。（个人发起）【开发中】</p>\n<p>技术栈：vue + vuex + elementUI + cube-ui + webpack + 垫片（主要用于 H5 端）</p>\n<p>主要负责：</p>\n<ul>\n<li><p>后管系统（vue + vuex + elementUI + webpack）</p>\n<ol>\n<li>底层封装：axios 拦截器配置，全局防重复请求，主要利用 axios.cancelToken 生成对应 cancel 方法，利用 hash（req.url + 参数哈希 + method）标记唯一性，队列中存在相同的请求，后入队列请求 cancel，请求结束移除对应的请求；</li>\n<li>组件取消请求 mixin：通过钩子 created、beforeDestroy2 个钩子，在 created 生成 cancel，在 beforeDestroy 执行 cancel；</li>\n<li>无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据，和 elementUI 菜单组件、路由传递权限拼装；页面级 provide、组件级 inject；</li>\n<li>tab 导航生成，利用 v-vuex、vuex 全局和 router，生成已打开菜单组，删除，右键批量操作更新相应的 vuex 中 mutaion、action;</li>\n<li>封装动态表单及动态校验；</li>\n</ol>\n</li>\n<li><p>车主还款 h5 端 + hybrid 端（ios、安卓）（vue + vuex + cube-ui + webpack + 垫片 + PWA + pxtovw）</p>\n<ol>\n<li>封装一套代码适用 h5、hybrid 端，jsbridge 封装（js 桥、数据加密、解密封装）、动态惰性切换请求模式；</li>\n<li>三方支付（支付宝、银联、云闪付、微信）app 和 h5 端对接；</li>\n<li>为了解决产品要求一致性，重写键盘界面 + 相对复杂的交互；</li>\n<li>垫片采取 core-js 按需导入方式解决浏览器 api 不兼容问题；</li>\n<li>PWA 策略：静态资源通过缓存优先，接口资源通过网络优先策略；online、offline 提醒；添加桌面应用；</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><code>杭州铭师堂教育有限公司</code> 2016.5 - 2019.7</p>\n</blockquote>\n<p>前端工程师(业务负责人) 浙江~杭州</p>\n<p>负责 OA 业务系统的前端设计及优化，OA 业务系统 H5、hbiryd 端开发；</p>\n<p>负责系统优化，如打包，缓存，垫片等策略方面；</p>\n<p>参与其它业务线专题、h5 开发；</p>\n<p>技术栈：react + redux + antd（PC）｜ antm（h5）、vue + vuex + vux + babel-polyfill 垫片（H5、hybrid 端）</p>\n<p>主要负责：</p>\n<ul>\n<li><p>后管系统（react + redux + antd + webpack + i18n）- PC 端 OA</p>\n<ol>\n<li>组件、页面取消请求 高阶组件：通过钩子 constructor、componentWillUnmount、render 个钩子，在 constructor 生成 cancel，在 componentWillUnmount 执行 cancel, 在 render 返回高阶组件的属性代理；</li>\n<li>无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据， 菜单 Menu、SubMenu、Item 组件、路由 prop 传递权限拼装；页面级 provider、组件级 consumer；</li>\n<li>面包屑 tab 导航生成，利用 redux redux-thunk 和 router，生成已打开菜单组，删除，右键批量操作更新相应的 redux 中 action -&gt; reducer -&gt; state。</li>\n</ol>\n</li>\n<li><p>OA 业务系统 H5、hbiryd 端开发 （vue + vuex + vux + babel-polyfill 垫片+pxtorem）- 移动端 OA</p>\n<ol>\n<li>大数据量优化 - 虚拟列表优化；</li>\n<li>员工地图定位、签到拍照打卡，基于高德地图 api 定位，定位准确率 97%；签到工作流缓存策略；</li>\n<li>拍照上传压缩优化进度展示；压缩之后比例 500kb 之内；</li>\n</ol>\n</li>\n<li><p>其它业务线专题页、h5 开发 （react + redux + antd + webpack + MPA）</p>\n<ol>\n<li>专题页 采取 MPA 方式即多入口页面开发，router 自动生成，依据 require.context 扫描目录生成 routes 表，主要是因为各个页面不相互关联，故采取这种 2B 方式开发；</li>\n<li>页面 store 采取动态注入方式，主要通过的 getComponent, combineReducer Api；</li>\n<li>做过的功能，如做题，题目解析，分析报告图表 echart；活动下单存储策略；多个块滚动吸附吸顶；</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><code>杭州粉团网络公司</code> 2012.4 - 2016.5</p>\n</blockquote>\n<p>前端工程师(前端 leader) 浙江~杭州</p>\n<p>负责借贷后台系统的前端设计及优化，借贷 H5、hbiryd 端开发，系统优化；</p>\n<p>技术栈：react + redux + antd（PC）、jquery + html5(H5、hybrid 端)</p>\n<h2 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h2><ul>\n<li></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"技术方向-Front-End-Developer-—-Full-Stack-Developer\"><a href=\"#技术方向-Front-End-Developer-—-Full-Stack-Developer\" class=\"headerlink\" title=\"技术方向: Front End Developer —&gt; Full Stack Developer\"></a>技术方向: Front End Developer —&gt; Full Stack Developer</h1><h2 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h2><p>性别：男 出生地：江西·上饶 生日：1989.01</p>\n<p>电子邮箱：<a href=\"mailto:&#x63;&#111;&#x64;&#99;&#101;&#114;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x63;&#111;&#x64;&#99;&#101;&#114;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a> | <a href=\"mailto:&#50;&#57;&#54;&#57;&#50;&#x30;&#54;&#x39;&#x33;&#50;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;\">&#50;&#57;&#54;&#57;&#50;&#x30;&#54;&#x39;&#x33;&#50;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a></p>\n<p>毕业院校：南昌理工 2008.09-2012.07 专业：计算机科学与技术</p>\n<p>所在地: 厦门</p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li>熟悉 HTML5、CSS、JavaScript、TypeScript、Ajax、PWA、性能优化、模块化、node、自动化、gulp、i18n、前端规范（eslint+pritter+husky+changelog+git cz） 等相关 web 前端技术；</li>\n<li>熟悉常用的 UI 框架（element-ui、antd、antm、cube-ui、vux）等其它 ui 框架的使用；</li>\n<li>熟悉浏览器、H5 兼容性，bug 分析、定位，编写底层封装、webpack 插件来提升打包、性能及体验等；</li>\n<li>熟练使用 webpack 搭建开发 H5(各种适配方案)、PC 端、Hybird、SPA、MPA 等自定环境；</li>\n<li>熟练 MVC、发布-订阅等设计模式、主流技术栈全家桶完成开发；</li>\n<li>熟练 MVVM 框架开发（VUE、React）及生态（vuex、saga、redux、redux-thunk）运用等；</li>\n<li>发布 npm：v-vuex【vuex model 化】、postcss-pxtovw-includes【针对特定目录转 vw】、hijacking-webpack-plugin【防 DNS 劫持】;j 具体见本人 github（ju<a href=\"http://github.com/codcer%EF%BC%89\">http://github.com/codcer）</a>;</li>\n<li>对性能优化，前端全栈方案的持续探究等。（长任务-time-slice，请求过度-axios-cancelToken，微前端服务-simple-spa-可落地）。</li>\n</ul>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><blockquote>\n<p><code>神州优车</code> 2019.7 - 至今</p>\n</blockquote>\n<p>前端工程师 福建~厦门</p>\n<p>负责买买车业务系统的前端设计及改进，并参与后管系统、车主还款 H5 端、hbiryd 开发；</p>\n<p>负责系统优化，如打包，缓存，垫片等策略方面；</p>\n<p>带新人；</p>\n<p>负责前端埋点监控系统研发，技术基建开发。（个人发起）【开发中】</p>\n<p>技术栈：vue + vuex + elementUI + cube-ui + webpack + 垫片（主要用于 H5 端）</p>\n<p>主要负责：</p>\n<ul>\n<li><p>后管系统（vue + vuex + elementUI + webpack）</p>\n<ol>\n<li>底层封装：axios 拦截器配置，全局防重复请求，主要利用 axios.cancelToken 生成对应 cancel 方法，利用 hash（req.url + 参数哈希 + method）标记唯一性，队列中存在相同的请求，后入队列请求 cancel，请求结束移除对应的请求；</li>\n<li>组件取消请求 mixin：通过钩子 created、beforeDestroy2 个钩子，在 created 生成 cancel，在 beforeDestroy 执行 cancel；</li>\n<li>无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据，和 elementUI 菜单组件、路由传递权限拼装；页面级 provide、组件级 inject；</li>\n<li>tab 导航生成，利用 v-vuex、vuex 全局和 router，生成已打开菜单组，删除，右键批量操作更新相应的 vuex 中 mutaion、action;</li>\n<li>封装动态表单及动态校验；</li>\n</ol>\n</li>\n<li><p>车主还款 h5 端 + hybrid 端（ios、安卓）（vue + vuex + cube-ui + webpack + 垫片 + PWA + pxtovw）</p>\n<ol>\n<li>封装一套代码适用 h5、hybrid 端，jsbridge 封装（js 桥、数据加密、解密封装）、动态惰性切换请求模式；</li>\n<li>三方支付（支付宝、银联、云闪付、微信）app 和 h5 端对接；</li>\n<li>为了解决产品要求一致性，重写键盘界面 + 相对复杂的交互；</li>\n<li>垫片采取 core-js 按需导入方式解决浏览器 api 不兼容问题；</li>\n<li>PWA 策略：静态资源通过缓存优先，接口资源通过网络优先策略；online、offline 提醒；添加桌面应用；</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><code>杭州铭师堂教育有限公司</code> 2016.5 - 2019.7</p>\n</blockquote>\n<p>前端工程师(业务负责人) 浙江~杭州</p>\n<p>负责 OA 业务系统的前端设计及优化，OA 业务系统 H5、hbiryd 端开发；</p>\n<p>负责系统优化，如打包，缓存，垫片等策略方面；</p>\n<p>参与其它业务线专题、h5 开发；</p>\n<p>技术栈：react + redux + antd（PC）｜ antm（h5）、vue + vuex + vux + babel-polyfill 垫片（H5、hybrid 端）</p>\n<p>主要负责：</p>\n<ul>\n<li><p>后管系统（react + redux + antd + webpack + i18n）- PC 端 OA</p>\n<ol>\n<li>组件、页面取消请求 高阶组件：通过钩子 constructor、componentWillUnmount、render 个钩子，在 constructor 生成 cancel，在 componentWillUnmount 执行 cancel, 在 render 返回高阶组件的属性代理；</li>\n<li>无限级菜单生成 + 权限数据绑定：利用 api 返回菜单和权限数据， 菜单 Menu、SubMenu、Item 组件、路由 prop 传递权限拼装；页面级 provider、组件级 consumer；</li>\n<li>面包屑 tab 导航生成，利用 redux redux-thunk 和 router，生成已打开菜单组，删除，右键批量操作更新相应的 redux 中 action -&gt; reducer -&gt; state。</li>\n</ol>\n</li>\n<li><p>OA 业务系统 H5、hbiryd 端开发 （vue + vuex + vux + babel-polyfill 垫片+pxtorem）- 移动端 OA</p>\n<ol>\n<li>大数据量优化 - 虚拟列表优化；</li>\n<li>员工地图定位、签到拍照打卡，基于高德地图 api 定位，定位准确率 97%；签到工作流缓存策略；</li>\n<li>拍照上传压缩优化进度展示；压缩之后比例 500kb 之内；</li>\n</ol>\n</li>\n<li><p>其它业务线专题页、h5 开发 （react + redux + antd + webpack + MPA）</p>\n<ol>\n<li>专题页 采取 MPA 方式即多入口页面开发，router 自动生成，依据 require.context 扫描目录生成 routes 表，主要是因为各个页面不相互关联，故采取这种 2B 方式开发；</li>\n<li>页面 store 采取动态注入方式，主要通过的 getComponent, combineReducer Api；</li>\n<li>做过的功能，如做题，题目解析，分析报告图表 echart；活动下单存储策略；多个块滚动吸附吸顶；</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><code>杭州粉团网络公司</code> 2012.4 - 2016.5</p>\n</blockquote>\n<p>前端工程师(前端 leader) 浙江~杭州</p>\n<p>负责借贷后台系统的前端设计及优化，借贷 H5、hbiryd 端开发，系统优化；</p>\n<p>技术栈：react + redux + antd（PC）、jquery + html5(H5、hybrid 端)</p>\n<h2 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h2><ul>\n<li></li>\n</ul>\n"}],"Post":[{"title":"持续集成 - 代码质量扫描","slug":"CICD/持续集成 - 代码质量扫描篇","date":"2024-09-15T07:15:00.000Z","keywords":"Gitlab,CI,持续集成","_content":"\n为了方便管理公司的代码质量,让代码质量扫描跟持续集成结合到一起是重要的一步.\n目前公司比较年轻,但是在短短的一年时间里,也有了接近300个前端项目.\n\n这么多的前端项目,我们如何保证代码质量就成了一个很重要的事情.\n\n代码项目太多,codereview是必要的.但是人肉codereview不能保证效率.\n因为个人水平的差距,与公司规范的熟悉程度.不能保证所有项目的规范一致性.\n还有一些潜在的bug也有可能会被漏掉.\n\n我们公司是基于Gitlab CI/CD,所以以下说明是基于Gitlab的方式.但是思路的运用是相通的,有需要的人可以借鉴思路.\n\n\n\n## 修改.gitlab-ci.yml\n为了方便每一个项目接入,我们对配置做了很小的改动.\n并且每一个项目的配置的修改都是一样的,就是为了方便无脑的复制粘贴.\n\n我们还做了一个cli工具,里面包含代码扫描的一切功能.安装在runner的机器上.\n\n```yaml\nimage: node:11.10.0\n\nstages:\n  - codereview # 添加一个codereview的stage\n\ncodereview:\n  stage: codereview\n  script:\n    - cli codereview # cli工具触发codereview\n  tags:\n    - fe #runner的tag,根据自己的情况自行修改\n```\n\n\n# cli 触发代码扫描做什么?\n\n## 执行SonarQube扫描\n\n> 关于SonarQube的安装,网上有很多教程请自行搜索.\n\n1. 在执行runner的机器上安装 `sonar-scanner`\n\n```bash\nnpm i sonar-scanner -g\n```\n\n2. 利用自研的cli工具,在项目根目录生成sonar 扫描的配置文件.\n\n```js\n\n// 获取gitlab 注入ci的环境变量\nconst {\n  CI_PROJECT_NAME,\n  CI_PROJECT_ID,\n} = process.env;\n\n// 基于gitlab的项目id生成一个sonar的projectKey\nconst projectBuffer = Buffer.from('sonar' + CI_PROJECT_ID);\nconst projectKey = projectBuffer.toString('hex');\n\n// 检测代码目录\n// 一般来说 src都是前端项目业务代码的目录\n//因为公司的nodejs项目是基于egg框架的,也有可能是app\nconst existsSrc = fs.existsSync(`${process.cwd()}/src/`);\n\n\n\n// sonar配置文件模板\nconst sonarProject = `\nsonar.projectKey=${projectKey} \n\nsonar.projectName=${CI_PROJECT_NAME}\n\nsonar.projectVersion=1.0\n\nsonar.sources=${existsSrc ? 'src' : 'app'}\n\nsonar.binaries=bin\n\nsonar.host.url=http://xxx.你部署sonar的服务地址.com \n\nsonar.login=admin\n\nsonar.password=admin\n\nsonar.sourceEncoding=UTF-8\n`;\n    // 生成一个路径\n    const sPath = path.resolve(process.cwd(), 'sonar-project.properties');\n\n    // 写入sonar的配置\n    fs.writeFileSync(sPath, sonarProject);\n\n    // 执行sonar的代码扫描,并且上传代码质量报告\n    shelljs.exec('sonar-scanner');\n```\n\n\n## 执行jscpd分析代码重复率\n尽管sonar已经提供了代码重复率的报告,但是并不是很容易看懂,到底代码哪里重复.\n我们使用jscpd来分析项目的重复率.并且输出友好的报告.\n\n\n1. 安装jscpd\n\n```bash\nnpm install jscpd -g\n```\n\n\n2. 利用自研的cli工具,触发jscpd扫描项目\n\n```js\n// 检测代码目录\n// 一般来说 src都是前端项目业务代码的目录\n//因为公司的nodejs项目是基于egg框架的,也有可能是app\nconst existsSrc = fs.existsSync(`${process.cwd()}/src/`);\n\n\n// 最后会在根目录输出两个东西\n// 一个是页面报告\n// 一个是json数据\n// 怎么用,就看你自己了\n    if (existsSrc) {\n      shelljs.exec('jscpd -r html ./src/');\n      shelljs.exec('jscpd -r json ./src/');\n    } else {\n      shelljs.exec('jscpd -r html ./app/');\n      shelljs.exec('jscpd -r json ./app/');\n    }\n```\n最后将页面报告部署到静态服务器,拿到页面地址后用企业聊天工具推送到指定的人跟群就好了.\n\n\n## 尾巴\n\n我这里只提供大概的思路,这两个工具还有很多玩法,这里就不过多介绍了.有兴趣的朋友可以自行搜索.\n\n今天就到这里\n\n","source":"_posts/CICD/持续集成 - 代码质量扫描篇.md","raw":"---\ntitle: 持续集成 - 代码质量扫描\nslug: t0uky1fwdy\ndate: 2024-09-15 15:15:00\nkeywords: Gitlab,CI,持续集成\ntags: [持续集成]\n---\n\n为了方便管理公司的代码质量,让代码质量扫描跟持续集成结合到一起是重要的一步.\n目前公司比较年轻,但是在短短的一年时间里,也有了接近300个前端项目.\n\n这么多的前端项目,我们如何保证代码质量就成了一个很重要的事情.\n\n代码项目太多,codereview是必要的.但是人肉codereview不能保证效率.\n因为个人水平的差距,与公司规范的熟悉程度.不能保证所有项目的规范一致性.\n还有一些潜在的bug也有可能会被漏掉.\n\n我们公司是基于Gitlab CI/CD,所以以下说明是基于Gitlab的方式.但是思路的运用是相通的,有需要的人可以借鉴思路.\n\n\n\n## 修改.gitlab-ci.yml\n为了方便每一个项目接入,我们对配置做了很小的改动.\n并且每一个项目的配置的修改都是一样的,就是为了方便无脑的复制粘贴.\n\n我们还做了一个cli工具,里面包含代码扫描的一切功能.安装在runner的机器上.\n\n```yaml\nimage: node:11.10.0\n\nstages:\n  - codereview # 添加一个codereview的stage\n\ncodereview:\n  stage: codereview\n  script:\n    - cli codereview # cli工具触发codereview\n  tags:\n    - fe #runner的tag,根据自己的情况自行修改\n```\n\n\n# cli 触发代码扫描做什么?\n\n## 执行SonarQube扫描\n\n> 关于SonarQube的安装,网上有很多教程请自行搜索.\n\n1. 在执行runner的机器上安装 `sonar-scanner`\n\n```bash\nnpm i sonar-scanner -g\n```\n\n2. 利用自研的cli工具,在项目根目录生成sonar 扫描的配置文件.\n\n```js\n\n// 获取gitlab 注入ci的环境变量\nconst {\n  CI_PROJECT_NAME,\n  CI_PROJECT_ID,\n} = process.env;\n\n// 基于gitlab的项目id生成一个sonar的projectKey\nconst projectBuffer = Buffer.from('sonar' + CI_PROJECT_ID);\nconst projectKey = projectBuffer.toString('hex');\n\n// 检测代码目录\n// 一般来说 src都是前端项目业务代码的目录\n//因为公司的nodejs项目是基于egg框架的,也有可能是app\nconst existsSrc = fs.existsSync(`${process.cwd()}/src/`);\n\n\n\n// sonar配置文件模板\nconst sonarProject = `\nsonar.projectKey=${projectKey} \n\nsonar.projectName=${CI_PROJECT_NAME}\n\nsonar.projectVersion=1.0\n\nsonar.sources=${existsSrc ? 'src' : 'app'}\n\nsonar.binaries=bin\n\nsonar.host.url=http://xxx.你部署sonar的服务地址.com \n\nsonar.login=admin\n\nsonar.password=admin\n\nsonar.sourceEncoding=UTF-8\n`;\n    // 生成一个路径\n    const sPath = path.resolve(process.cwd(), 'sonar-project.properties');\n\n    // 写入sonar的配置\n    fs.writeFileSync(sPath, sonarProject);\n\n    // 执行sonar的代码扫描,并且上传代码质量报告\n    shelljs.exec('sonar-scanner');\n```\n\n\n## 执行jscpd分析代码重复率\n尽管sonar已经提供了代码重复率的报告,但是并不是很容易看懂,到底代码哪里重复.\n我们使用jscpd来分析项目的重复率.并且输出友好的报告.\n\n\n1. 安装jscpd\n\n```bash\nnpm install jscpd -g\n```\n\n\n2. 利用自研的cli工具,触发jscpd扫描项目\n\n```js\n// 检测代码目录\n// 一般来说 src都是前端项目业务代码的目录\n//因为公司的nodejs项目是基于egg框架的,也有可能是app\nconst existsSrc = fs.existsSync(`${process.cwd()}/src/`);\n\n\n// 最后会在根目录输出两个东西\n// 一个是页面报告\n// 一个是json数据\n// 怎么用,就看你自己了\n    if (existsSrc) {\n      shelljs.exec('jscpd -r html ./src/');\n      shelljs.exec('jscpd -r json ./src/');\n    } else {\n      shelljs.exec('jscpd -r html ./app/');\n      shelljs.exec('jscpd -r json ./app/');\n    }\n```\n最后将页面报告部署到静态服务器,拿到页面地址后用企业聊天工具推送到指定的人跟群就好了.\n\n\n## 尾巴\n\n我这里只提供大概的思路,这两个工具还有很多玩法,这里就不过多介绍了.有兴趣的朋友可以自行搜索.\n\n今天就到这里\n\n","published":1,"updated":"2024-10-09T08:17:31.688Z","_id":"cm215vers00007k9kasrshvzx","comments":1,"layout":"post","photos":[],"content":"<p>为了方便管理公司的代码质量,让代码质量扫描跟持续集成结合到一起是重要的一步.<br>目前公司比较年轻,但是在短短的一年时间里,也有了接近300个前端项目.</p>\n<p>这么多的前端项目,我们如何保证代码质量就成了一个很重要的事情.</p>\n<p>代码项目太多,codereview是必要的.但是人肉codereview不能保证效率.<br>因为个人水平的差距,与公司规范的熟悉程度.不能保证所有项目的规范一致性.<br>还有一些潜在的bug也有可能会被漏掉.</p>\n<p>我们公司是基于Gitlab CI&#x2F;CD,所以以下说明是基于Gitlab的方式.但是思路的运用是相通的,有需要的人可以借鉴思路.</p>\n<h2 id=\"修改-gitlab-ci-yml\"><a href=\"#修改-gitlab-ci-yml\" class=\"headerlink\" title=\"修改.gitlab-ci.yml\"></a>修改.gitlab-ci.yml</h2><p>为了方便每一个项目接入,我们对配置做了很小的改动.<br>并且每一个项目的配置的修改都是一样的,就是为了方便无脑的复制粘贴.</p>\n<p>我们还做了一个cli工具,里面包含代码扫描的一切功能.安装在runner的机器上.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">node:11.10.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">codereview</span> <span class=\"comment\"># 添加一个codereview的stage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">codereview:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">codereview</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cli</span> <span class=\"string\">codereview</span> <span class=\"comment\"># cli工具触发codereview</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span> <span class=\"comment\">#runner的tag,根据自己的情况自行修改</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"cli-触发代码扫描做什么\"><a href=\"#cli-触发代码扫描做什么\" class=\"headerlink\" title=\"cli 触发代码扫描做什么?\"></a>cli 触发代码扫描做什么?</h1><h2 id=\"执行SonarQube扫描\"><a href=\"#执行SonarQube扫描\" class=\"headerlink\" title=\"执行SonarQube扫描\"></a>执行SonarQube扫描</h2><blockquote>\n<p>关于SonarQube的安装,网上有很多教程请自行搜索.</p>\n</blockquote>\n<ol>\n<li>在执行runner的机器上安装 <code>sonar-scanner</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sonar-scanner -g</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>利用自研的cli工具,在项目根目录生成sonar 扫描的配置文件.</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取gitlab 注入ci的环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">CI_PROJECT_NAME</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">CI_PROJECT_ID</span>,</span><br><span class=\"line\">&#125; = process.<span class=\"property\">env</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基于gitlab的项目id生成一个sonar的projectKey</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> projectBuffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&#x27;sonar&#x27;</span> + <span class=\"variable constant_\">CI_PROJECT_ID</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> projectKey = projectBuffer.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测代码目录</span></span><br><span class=\"line\"><span class=\"comment\">// 一般来说 src都是前端项目业务代码的目录</span></span><br><span class=\"line\"><span class=\"comment\">//因为公司的nodejs项目是基于egg框架的,也有可能是app</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> existsSrc = fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`<span class=\"subst\">$&#123;process.cwd()&#125;</span>/src/`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sonar配置文件模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sonarProject = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">sonar.projectKey=<span class=\"subst\">$&#123;projectKey&#125;</span> </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.projectName=<span class=\"subst\">$&#123;CI_PROJECT_NAME&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.projectVersion=1.0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.sources=<span class=\"subst\">$&#123;existsSrc ? <span class=\"string\">&#x27;src&#x27;</span> : <span class=\"string\">&#x27;app&#x27;</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.binaries=bin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.host.url=http://xxx.你部署sonar的服务地址.com </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.login=admin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.password=admin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.sourceEncoding=UTF-8</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生成一个路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sPath = path.<span class=\"title function_\">resolve</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&#x27;sonar-project.properties&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 写入sonar的配置</span></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(sPath, sonarProject);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行sonar的代码扫描,并且上传代码质量报告</span></span><br><span class=\"line\">    shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;sonar-scanner&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"执行jscpd分析代码重复率\"><a href=\"#执行jscpd分析代码重复率\" class=\"headerlink\" title=\"执行jscpd分析代码重复率\"></a>执行jscpd分析代码重复率</h2><p>尽管sonar已经提供了代码重复率的报告,但是并不是很容易看懂,到底代码哪里重复.<br>我们使用jscpd来分析项目的重复率.并且输出友好的报告.</p>\n<ol>\n<li>安装jscpd</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jscpd -g</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>利用自研的cli工具,触发jscpd扫描项目</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测代码目录</span></span><br><span class=\"line\"><span class=\"comment\">// 一般来说 src都是前端项目业务代码的目录</span></span><br><span class=\"line\"><span class=\"comment\">//因为公司的nodejs项目是基于egg框架的,也有可能是app</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> existsSrc = fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`<span class=\"subst\">$&#123;process.cwd()&#125;</span>/src/`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后会在根目录输出两个东西</span></span><br><span class=\"line\"><span class=\"comment\">// 一个是页面报告</span></span><br><span class=\"line\"><span class=\"comment\">// 一个是json数据</span></span><br><span class=\"line\"><span class=\"comment\">// 怎么用,就看你自己了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existsSrc) &#123;</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r html ./src/&#x27;</span>);</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r json ./src/&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r html ./app/&#x27;</span>);</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r json ./app/&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将页面报告部署到静态服务器,拿到页面地址后用企业聊天工具推送到指定的人跟群就好了.</p>\n<h2 id=\"尾巴\"><a href=\"#尾巴\" class=\"headerlink\" title=\"尾巴\"></a>尾巴</h2><p>我这里只提供大概的思路,这两个工具还有很多玩法,这里就不过多介绍了.有兴趣的朋友可以自行搜索.</p>\n<p>今天就到这里</p>\n","excerpt":"","more":"<p>为了方便管理公司的代码质量,让代码质量扫描跟持续集成结合到一起是重要的一步.<br>目前公司比较年轻,但是在短短的一年时间里,也有了接近300个前端项目.</p>\n<p>这么多的前端项目,我们如何保证代码质量就成了一个很重要的事情.</p>\n<p>代码项目太多,codereview是必要的.但是人肉codereview不能保证效率.<br>因为个人水平的差距,与公司规范的熟悉程度.不能保证所有项目的规范一致性.<br>还有一些潜在的bug也有可能会被漏掉.</p>\n<p>我们公司是基于Gitlab CI&#x2F;CD,所以以下说明是基于Gitlab的方式.但是思路的运用是相通的,有需要的人可以借鉴思路.</p>\n<h2 id=\"修改-gitlab-ci-yml\"><a href=\"#修改-gitlab-ci-yml\" class=\"headerlink\" title=\"修改.gitlab-ci.yml\"></a>修改.gitlab-ci.yml</h2><p>为了方便每一个项目接入,我们对配置做了很小的改动.<br>并且每一个项目的配置的修改都是一样的,就是为了方便无脑的复制粘贴.</p>\n<p>我们还做了一个cli工具,里面包含代码扫描的一切功能.安装在runner的机器上.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">node:11.10.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">codereview</span> <span class=\"comment\"># 添加一个codereview的stage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">codereview:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">codereview</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cli</span> <span class=\"string\">codereview</span> <span class=\"comment\"># cli工具触发codereview</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span> <span class=\"comment\">#runner的tag,根据自己的情况自行修改</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"cli-触发代码扫描做什么\"><a href=\"#cli-触发代码扫描做什么\" class=\"headerlink\" title=\"cli 触发代码扫描做什么?\"></a>cli 触发代码扫描做什么?</h1><h2 id=\"执行SonarQube扫描\"><a href=\"#执行SonarQube扫描\" class=\"headerlink\" title=\"执行SonarQube扫描\"></a>执行SonarQube扫描</h2><blockquote>\n<p>关于SonarQube的安装,网上有很多教程请自行搜索.</p>\n</blockquote>\n<ol>\n<li>在执行runner的机器上安装 <code>sonar-scanner</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sonar-scanner -g</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>利用自研的cli工具,在项目根目录生成sonar 扫描的配置文件.</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取gitlab 注入ci的环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">CI_PROJECT_NAME</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">CI_PROJECT_ID</span>,</span><br><span class=\"line\">&#125; = process.<span class=\"property\">env</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基于gitlab的项目id生成一个sonar的projectKey</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> projectBuffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&#x27;sonar&#x27;</span> + <span class=\"variable constant_\">CI_PROJECT_ID</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> projectKey = projectBuffer.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测代码目录</span></span><br><span class=\"line\"><span class=\"comment\">// 一般来说 src都是前端项目业务代码的目录</span></span><br><span class=\"line\"><span class=\"comment\">//因为公司的nodejs项目是基于egg框架的,也有可能是app</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> existsSrc = fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`<span class=\"subst\">$&#123;process.cwd()&#125;</span>/src/`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sonar配置文件模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sonarProject = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">sonar.projectKey=<span class=\"subst\">$&#123;projectKey&#125;</span> </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.projectName=<span class=\"subst\">$&#123;CI_PROJECT_NAME&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.projectVersion=1.0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.sources=<span class=\"subst\">$&#123;existsSrc ? <span class=\"string\">&#x27;src&#x27;</span> : <span class=\"string\">&#x27;app&#x27;</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.binaries=bin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.host.url=http://xxx.你部署sonar的服务地址.com </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.login=admin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.password=admin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sonar.sourceEncoding=UTF-8</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生成一个路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sPath = path.<span class=\"title function_\">resolve</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&#x27;sonar-project.properties&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 写入sonar的配置</span></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(sPath, sonarProject);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行sonar的代码扫描,并且上传代码质量报告</span></span><br><span class=\"line\">    shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;sonar-scanner&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"执行jscpd分析代码重复率\"><a href=\"#执行jscpd分析代码重复率\" class=\"headerlink\" title=\"执行jscpd分析代码重复率\"></a>执行jscpd分析代码重复率</h2><p>尽管sonar已经提供了代码重复率的报告,但是并不是很容易看懂,到底代码哪里重复.<br>我们使用jscpd来分析项目的重复率.并且输出友好的报告.</p>\n<ol>\n<li>安装jscpd</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jscpd -g</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>利用自研的cli工具,触发jscpd扫描项目</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测代码目录</span></span><br><span class=\"line\"><span class=\"comment\">// 一般来说 src都是前端项目业务代码的目录</span></span><br><span class=\"line\"><span class=\"comment\">//因为公司的nodejs项目是基于egg框架的,也有可能是app</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> existsSrc = fs.<span class=\"title function_\">existsSync</span>(<span class=\"string\">`<span class=\"subst\">$&#123;process.cwd()&#125;</span>/src/`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后会在根目录输出两个东西</span></span><br><span class=\"line\"><span class=\"comment\">// 一个是页面报告</span></span><br><span class=\"line\"><span class=\"comment\">// 一个是json数据</span></span><br><span class=\"line\"><span class=\"comment\">// 怎么用,就看你自己了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existsSrc) &#123;</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r html ./src/&#x27;</span>);</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r json ./src/&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r html ./app/&#x27;</span>);</span><br><span class=\"line\">      shelljs.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;jscpd -r json ./app/&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将页面报告部署到静态服务器,拿到页面地址后用企业聊天工具推送到指定的人跟群就好了.</p>\n<h2 id=\"尾巴\"><a href=\"#尾巴\" class=\"headerlink\" title=\"尾巴\"></a>尾巴</h2><p>我这里只提供大概的思路,这两个工具还有很多玩法,这里就不过多介绍了.有兴趣的朋友可以自行搜索.</p>\n<p>今天就到这里</p>\n"},{"title":"持续集成 - 使用Gilab CI进行前端项目的持续集成","slug":"CICD/持续集成 - 使用Gilab CI构建你的前端项目","date":"2024-09-15T07:18:00.000Z","keywords":"Gitlab,CI,持续集成","_content":"\n\n市面上的持续集成平台有很多,今天介绍Gitlab的CI.\n\n从Gitlab 8.0开始,Gitlab CI 就集成在了Gitlab中.\n\n使用方法非常简单,只要我们在项目的根目录创建一个 `.gitlab-ci.yml`文件,添加一个Runner,就直接接入了Gitlab CI.\n\n接入方式非常的简单便捷.目前我们在前端脚手架中放一个`.gitlab-ci.yml`文件,后续每一个前端项目都可以按照标准直接接入Gitlab CI.\n\n\n\n# GitLab Runner\n\n所有的Gitlab任务都会放在Gitlab Runner中执行. \n\nGitLab Runner的安装环境,根据你的需求而定,一个gitlab 可以注册的Runner是没有限制的.\n\n普通的前端项目直接安装在Linux中就可以了,如果是小程序或者RN这种项目,目前我是直接找了一台mac mini来安装Runner.\n\n\n\n## GitLab Runner安装\n\n安装Runner 非常简单, 这里晒出Gitlab的官方安装教程,你可以根据你的系统环境自行下载.\n\n[安装Gitlab Runner 官方文档](https://docs.gitlab.com/runner/install/)\n\n\n## 注册Runner\n\nRunner安装好之后,想要关联到你的Gitlab,需要注册Runner.\n\n这里给大家介绍群组的runner注册方式,个人项目的runner方式注册基本一致\n\n[注册Gitlab Runner 官方文档](https://docs.gitlab.com/runner/register/)\n\n大致流程为:\n\n1. 打开Gitlab网站,选择群组-> 设置-> CI/CD -> 展开Runner -> 你会看到注册Runner的Token与Url\n2. 安装好Runner的机器上,运行 `sudo gitlab-runner register`\n3. 输入 你Gitlab的 URL\n4. 输入 Token\n5. 输入 Runner 的名字\n6. 选择 Runner 的类型,没有特殊需求直接选shell\n7. 完成\n\n## 配置Runner\n\nRunner的配置文件会以执行的用户身份不同而不同\n\n1. 当GitLab Runner以root身份执行时 `/etc/gitlab-runner/config.toml`\n2. 当GitLab Runner以非root身份执行时 `~/.gitlab-runner/config.toml`\n\n### Runner的全局配置\n\n这里我只说关键的两点\n\n1. `concurrent` 配置会限制整个GitLab Runner能并发处理job的数量,如果你发现你的runner当前时间全局只能执行一个job的时候,\n可以检查concurrent是否默认配置为1.不然多个job同一时段并发的时候,会造成job排队的现象.\n\n2. `check_interval` 的配置为多久runner回去gitlab检查是否有job,默认实践为3秒.\n\n[Runner 的高级配置 官方文档](https://docs.gitlab.com/runner/configuration/advanced-configuration.html)\n\n\n\n## .gitlab-ci.yml\n在项目下创建一个 `.gitlab-ci.yml` ,上传代码到gitlab,便可以根据`.gitlab-ci.yml`的描述执行任务\n下面给一个非常简单的前端静态页面构建与部署的demo\n\n```yaml\nimage: node:last\n\n# job切换的时候,会清空git忽略的文件,一般dist目录会被忽略\n# 但是job切换的时候,又需要保存dist,所以要配置dist的缓存\ncache:\n  paths:\n  - dist/\n\n# ci 运行步骤\nstages:\n  - build\n  - deploy\n\n\n# 构建\nbuild:\n  stage: build\n  script: \n    - echo \"Building the app\"\n    - crgt install\n    - rm -rf ./dist\n    - npm run build\n  tags:\n    - fe\n\n# develop系列分支变动会触发测试环境的部署\ndeploy_test:\n  stage: deploy\n  script:\n    - echo \"测试环境部署\"\n    - cli upload ./本地目录 /线上目录\n  only:\n    # develop/* 分支变动后,会触发该stage\n    - /^develop\\/*/\n  tags:\n    - fe\n\n# 当代码合并到master会触发 生产环境部署\ndeploy_production:\n  stage: deploy\n  script:\n    - echo \"Deploy to staging server\"\n    - cli upload ./本地目录  /线上目录\n  only:\n    - master\n  tags:\n    - fe\n\n```\n\n\n\n\n\n\n\n\n","source":"_posts/CICD/持续集成 - 使用Gilab CI构建你的前端项目.md","raw":"---\ntitle: 持续集成 - 使用Gilab CI进行前端项目的持续集成\nslug: tisoqlkd0qa\ndate: 2024-09-15 15:18:00\nkeywords: Gitlab,CI,持续集成\ntags: [持续集成]\n---\n\n\n市面上的持续集成平台有很多,今天介绍Gitlab的CI.\n\n从Gitlab 8.0开始,Gitlab CI 就集成在了Gitlab中.\n\n使用方法非常简单,只要我们在项目的根目录创建一个 `.gitlab-ci.yml`文件,添加一个Runner,就直接接入了Gitlab CI.\n\n接入方式非常的简单便捷.目前我们在前端脚手架中放一个`.gitlab-ci.yml`文件,后续每一个前端项目都可以按照标准直接接入Gitlab CI.\n\n\n\n# GitLab Runner\n\n所有的Gitlab任务都会放在Gitlab Runner中执行. \n\nGitLab Runner的安装环境,根据你的需求而定,一个gitlab 可以注册的Runner是没有限制的.\n\n普通的前端项目直接安装在Linux中就可以了,如果是小程序或者RN这种项目,目前我是直接找了一台mac mini来安装Runner.\n\n\n\n## GitLab Runner安装\n\n安装Runner 非常简单, 这里晒出Gitlab的官方安装教程,你可以根据你的系统环境自行下载.\n\n[安装Gitlab Runner 官方文档](https://docs.gitlab.com/runner/install/)\n\n\n## 注册Runner\n\nRunner安装好之后,想要关联到你的Gitlab,需要注册Runner.\n\n这里给大家介绍群组的runner注册方式,个人项目的runner方式注册基本一致\n\n[注册Gitlab Runner 官方文档](https://docs.gitlab.com/runner/register/)\n\n大致流程为:\n\n1. 打开Gitlab网站,选择群组-> 设置-> CI/CD -> 展开Runner -> 你会看到注册Runner的Token与Url\n2. 安装好Runner的机器上,运行 `sudo gitlab-runner register`\n3. 输入 你Gitlab的 URL\n4. 输入 Token\n5. 输入 Runner 的名字\n6. 选择 Runner 的类型,没有特殊需求直接选shell\n7. 完成\n\n## 配置Runner\n\nRunner的配置文件会以执行的用户身份不同而不同\n\n1. 当GitLab Runner以root身份执行时 `/etc/gitlab-runner/config.toml`\n2. 当GitLab Runner以非root身份执行时 `~/.gitlab-runner/config.toml`\n\n### Runner的全局配置\n\n这里我只说关键的两点\n\n1. `concurrent` 配置会限制整个GitLab Runner能并发处理job的数量,如果你发现你的runner当前时间全局只能执行一个job的时候,\n可以检查concurrent是否默认配置为1.不然多个job同一时段并发的时候,会造成job排队的现象.\n\n2. `check_interval` 的配置为多久runner回去gitlab检查是否有job,默认实践为3秒.\n\n[Runner 的高级配置 官方文档](https://docs.gitlab.com/runner/configuration/advanced-configuration.html)\n\n\n\n## .gitlab-ci.yml\n在项目下创建一个 `.gitlab-ci.yml` ,上传代码到gitlab,便可以根据`.gitlab-ci.yml`的描述执行任务\n下面给一个非常简单的前端静态页面构建与部署的demo\n\n```yaml\nimage: node:last\n\n# job切换的时候,会清空git忽略的文件,一般dist目录会被忽略\n# 但是job切换的时候,又需要保存dist,所以要配置dist的缓存\ncache:\n  paths:\n  - dist/\n\n# ci 运行步骤\nstages:\n  - build\n  - deploy\n\n\n# 构建\nbuild:\n  stage: build\n  script: \n    - echo \"Building the app\"\n    - crgt install\n    - rm -rf ./dist\n    - npm run build\n  tags:\n    - fe\n\n# develop系列分支变动会触发测试环境的部署\ndeploy_test:\n  stage: deploy\n  script:\n    - echo \"测试环境部署\"\n    - cli upload ./本地目录 /线上目录\n  only:\n    # develop/* 分支变动后,会触发该stage\n    - /^develop\\/*/\n  tags:\n    - fe\n\n# 当代码合并到master会触发 生产环境部署\ndeploy_production:\n  stage: deploy\n  script:\n    - echo \"Deploy to staging server\"\n    - cli upload ./本地目录  /线上目录\n  only:\n    - master\n  tags:\n    - fe\n\n```\n\n\n\n\n\n\n\n\n","published":1,"updated":"2024-10-09T08:17:51.982Z","_id":"cm215veru00017k9kbh6m0ebw","comments":1,"layout":"post","photos":[],"content":"<p>市面上的持续集成平台有很多,今天介绍Gitlab的CI.</p>\n<p>从Gitlab 8.0开始,Gitlab CI 就集成在了Gitlab中.</p>\n<p>使用方法非常简单,只要我们在项目的根目录创建一个 <code>.gitlab-ci.yml</code>文件,添加一个Runner,就直接接入了Gitlab CI.</p>\n<p>接入方式非常的简单便捷.目前我们在前端脚手架中放一个<code>.gitlab-ci.yml</code>文件,后续每一个前端项目都可以按照标准直接接入Gitlab CI.</p>\n<h1 id=\"GitLab-Runner\"><a href=\"#GitLab-Runner\" class=\"headerlink\" title=\"GitLab Runner\"></a>GitLab Runner</h1><p>所有的Gitlab任务都会放在Gitlab Runner中执行. </p>\n<p>GitLab Runner的安装环境,根据你的需求而定,一个gitlab 可以注册的Runner是没有限制的.</p>\n<p>普通的前端项目直接安装在Linux中就可以了,如果是小程序或者RN这种项目,目前我是直接找了一台mac mini来安装Runner.</p>\n<h2 id=\"GitLab-Runner安装\"><a href=\"#GitLab-Runner安装\" class=\"headerlink\" title=\"GitLab Runner安装\"></a>GitLab Runner安装</h2><p>安装Runner 非常简单, 这里晒出Gitlab的官方安装教程,你可以根据你的系统环境自行下载.</p>\n<p><a href=\"https://docs.gitlab.com/runner/install/\">安装Gitlab Runner 官方文档</a></p>\n<h2 id=\"注册Runner\"><a href=\"#注册Runner\" class=\"headerlink\" title=\"注册Runner\"></a>注册Runner</h2><p>Runner安装好之后,想要关联到你的Gitlab,需要注册Runner.</p>\n<p>这里给大家介绍群组的runner注册方式,个人项目的runner方式注册基本一致</p>\n<p><a href=\"https://docs.gitlab.com/runner/register/\">注册Gitlab Runner 官方文档</a></p>\n<p>大致流程为:</p>\n<ol>\n<li>打开Gitlab网站,选择群组-&gt; 设置-&gt; CI&#x2F;CD -&gt; 展开Runner -&gt; 你会看到注册Runner的Token与Url</li>\n<li>安装好Runner的机器上,运行 <code>sudo gitlab-runner register</code></li>\n<li>输入 你Gitlab的 URL</li>\n<li>输入 Token</li>\n<li>输入 Runner 的名字</li>\n<li>选择 Runner 的类型,没有特殊需求直接选shell</li>\n<li>完成</li>\n</ol>\n<h2 id=\"配置Runner\"><a href=\"#配置Runner\" class=\"headerlink\" title=\"配置Runner\"></a>配置Runner</h2><p>Runner的配置文件会以执行的用户身份不同而不同</p>\n<ol>\n<li>当GitLab Runner以root身份执行时 <code>/etc/gitlab-runner/config.toml</code></li>\n<li>当GitLab Runner以非root身份执行时 <code>~/.gitlab-runner/config.toml</code></li>\n</ol>\n<h3 id=\"Runner的全局配置\"><a href=\"#Runner的全局配置\" class=\"headerlink\" title=\"Runner的全局配置\"></a>Runner的全局配置</h3><p>这里我只说关键的两点</p>\n<ol>\n<li><p><code>concurrent</code> 配置会限制整个GitLab Runner能并发处理job的数量,如果你发现你的runner当前时间全局只能执行一个job的时候,<br>可以检查concurrent是否默认配置为1.不然多个job同一时段并发的时候,会造成job排队的现象.</p>\n</li>\n<li><p><code>check_interval</code> 的配置为多久runner回去gitlab检查是否有job,默认实践为3秒.</p>\n</li>\n</ol>\n<p><a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html\">Runner 的高级配置 官方文档</a></p>\n<h2 id=\"gitlab-ci-yml\"><a href=\"#gitlab-ci-yml\" class=\"headerlink\" title=\".gitlab-ci.yml\"></a>.gitlab-ci.yml</h2><p>在项目下创建一个 <code>.gitlab-ci.yml</code> ,上传代码到gitlab,便可以根据<code>.gitlab-ci.yml</code>的描述执行任务<br>下面给一个非常简单的前端静态页面构建与部署的demo</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">node:last</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># job切换的时候,会清空git忽略的文件,一般dist目录会被忽略</span></span><br><span class=\"line\"><span class=\"comment\"># 但是job切换的时候,又需要保存dist,所以要配置dist的缓存</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">dist/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ci 运行步骤</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Building the app&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">crgt</span> <span class=\"string\">install</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">./dist</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># develop系列分支变动会触发测试环境的部署</span></span><br><span class=\"line\"><span class=\"attr\">deploy_test:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;测试环境部署&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cli</span> <span class=\"string\">upload</span> <span class=\"string\">./本地目录</span> <span class=\"string\">/线上目录</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"comment\"># develop/* 分支变动后,会触发该stage</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/^develop\\/*/</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当代码合并到master会触发 生产环境部署</span></span><br><span class=\"line\"><span class=\"attr\">deploy_production:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Deploy to staging server&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cli</span> <span class=\"string\">upload</span> <span class=\"string\">./本地目录</span>  <span class=\"string\">/线上目录</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<p>市面上的持续集成平台有很多,今天介绍Gitlab的CI.</p>\n<p>从Gitlab 8.0开始,Gitlab CI 就集成在了Gitlab中.</p>\n<p>使用方法非常简单,只要我们在项目的根目录创建一个 <code>.gitlab-ci.yml</code>文件,添加一个Runner,就直接接入了Gitlab CI.</p>\n<p>接入方式非常的简单便捷.目前我们在前端脚手架中放一个<code>.gitlab-ci.yml</code>文件,后续每一个前端项目都可以按照标准直接接入Gitlab CI.</p>\n<h1 id=\"GitLab-Runner\"><a href=\"#GitLab-Runner\" class=\"headerlink\" title=\"GitLab Runner\"></a>GitLab Runner</h1><p>所有的Gitlab任务都会放在Gitlab Runner中执行. </p>\n<p>GitLab Runner的安装环境,根据你的需求而定,一个gitlab 可以注册的Runner是没有限制的.</p>\n<p>普通的前端项目直接安装在Linux中就可以了,如果是小程序或者RN这种项目,目前我是直接找了一台mac mini来安装Runner.</p>\n<h2 id=\"GitLab-Runner安装\"><a href=\"#GitLab-Runner安装\" class=\"headerlink\" title=\"GitLab Runner安装\"></a>GitLab Runner安装</h2><p>安装Runner 非常简单, 这里晒出Gitlab的官方安装教程,你可以根据你的系统环境自行下载.</p>\n<p><a href=\"https://docs.gitlab.com/runner/install/\">安装Gitlab Runner 官方文档</a></p>\n<h2 id=\"注册Runner\"><a href=\"#注册Runner\" class=\"headerlink\" title=\"注册Runner\"></a>注册Runner</h2><p>Runner安装好之后,想要关联到你的Gitlab,需要注册Runner.</p>\n<p>这里给大家介绍群组的runner注册方式,个人项目的runner方式注册基本一致</p>\n<p><a href=\"https://docs.gitlab.com/runner/register/\">注册Gitlab Runner 官方文档</a></p>\n<p>大致流程为:</p>\n<ol>\n<li>打开Gitlab网站,选择群组-&gt; 设置-&gt; CI&#x2F;CD -&gt; 展开Runner -&gt; 你会看到注册Runner的Token与Url</li>\n<li>安装好Runner的机器上,运行 <code>sudo gitlab-runner register</code></li>\n<li>输入 你Gitlab的 URL</li>\n<li>输入 Token</li>\n<li>输入 Runner 的名字</li>\n<li>选择 Runner 的类型,没有特殊需求直接选shell</li>\n<li>完成</li>\n</ol>\n<h2 id=\"配置Runner\"><a href=\"#配置Runner\" class=\"headerlink\" title=\"配置Runner\"></a>配置Runner</h2><p>Runner的配置文件会以执行的用户身份不同而不同</p>\n<ol>\n<li>当GitLab Runner以root身份执行时 <code>/etc/gitlab-runner/config.toml</code></li>\n<li>当GitLab Runner以非root身份执行时 <code>~/.gitlab-runner/config.toml</code></li>\n</ol>\n<h3 id=\"Runner的全局配置\"><a href=\"#Runner的全局配置\" class=\"headerlink\" title=\"Runner的全局配置\"></a>Runner的全局配置</h3><p>这里我只说关键的两点</p>\n<ol>\n<li><p><code>concurrent</code> 配置会限制整个GitLab Runner能并发处理job的数量,如果你发现你的runner当前时间全局只能执行一个job的时候,<br>可以检查concurrent是否默认配置为1.不然多个job同一时段并发的时候,会造成job排队的现象.</p>\n</li>\n<li><p><code>check_interval</code> 的配置为多久runner回去gitlab检查是否有job,默认实践为3秒.</p>\n</li>\n</ol>\n<p><a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html\">Runner 的高级配置 官方文档</a></p>\n<h2 id=\"gitlab-ci-yml\"><a href=\"#gitlab-ci-yml\" class=\"headerlink\" title=\".gitlab-ci.yml\"></a>.gitlab-ci.yml</h2><p>在项目下创建一个 <code>.gitlab-ci.yml</code> ,上传代码到gitlab,便可以根据<code>.gitlab-ci.yml</code>的描述执行任务<br>下面给一个非常简单的前端静态页面构建与部署的demo</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">node:last</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># job切换的时候,会清空git忽略的文件,一般dist目录会被忽略</span></span><br><span class=\"line\"><span class=\"comment\"># 但是job切换的时候,又需要保存dist,所以要配置dist的缓存</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">dist/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ci 运行步骤</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Building the app&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">crgt</span> <span class=\"string\">install</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">./dist</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># develop系列分支变动会触发测试环境的部署</span></span><br><span class=\"line\"><span class=\"attr\">deploy_test:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;测试环境部署&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cli</span> <span class=\"string\">upload</span> <span class=\"string\">./本地目录</span> <span class=\"string\">/线上目录</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"comment\"># develop/* 分支变动后,会触发该stage</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/^develop\\/*/</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当代码合并到master会触发 生产环境部署</span></span><br><span class=\"line\"><span class=\"attr\">deploy_production:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Deploy to staging server&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cli</span> <span class=\"string\">upload</span> <span class=\"string\">./本地目录</span>  <span class=\"string\">/线上目录</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">fe</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n"},{"title":"Nginx介绍","abbrlink":"b785e162","date":"2020-06-25T05:40:50.000Z","keywords":"Nginx","_content":"\n### Nginx应用场景\n\n1. 静态资源服务器\n2. 反向代理服务\n3. api接口服务：权限控制， 缓存， 访问数据库 \n\n#### nginx优势\n\n- 高并发高性能\n- **可拓展性好**\n- 高可靠性\n- 热部署\n- 开源许可证\n\n#### nginx架构\n\n1. 清凉\n2. 架构： 采用单线程 ， 多进程和多路io复用模型 （node）\n3. 多路I/O复用\n\n工作流程\n\n![image-20200518090127640](/Users/yueqi/Library/Application Support/typora-user-images/image-20200518090127640.png)\n\n\n\nI/O模式\n\n对于一次IO访问， 数据会掀背拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进行。 所以， 当一次I/O操作发生时， 它会经历两个阶段：\n\n- a. 等待数据准备\n- b. 将数据从内核拷贝到进程中\n\n\n\nI/O多路复用\n\n多个文件描述符的I/O操作都能在一个线城里面兵法交替顺序完成， 复用线城\n\n\n\n进程和线程\n\n进程是分配资源的最小单位\n\n一个进程可以有多个线程在工作\n\n 线程更加轻量级， 可以随时销毁\n\n\n\n关闭防火墙\n\n```\nsystemctl disable firewalld.service\n```\n\n关闭linux子系统\n\n```\nvi /etc/selinux/config\n```\n\n安装依赖\n\n```\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake\nyum -y install wget httpd-tools vim\n```\n\n查看可安装列表\n\n```\nyum list | grep nginx\n```\n\n查看nginx安装目录\n\n```\nrpm  -ql nginx\n```\n\n日志切割文件\n\n```\nls /var/log/nginx/*.log\n\n```\n\nNginx 启动， 重载\n\n```\nsystemctl reload nginx.service\n```\n\n查看ngin x进程\n\n```\nps -ef | grep nginx\n```\n\n\n\n配置文件\n\n- /etc/nginx/nginx.conf 主配置文件\n- /ect/nginx/conf.d/*.conf 包含conf.d目录下面的所有配置文件\n- /etc/nginx/conf.d/default.conf\n\n语法\n\n```nginx\n# 使用#号可以添加注释 $标示变量\n# 配置文件由指令和指令块组成， 指令块以{}将多条指令组织在一起\nhttp {\n  # include 语句允许把多个配置文件组合 起来以提升可维护性\n  include mime.types;\n  # 每条指令以分号结尾， 指令与参数之间以空格分隔\n  default_type applycation/octet-stream;\n  sendfile on;\n  keepalive_timeout 65;\n  # 每个server对应一个网站\n  server {\n    listen 80; # 监听的端口号\n    server_name localhost; # 域名\n    # 指定字符集\n    charset: utf-8\n    # 指定访问日志的格式和字符集\n    access_log /var/log/nginx/host.access.log main;\n    # 有些指令可以支持正则表达式\n    location / { # 匹配所有的路径 \n      root html # 静态文件根目录\n      index index.html index.html # 索引文件\n    }\n    error_page 500 502 503 504 50x.html\n    # 服务器端错误状态码重定向到50x.html\n    location = /50x.html {\n      root html;\n    }\n    # 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1\n    location ~ \\.php$ {\n      proxy_pass http://127.0.0.1;\n    }\n    \n    # 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;\n    location ~ \\.php$ {\n      root html;\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;\n      include fastcgi_params\n    }\n  }\n}\n```\n\nNginx.conf\n\n```nginx\nuser  nginx; # 设置运行此nginx的用户名 \nworker_processes  1; # 工作进行树\n\nerror_log  /var/log/nginx/error.log warn; # 指定错误日志的路径\npid        /var/run/nginx.pid; # 这是一个文件， 存放的是nginx的进程号\n\n\nevents {\n    worker_connections  1024; # 工作进程的最大链接数\n}\n\n\nhttp {\n    # 包含内容和文件名后缀的对应关系\n    include       /etc/nginx/mime.types;\n   \t# 默认content-type 类型\n    default_type  application/octet-stream;\n\t\t# 定义一个日志的格式\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  \n    log_format main2 '\"$arg_name\" \"$http_host\" \"set_http_date\"'\n\t\t# 指定访问日志的存放位置， 格式为main\n    access_log  /var/log/nginx/access.log  main2;\n\t\t# 零拷贝模式， 不启用用户空间\n    sendfile        on;\n  \t# 不立即推送， 有一定的缓存\n    #tcp_nopush     on;\n\t\t# 活动链接的超时时间\n    keepalive_timeout  65;\n\t\t# 是否启用压缩\n    #gzip  on;\n\t\t# 包含其它配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n\n```\n\n\n\n监控nginx日志\n\n```\ntail -f /var/log/nginx/access.log \n```\n\n\n\nNginx 重启\n\n```linux\nnginx -s reload\nsystemctl reload nginx.service\n```\n\nNginx 检查\n\n```\nnginx -t\n```\n\n\n\n多级代理\n\n如果将真实的参数通过代理传递到真正的服务器\n\n- 参数\n- http_x_forwarded_for = 客户端id, 代理ip, 代理ip\n\n\n\n#### 核心模块\n\n##### 监控nginx客户端状态\n\n```\n\nmv default.conf status.conf\nvi status.conf\n\n```\n\n```nginx\n// 展示nginx状态\nserver {\n  location = /status {\n    stub_status on;\n  }\n}\n\nnginx -s reload\n```\n\n##### 随机主页\n\n```nginx\nmkdir html\necho 1 > 1.html\necho 2 > 2.html\necho 3 > 3.html\ncp status.conf status.conf.bak\n```\n\n```nginx\nserver {\n  location / {\n    root /data/html;\n    random_index on;\n  }\n}\n```\n\n添加权限\n\n```\nchmod -R 777 /data\n```\n\n##### 内容替换\n\n> --with-http_sub_module \n\n```nginx\nserver {\n  location / {\n    root /usr/share/nginx/html;\n    index index index.html;\n    sub_filter 'word' 'zhufeng';\n    sub_filter_once off;\n  }\n}\n```\n\n##### ab\n\n```\nab -n 40 -c 20 http://localhost/\n```\n\n##### 取到ip地址\n\n```\nifconfig\n```\n\n#### 请求限制\n\nLimit_req_zone\n\n```nginx\nlimit_req_zone key zone=name:siz  e rate=rate(每秒多少次)\n```\n\n示例：\n\n```nginx\nmv status.conf limit.conf\n\n\nlimit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s;\n\nserver {\n  # 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个\n  limit_req zone=req_zone burst=3 nodelay;\n}\n```\n\n常见变量\n\n- $binary_remote_addr 表示远程的IP地址\n- zone=req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone\n- zone=req_zone 表示这个参数对应的全局设置就是req_zone的那个区域\n- rate=1r/s 表示请求的速率是一秒一个请求\n- burst=3 表示请求队列的长度\n- Nodally 表示不延时\n\n##### 链接限制\n\nLimit_conn_zone\n\n```nginx\n# 语法： limit_conn_zone key zone=name:size;\n# 语法： limit_conn zone number\n```\n\n示例：\n\n```nginx\nlimit_conn_zone $binary_remote_addr zone=conn_zone:10m;\n\nserver {\n  location / {\n    limit_conn conn_zone 1;c\n  }\n}\n```\n\n##### 访问控制\n\n- 基于IP的访问控制 http_access_module\n- 基于用户的信任登陆 http_auth_basic_module\n\n1. http_access_module\n\n```nginx\n# 语法： allow address | all;\n#       deny address|CIDR|all;\n```\n\n示例：\n\n```nginx\ncp limit.conf limit.conf.back\nmv limit.conf access.conf\n\nserver {\n  location ~ ^/admin.html {\n    deny 192.168.0.104;\n    allow all;\n    root /usr/share/html/\n  }\n}\n\ncd /usr/share\ntouch admin.html\n```\n\n","source":"_posts/nginx/nginx.md","raw":"---\ntitle: Nginx介绍\nabbrlink: b785e162\ndate: 2020-06-25 13:40:50\nkeywords: Nginx\ntags: [Nginx]\n---\n\n### Nginx应用场景\n\n1. 静态资源服务器\n2. 反向代理服务\n3. api接口服务：权限控制， 缓存， 访问数据库 \n\n#### nginx优势\n\n- 高并发高性能\n- **可拓展性好**\n- 高可靠性\n- 热部署\n- 开源许可证\n\n#### nginx架构\n\n1. 清凉\n2. 架构： 采用单线程 ， 多进程和多路io复用模型 （node）\n3. 多路I/O复用\n\n工作流程\n\n![image-20200518090127640](/Users/yueqi/Library/Application Support/typora-user-images/image-20200518090127640.png)\n\n\n\nI/O模式\n\n对于一次IO访问， 数据会掀背拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进行。 所以， 当一次I/O操作发生时， 它会经历两个阶段：\n\n- a. 等待数据准备\n- b. 将数据从内核拷贝到进程中\n\n\n\nI/O多路复用\n\n多个文件描述符的I/O操作都能在一个线城里面兵法交替顺序完成， 复用线城\n\n\n\n进程和线程\n\n进程是分配资源的最小单位\n\n一个进程可以有多个线程在工作\n\n 线程更加轻量级， 可以随时销毁\n\n\n\n关闭防火墙\n\n```\nsystemctl disable firewalld.service\n```\n\n关闭linux子系统\n\n```\nvi /etc/selinux/config\n```\n\n安装依赖\n\n```\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake\nyum -y install wget httpd-tools vim\n```\n\n查看可安装列表\n\n```\nyum list | grep nginx\n```\n\n查看nginx安装目录\n\n```\nrpm  -ql nginx\n```\n\n日志切割文件\n\n```\nls /var/log/nginx/*.log\n\n```\n\nNginx 启动， 重载\n\n```\nsystemctl reload nginx.service\n```\n\n查看ngin x进程\n\n```\nps -ef | grep nginx\n```\n\n\n\n配置文件\n\n- /etc/nginx/nginx.conf 主配置文件\n- /ect/nginx/conf.d/*.conf 包含conf.d目录下面的所有配置文件\n- /etc/nginx/conf.d/default.conf\n\n语法\n\n```nginx\n# 使用#号可以添加注释 $标示变量\n# 配置文件由指令和指令块组成， 指令块以{}将多条指令组织在一起\nhttp {\n  # include 语句允许把多个配置文件组合 起来以提升可维护性\n  include mime.types;\n  # 每条指令以分号结尾， 指令与参数之间以空格分隔\n  default_type applycation/octet-stream;\n  sendfile on;\n  keepalive_timeout 65;\n  # 每个server对应一个网站\n  server {\n    listen 80; # 监听的端口号\n    server_name localhost; # 域名\n    # 指定字符集\n    charset: utf-8\n    # 指定访问日志的格式和字符集\n    access_log /var/log/nginx/host.access.log main;\n    # 有些指令可以支持正则表达式\n    location / { # 匹配所有的路径 \n      root html # 静态文件根目录\n      index index.html index.html # 索引文件\n    }\n    error_page 500 502 503 504 50x.html\n    # 服务器端错误状态码重定向到50x.html\n    location = /50x.html {\n      root html;\n    }\n    # 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1\n    location ~ \\.php$ {\n      proxy_pass http://127.0.0.1;\n    }\n    \n    # 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;\n    location ~ \\.php$ {\n      root html;\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;\n      include fastcgi_params\n    }\n  }\n}\n```\n\nNginx.conf\n\n```nginx\nuser  nginx; # 设置运行此nginx的用户名 \nworker_processes  1; # 工作进行树\n\nerror_log  /var/log/nginx/error.log warn; # 指定错误日志的路径\npid        /var/run/nginx.pid; # 这是一个文件， 存放的是nginx的进程号\n\n\nevents {\n    worker_connections  1024; # 工作进程的最大链接数\n}\n\n\nhttp {\n    # 包含内容和文件名后缀的对应关系\n    include       /etc/nginx/mime.types;\n   \t# 默认content-type 类型\n    default_type  application/octet-stream;\n\t\t# 定义一个日志的格式\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  \n    log_format main2 '\"$arg_name\" \"$http_host\" \"set_http_date\"'\n\t\t# 指定访问日志的存放位置， 格式为main\n    access_log  /var/log/nginx/access.log  main2;\n\t\t# 零拷贝模式， 不启用用户空间\n    sendfile        on;\n  \t# 不立即推送， 有一定的缓存\n    #tcp_nopush     on;\n\t\t# 活动链接的超时时间\n    keepalive_timeout  65;\n\t\t# 是否启用压缩\n    #gzip  on;\n\t\t# 包含其它配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n\n```\n\n\n\n监控nginx日志\n\n```\ntail -f /var/log/nginx/access.log \n```\n\n\n\nNginx 重启\n\n```linux\nnginx -s reload\nsystemctl reload nginx.service\n```\n\nNginx 检查\n\n```\nnginx -t\n```\n\n\n\n多级代理\n\n如果将真实的参数通过代理传递到真正的服务器\n\n- 参数\n- http_x_forwarded_for = 客户端id, 代理ip, 代理ip\n\n\n\n#### 核心模块\n\n##### 监控nginx客户端状态\n\n```\n\nmv default.conf status.conf\nvi status.conf\n\n```\n\n```nginx\n// 展示nginx状态\nserver {\n  location = /status {\n    stub_status on;\n  }\n}\n\nnginx -s reload\n```\n\n##### 随机主页\n\n```nginx\nmkdir html\necho 1 > 1.html\necho 2 > 2.html\necho 3 > 3.html\ncp status.conf status.conf.bak\n```\n\n```nginx\nserver {\n  location / {\n    root /data/html;\n    random_index on;\n  }\n}\n```\n\n添加权限\n\n```\nchmod -R 777 /data\n```\n\n##### 内容替换\n\n> --with-http_sub_module \n\n```nginx\nserver {\n  location / {\n    root /usr/share/nginx/html;\n    index index index.html;\n    sub_filter 'word' 'zhufeng';\n    sub_filter_once off;\n  }\n}\n```\n\n##### ab\n\n```\nab -n 40 -c 20 http://localhost/\n```\n\n##### 取到ip地址\n\n```\nifconfig\n```\n\n#### 请求限制\n\nLimit_req_zone\n\n```nginx\nlimit_req_zone key zone=name:siz  e rate=rate(每秒多少次)\n```\n\n示例：\n\n```nginx\nmv status.conf limit.conf\n\n\nlimit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s;\n\nserver {\n  # 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个\n  limit_req zone=req_zone burst=3 nodelay;\n}\n```\n\n常见变量\n\n- $binary_remote_addr 表示远程的IP地址\n- zone=req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone\n- zone=req_zone 表示这个参数对应的全局设置就是req_zone的那个区域\n- rate=1r/s 表示请求的速率是一秒一个请求\n- burst=3 表示请求队列的长度\n- Nodally 表示不延时\n\n##### 链接限制\n\nLimit_conn_zone\n\n```nginx\n# 语法： limit_conn_zone key zone=name:size;\n# 语法： limit_conn zone number\n```\n\n示例：\n\n```nginx\nlimit_conn_zone $binary_remote_addr zone=conn_zone:10m;\n\nserver {\n  location / {\n    limit_conn conn_zone 1;c\n  }\n}\n```\n\n##### 访问控制\n\n- 基于IP的访问控制 http_access_module\n- 基于用户的信任登陆 http_auth_basic_module\n\n1. http_access_module\n\n```nginx\n# 语法： allow address | all;\n#       deny address|CIDR|all;\n```\n\n示例：\n\n```nginx\ncp limit.conf limit.conf.back\nmv limit.conf access.conf\n\nserver {\n  location ~ ^/admin.html {\n    deny 192.168.0.104;\n    allow all;\n    root /usr/share/html/\n  }\n}\n\ncd /usr/share\ntouch admin.html\n```\n\n","slug":"nginx/nginx","published":1,"updated":"2024-10-09T01:52:01.606Z","_id":"cm215vet4000w7k9k1yssee7b","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Nginx应用场景\"><a href=\"#Nginx应用场景\" class=\"headerlink\" title=\"Nginx应用场景\"></a>Nginx应用场景</h3><ol>\n<li>静态资源服务器</li>\n<li>反向代理服务</li>\n<li>api接口服务：权限控制， 缓存， 访问数据库</li>\n</ol>\n<h4 id=\"nginx优势\"><a href=\"#nginx优势\" class=\"headerlink\" title=\"nginx优势\"></a>nginx优势</h4><ul>\n<li>高并发高性能</li>\n<li><strong>可拓展性好</strong></li>\n<li>高可靠性</li>\n<li>热部署</li>\n<li>开源许可证</li>\n</ul>\n<h4 id=\"nginx架构\"><a href=\"#nginx架构\" class=\"headerlink\" title=\"nginx架构\"></a>nginx架构</h4><ol>\n<li>清凉</li>\n<li>架构： 采用单线程 ， 多进程和多路io复用模型 （node）</li>\n<li>多路I&#x2F;O复用</li>\n</ol>\n<p>工作流程</p>\n<p>![image-20200518090127640](&#x2F;Users&#x2F;yueqi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200518090127640.png)</p>\n<p>I&#x2F;O模式</p>\n<p>对于一次IO访问， 数据会掀背拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进行。 所以， 当一次I&#x2F;O操作发生时， 它会经历两个阶段：</p>\n<ul>\n<li>a. 等待数据准备</li>\n<li>b. 将数据从内核拷贝到进程中</li>\n</ul>\n<p>I&#x2F;O多路复用</p>\n<p>多个文件描述符的I&#x2F;O操作都能在一个线城里面兵法交替顺序完成， 复用线城</p>\n<p>进程和线程</p>\n<p>进程是分配资源的最小单位</p>\n<p>一个进程可以有多个线程在工作</p>\n<p> 线程更加轻量级， 可以随时销毁</p>\n<p>关闭防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n\n<p>关闭linux子系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake</span><br><span class=\"line\">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>查看可安装列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx安装目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -ql nginx</span><br></pre></td></tr></table></figure>\n\n<p>日志切割文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /var/log/nginx/*.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Nginx 启动， 重载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl reload nginx.service</span><br></pre></td></tr></table></figure>\n\n<p>查看ngin x进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置文件</p>\n<ul>\n<li>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 主配置文件</li>\n<li>&#x2F;ect&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 包含conf.d目录下面的所有配置文件</li>\n<li>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</li>\n</ul>\n<p>语法</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用#号可以添加注释 $标示变量</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件由指令和指令块组成， 指令块以&#123;&#125;将多条指令组织在一起</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># include 语句允许把多个配置文件组合 起来以提升可维护性</span></span><br><span class=\"line\">  <span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\">  <span class=\"comment\"># 每条指令以分号结尾， 指令与参数之间以空格分隔</span></span><br><span class=\"line\">  <span class=\"attribute\">default_type</span> applycation/octet-stream;</span><br><span class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;</span><br><span class=\"line\">  <span class=\"comment\"># 每个server对应一个网站</span></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; <span class=\"comment\"># 监听的端口号</span></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; <span class=\"comment\"># 域名</span></span><br><span class=\"line\">    <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">    charset: utf-8</span><br><span class=\"line\">    <span class=\"comment\"># 指定访问日志的格式和字符集</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/host.access.log main;</span><br><span class=\"line\">    <span class=\"comment\"># 有些指令可以支持正则表达式</span></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123; <span class=\"comment\"># 匹配所有的路径 </span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> html <span class=\"comment\"># 静态文件根目录</span></span><br><span class=\"line\">      index index.html index.html <span class=\"comment\"># 索引文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> 50x.html</span><br><span class=\"line\">    <span class=\"comment\"># 服务器端错误状态码重定向到50x.html</span></span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://127.0.0.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME /scripts<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">      <span class=\"attribute\">include</span> fastcgi_params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx; <span class=\"comment\"># 设置运行此nginx的用户名 </span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>; <span class=\"comment\"># 工作进行树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/<span class=\"literal\">error</span>.log <span class=\"literal\">warn</span>; <span class=\"comment\"># 指定错误日志的路径</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid; <span class=\"comment\"># 这是一个文件， 存放的是nginx的进程号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>; <span class=\"comment\"># 工作进程的最大链接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 包含内容和文件名后缀的对应关系</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">   \t<span class=\"comment\"># 默认content-type 类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义一个日志的格式</span></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"attribute\">log_format</span> main2 <span class=\"string\">&#x27;&quot;<span class=\"variable\">$arg_name</span>&quot; &quot;<span class=\"variable\">$http_host</span>&quot; &quot;set_http_date&quot;&#x27;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 指定访问日志的存放位置， 格式为main</span></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main2;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 零拷贝模式， 不启用用户空间</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">  \t<span class=\"comment\"># 不立即推送， 有一定的缓存</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 活动链接的超时时间</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 是否启用压缩</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 包含其它配置文件</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>监控nginx日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/nginx/access.log </span><br></pre></td></tr></table></figure>\n\n\n\n<p>Nginx 重启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br><span class=\"line\">systemctl reload nginx.service</span><br></pre></td></tr></table></figure>\n\n<p>Nginx 检查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n\n\n<p>多级代理</p>\n<p>如果将真实的参数通过代理传递到真正的服务器</p>\n<ul>\n<li>参数</li>\n<li>http_x_forwarded_for &#x3D; 客户端id, 代理ip, 代理ip</li>\n</ul>\n<h4 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h4><h5 id=\"监控nginx客户端状态\"><a href=\"#监控nginx客户端状态\" class=\"headerlink\" title=\"监控nginx客户端状态\"></a>监控nginx客户端状态</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mv default.conf status.conf</span><br><span class=\"line\">vi status.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 展示nginx状态</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> = /status &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stub_status</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">nginx</span> -s reload</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"随机主页\"><a href=\"#随机主页\" class=\"headerlink\" title=\"随机主页\"></a>随机主页</h5><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mkdir</span> html</span><br><span class=\"line\">echo <span class=\"number\">1</span> &gt; <span class=\"number\">1</span>.html</span><br><span class=\"line\">echo <span class=\"number\">2</span> &gt; <span class=\"number\">2</span>.html</span><br><span class=\"line\">echo <span class=\"number\">3</span> &gt; <span class=\"number\">3</span>.html</span><br><span class=\"line\">cp status.conf status.conf.bak</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /data/html;</span><br><span class=\"line\">    <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 /data</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内容替换\"><a href=\"#内容替换\" class=\"headerlink\" title=\"内容替换\"></a>内容替换</h5><blockquote>\n<p>–with-http_sub_module </p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index index.html;</span><br><span class=\"line\">    <span class=\"attribute\">sub_filter</span> <span class=\"string\">&#x27;word&#x27;</span> <span class=\"string\">&#x27;zhufeng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ab\"><a href=\"#ab\" class=\"headerlink\" title=\"ab\"></a>ab</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 40 -c 20 http://localhost/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"取到ip地址\"><a href=\"#取到ip地址\" class=\"headerlink\" title=\"取到ip地址\"></a>取到ip地址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求限制\"><a href=\"#请求限制\" class=\"headerlink\" title=\"请求限制\"></a>请求限制</h4><p>Limit_req_zone</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> key zone=name:siz  e rate=rate(每秒多少次)</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mv</span> status.conf limit.conf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=req_zone:<span class=\"number\">10m</span> rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个</span></span><br><span class=\"line\">  <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span> nodelay;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见变量</p>\n<ul>\n<li>$binary_remote_addr 表示远程的IP地址</li>\n<li>zone&#x3D;req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone</li>\n<li>zone&#x3D;req_zone 表示这个参数对应的全局设置就是req_zone的那个区域</li>\n<li>rate&#x3D;1r&#x2F;s 表示请求的速率是一秒一个请求</li>\n<li>burst&#x3D;3 表示请求队列的长度</li>\n<li>Nodally 表示不延时</li>\n</ul>\n<h5 id=\"链接限制\"><a href=\"#链接限制\" class=\"headerlink\" title=\"链接限制\"></a>链接限制</h5><p>Limit_conn_zone</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法： limit_conn_zone key zone=name:size;</span></span><br><span class=\"line\"><span class=\"comment\"># 语法： limit_conn zone number</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=conn_zone:<span class=\"number\">10m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> conn_zone <span class=\"number\">1</span>;<span class=\"attribute\">c</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h5><ul>\n<li>基于IP的访问控制 http_access_module</li>\n<li>基于用户的信任登陆 http_auth_basic_module</li>\n</ul>\n<ol>\n<li>http_access_module</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法： allow address | all;</span></span><br><span class=\"line\"><span class=\"comment\">#       deny address|CIDR|all;</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> limit.conf limit.conf.back</span><br><span class=\"line\">mv limit.conf access.conf</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/admin.html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">deny</span> <span class=\"number\">192.168.0.104</span>;</span><br><span class=\"line\">    <span class=\"attribute\">allow</span> all;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/html/</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd /usr/share</span><br><span class=\"line\">touch admin.html</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h3 id=\"Nginx应用场景\"><a href=\"#Nginx应用场景\" class=\"headerlink\" title=\"Nginx应用场景\"></a>Nginx应用场景</h3><ol>\n<li>静态资源服务器</li>\n<li>反向代理服务</li>\n<li>api接口服务：权限控制， 缓存， 访问数据库</li>\n</ol>\n<h4 id=\"nginx优势\"><a href=\"#nginx优势\" class=\"headerlink\" title=\"nginx优势\"></a>nginx优势</h4><ul>\n<li>高并发高性能</li>\n<li><strong>可拓展性好</strong></li>\n<li>高可靠性</li>\n<li>热部署</li>\n<li>开源许可证</li>\n</ul>\n<h4 id=\"nginx架构\"><a href=\"#nginx架构\" class=\"headerlink\" title=\"nginx架构\"></a>nginx架构</h4><ol>\n<li>清凉</li>\n<li>架构： 采用单线程 ， 多进程和多路io复用模型 （node）</li>\n<li>多路I&#x2F;O复用</li>\n</ol>\n<p>工作流程</p>\n<p>![image-20200518090127640](&#x2F;Users&#x2F;yueqi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200518090127640.png)</p>\n<p>I&#x2F;O模式</p>\n<p>对于一次IO访问， 数据会掀背拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进行。 所以， 当一次I&#x2F;O操作发生时， 它会经历两个阶段：</p>\n<ul>\n<li>a. 等待数据准备</li>\n<li>b. 将数据从内核拷贝到进程中</li>\n</ul>\n<p>I&#x2F;O多路复用</p>\n<p>多个文件描述符的I&#x2F;O操作都能在一个线城里面兵法交替顺序完成， 复用线城</p>\n<p>进程和线程</p>\n<p>进程是分配资源的最小单位</p>\n<p>一个进程可以有多个线程在工作</p>\n<p> 线程更加轻量级， 可以随时销毁</p>\n<p>关闭防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n\n<p>关闭linux子系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake</span><br><span class=\"line\">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>查看可安装列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx安装目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -ql nginx</span><br></pre></td></tr></table></figure>\n\n<p>日志切割文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /var/log/nginx/*.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Nginx 启动， 重载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl reload nginx.service</span><br></pre></td></tr></table></figure>\n\n<p>查看ngin x进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置文件</p>\n<ul>\n<li>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 主配置文件</li>\n<li>&#x2F;ect&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 包含conf.d目录下面的所有配置文件</li>\n<li>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</li>\n</ul>\n<p>语法</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用#号可以添加注释 $标示变量</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件由指令和指令块组成， 指令块以&#123;&#125;将多条指令组织在一起</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># include 语句允许把多个配置文件组合 起来以提升可维护性</span></span><br><span class=\"line\">  <span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\">  <span class=\"comment\"># 每条指令以分号结尾， 指令与参数之间以空格分隔</span></span><br><span class=\"line\">  <span class=\"attribute\">default_type</span> applycation/octet-stream;</span><br><span class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;</span><br><span class=\"line\">  <span class=\"comment\"># 每个server对应一个网站</span></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; <span class=\"comment\"># 监听的端口号</span></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; <span class=\"comment\"># 域名</span></span><br><span class=\"line\">    <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">    charset: utf-8</span><br><span class=\"line\">    <span class=\"comment\"># 指定访问日志的格式和字符集</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/host.access.log main;</span><br><span class=\"line\">    <span class=\"comment\"># 有些指令可以支持正则表达式</span></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123; <span class=\"comment\"># 匹配所有的路径 </span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> html <span class=\"comment\"># 静态文件根目录</span></span><br><span class=\"line\">      index index.html index.html <span class=\"comment\"># 索引文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> 50x.html</span><br><span class=\"line\">    <span class=\"comment\"># 服务器端错误状态码重定向到50x.html</span></span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://127.0.0.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME /scripts<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">      <span class=\"attribute\">include</span> fastcgi_params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx; <span class=\"comment\"># 设置运行此nginx的用户名 </span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>; <span class=\"comment\"># 工作进行树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/<span class=\"literal\">error</span>.log <span class=\"literal\">warn</span>; <span class=\"comment\"># 指定错误日志的路径</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid; <span class=\"comment\"># 这是一个文件， 存放的是nginx的进程号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>; <span class=\"comment\"># 工作进程的最大链接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 包含内容和文件名后缀的对应关系</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">   \t<span class=\"comment\"># 默认content-type 类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义一个日志的格式</span></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"attribute\">log_format</span> main2 <span class=\"string\">&#x27;&quot;<span class=\"variable\">$arg_name</span>&quot; &quot;<span class=\"variable\">$http_host</span>&quot; &quot;set_http_date&quot;&#x27;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 指定访问日志的存放位置， 格式为main</span></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main2;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 零拷贝模式， 不启用用户空间</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">  \t<span class=\"comment\"># 不立即推送， 有一定的缓存</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 活动链接的超时时间</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 是否启用压缩</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 包含其它配置文件</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>监控nginx日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/nginx/access.log </span><br></pre></td></tr></table></figure>\n\n\n\n<p>Nginx 重启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br><span class=\"line\">systemctl reload nginx.service</span><br></pre></td></tr></table></figure>\n\n<p>Nginx 检查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n\n\n<p>多级代理</p>\n<p>如果将真实的参数通过代理传递到真正的服务器</p>\n<ul>\n<li>参数</li>\n<li>http_x_forwarded_for &#x3D; 客户端id, 代理ip, 代理ip</li>\n</ul>\n<h4 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h4><h5 id=\"监控nginx客户端状态\"><a href=\"#监控nginx客户端状态\" class=\"headerlink\" title=\"监控nginx客户端状态\"></a>监控nginx客户端状态</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mv default.conf status.conf</span><br><span class=\"line\">vi status.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 展示nginx状态</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> = /status &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stub_status</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">nginx</span> -s reload</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"随机主页\"><a href=\"#随机主页\" class=\"headerlink\" title=\"随机主页\"></a>随机主页</h5><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mkdir</span> html</span><br><span class=\"line\">echo <span class=\"number\">1</span> &gt; <span class=\"number\">1</span>.html</span><br><span class=\"line\">echo <span class=\"number\">2</span> &gt; <span class=\"number\">2</span>.html</span><br><span class=\"line\">echo <span class=\"number\">3</span> &gt; <span class=\"number\">3</span>.html</span><br><span class=\"line\">cp status.conf status.conf.bak</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /data/html;</span><br><span class=\"line\">    <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 /data</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内容替换\"><a href=\"#内容替换\" class=\"headerlink\" title=\"内容替换\"></a>内容替换</h5><blockquote>\n<p>–with-http_sub_module </p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index index.html;</span><br><span class=\"line\">    <span class=\"attribute\">sub_filter</span> <span class=\"string\">&#x27;word&#x27;</span> <span class=\"string\">&#x27;zhufeng&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ab\"><a href=\"#ab\" class=\"headerlink\" title=\"ab\"></a>ab</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 40 -c 20 http://localhost/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"取到ip地址\"><a href=\"#取到ip地址\" class=\"headerlink\" title=\"取到ip地址\"></a>取到ip地址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求限制\"><a href=\"#请求限制\" class=\"headerlink\" title=\"请求限制\"></a>请求限制</h4><p>Limit_req_zone</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> key zone=name:siz  e rate=rate(每秒多少次)</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mv</span> status.conf limit.conf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=req_zone:<span class=\"number\">10m</span> rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个</span></span><br><span class=\"line\">  <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span> nodelay;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见变量</p>\n<ul>\n<li>$binary_remote_addr 表示远程的IP地址</li>\n<li>zone&#x3D;req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone</li>\n<li>zone&#x3D;req_zone 表示这个参数对应的全局设置就是req_zone的那个区域</li>\n<li>rate&#x3D;1r&#x2F;s 表示请求的速率是一秒一个请求</li>\n<li>burst&#x3D;3 表示请求队列的长度</li>\n<li>Nodally 表示不延时</li>\n</ul>\n<h5 id=\"链接限制\"><a href=\"#链接限制\" class=\"headerlink\" title=\"链接限制\"></a>链接限制</h5><p>Limit_conn_zone</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法： limit_conn_zone key zone=name:size;</span></span><br><span class=\"line\"><span class=\"comment\"># 语法： limit_conn zone number</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=conn_zone:<span class=\"number\">10m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> conn_zone <span class=\"number\">1</span>;<span class=\"attribute\">c</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h5><ul>\n<li>基于IP的访问控制 http_access_module</li>\n<li>基于用户的信任登陆 http_auth_basic_module</li>\n</ul>\n<ol>\n<li>http_access_module</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法： allow address | all;</span></span><br><span class=\"line\"><span class=\"comment\">#       deny address|CIDR|all;</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> limit.conf limit.conf.back</span><br><span class=\"line\">mv limit.conf access.conf</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/admin.html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">deny</span> <span class=\"number\">192.168.0.104</span>;</span><br><span class=\"line\">    <span class=\"attribute\">allow</span> all;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/html/</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd /usr/share</span><br><span class=\"line\">touch admin.html</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Nginx基础","abbrlink":"b9852362","date":"2020-06-25T05:40:50.000Z","keywords":"Nginx","_content":"\n> 前言\n\n记录一下自己学习nginx的过程\n\n#### nginx简介\n\n1. nginx是什么？\n\n   nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。\n\n2. nginx主要有哪些**应用场景**？\n\n   - 静态资源服务器\n   - 反向代理服务器\n   - api接口服务器： 权限控制， 缓存， 访问数据库。\n\n3. nginx的优势\n\n   高并发高性能、可拓展性号、高可靠性、热部署、开源许可证\n\n#### 安装nginx \n\n下面介绍在linux系统下安装nginx(centos7)。\n\n首先， 需要关闭系统防火墙\n\n```sh\nsystemctl disable firewalld.service\n```\n\n安装基础的依赖\n\n```shell\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake\nyum -y install wget httpd-tools vim\n```\n\n修改yum源\n\nhttps://nginx.org/en/linux_packages.html#RHEL-CentOS\n\n```shell\nvim /etc/yum.repos.d/nginx.repo\n\n# 文件\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n查看可安装列表\n\n```shell\nyum list | grep nginx\n```\n\nNginx 启动， 重载\n\n```shell\nsystemctl reload nginx.service\n# 或者\nnginx -s reload\n```\n\n查看nginx进程\n\n```shell\nps -ef | grep nginx\n```\n\n查看nginx日志\n\n```shell\ntail -f /var/log/nginx/access.log \ntail -f /var/log/nginx/error.log \n```\n\nNginx 检查\n\n```shell\nnginx -t\n```\n\n\n\n#### nginx配置文件\n\n这里介绍nginx的配置文件\n\n- /etc/nginx/nginx.conf 主配置文件\n- /ect/nginx/conf.d/*.conf 包含conf.d目录下面的所有配置文件\n- /etc/nginx/conf.d/default.conf\n\n语法\n\n```nginx\n# 使用#号可以添加注释 $标示变量\n# 配置文件由指令和指令块组成， 指令块以{}将多条指令组织在一起\nhttp {\n  # include 语句允许把多个配置文件组合 起来以提升可维护性\n  include mime.types;\n  # 每条指令以分号结尾， 指令与参数之间以空格分隔\n  default_type applycation/octet-stream;\n  sendfile on;\n  keepalive_timeout 65;\n  # 每个server对应一个网站\n  server {\n    listen 80; # 监听的端口号\n    server_name localhost; # 域名\n    # 指定字符集\n    charset: utf-8\n    # 指定访问日志的格式和字符集\n    access_log /var/log/nginx/host.access.log main;\n    # 有些指令可以支持正则表达式\n    location / { # 匹配所有的路径 \n      root html # 静态文件根目录\n      index index.html index.html # 索引文件\n    }\n    error_page 500 502 503 504 50x.html\n    # 服务器端错误状态码重定向到50x.html\n    location = /50x.html {\n      root html;\n    }\n    # 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1\n    location ~ \\.php$ {\n      proxy_pass http://127.0.0.1;\n    }\n    \n    # 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;\n    location ~ \\.php$ {\n      root html;\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;\n      include fastcgi_params\n    }\n  }\n}\n```\n\nNginx.conf\n\n```nginx\nuser  nginx; # 设置运行此nginx的用户名 \nworker_processes  1; # 工作进行树\n\nerror_log  /var/log/nginx/error.log warn; # 指定错误日志的路径\npid        /var/run/nginx.pid; # 这是一个文件， 存放的是nginx的进程号\n\n\nevents {\n    worker_connections  1024; # 工作进程的最大链接数\n}\n\n\nhttp {\n    # 包含内容和文件名后缀的对应关系\n    include       /etc/nginx/mime.types;\n   \t# 默认content-type 类型\n    default_type  application/octet-stream;\n\t\t# 定义一个日志的格式\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" \n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  \n    log_format main2 '\"$arg_name\" \"$http_host\" \"set_http_date\"'\n\t\t# 指定访问日志的存放位置， 格式为main\n    access_log  /var/log/nginx/access.log  main2;\n\t\t# 零拷贝模式， 不启用用户空间\n    sendfile        on;\n  \t# 不立即推送， 有一定的缓存\n    #tcp_nopush     on;\n\t\t# 活动链接的超时时间\n    keepalive_timeout  65;\n\t\t# 是否启用压缩\n    #gzip  on;\n\t\t# 包含其它配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n\n\n#### nginx实战\n\n> ###### 代理服务 proxy_pass\n\n代理分为两种， 正向代理和反向代理\n\n- 正向代理\n\n  正向代理的对象是客户端， 服务端看不到真正的客户端， 例如公司局域网内访问外网。\n\n- 反向代理\n\n  反向代理的对象是服务端， 客户端看不到真正的服务端nginx代理应用服务器\n\n示例:\n\n 1. 正向代理: \n\n    ```nginx\n    server_name www.yueqi.com;\n    resolver 8.8.8.8; # 谷歌的域名解析地址\n    server {\n      location / {\n        proxy_pass http://$http_host$request_uri;\n      }\n    }\n    ```\n\n\t2. 反向代理：让客户端发起的请求使用nginx转发到localhost:3000端口\n\n    ```nginx\n    location ~ ^/api {\n      proxy_pass http://localhost:3000;\n      proxy_redirect default; #重定向\n      \n      proxy_set_header Host $http_host; #向后传递头信息\n      proxy_set_header X-Real-IP $remote_addr; #把真实IP传给应用服务器\n    }\n    ```\n\n> ###### 负载均衡\n\nUpstream\n\n语法： upstream name {}\n\nUpstream 服务池\n\n- 使用集群是网站解决高并发、海量数据的问题的常用手段。\n- 当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。\n- 这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈\n\n```nginx\nupstream yueqi {\n  server 127.0.0.1:3000 weight=10;\n  server 127.0.0.1:4000;\n  server 127.0.0.1:5000;\n}\n\nserver {\n  location / {\n    proxy_passhttp://yueqi;\n  }\n}\n```\n\n后台服务器状态\n\n- down 当前服务器不赞誉负载均衡\n- Backup 当其它节点都无法使用时的备份的服务器\n- Max_fails 允许请求失败的次数， 到达最大次数就会休眠\n- Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s\n- Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。\n\n```nginx\nupstream yueqi {\n  server localhost:3000 down;\n  server localhost:4000 backup;\n  server localhost:5000 max_fails=1 fail_timeout=10s;\n}\n```\n\n> ###### 跨域\n\n通过给nginx设置转发头解决跨域问题\n\n```nginx\nserver {\n  location ~ .*\\.json$ {\n    add_header Access-Control-Allow-Origin http://localhost:3000;\n    add_header Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;\n    root /data/json;\n  }\n}\n```\n\n> ###### 压缩 gzip\n\n```nginx\ncp static.conf static.conf.back\nmv static.conf gzip.conf\nserver {\n  location ~ .*\\.(jpg|png|gif) {\n    gzip off;\n    root /usr/share/nginx/html;\n  }\n  \n  location ~ .*\\.(html|js|css) {\n    gzip on;\n    gizp_min_length 1k;\n    gzip_http_version 1.1; # http协议版本1.1以上\n    gizp_comp_level 9; # 压缩级别\n    gzip_types text/css application/javascript; \n    root /usr/share/nginx/html;\n  }\n  \n  location ~ ^/download {\n    gzip_static on; # \n    tcp_nopush on; # 延迟推送\n    root /usr/share/nginx/html;\n  }\n}\n```\n\n> ###### 请求限制\n\n属性： limit_req_zone\n\n语法：\n\n```nginx\nlimit_req_zone key zone=name:siz  e rate=rate(每秒多少次)\n```\n\n示例：\n\n```nginx\n# mv status.conf limit.conf\n\nlimit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s;\n\nserver {\n  # 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个\n  limit_req zone=req_zone burst=3 nodelay;\n}\n```\n\n常见变量\n\n- $binary_remote_addr 表示远程的IP地址\n- zone=req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone\n- zone=req_zone 表示这个参数对应的全局设置就是req_zone的那个区域\n- rate=1r/s 表示请求的速率是一秒一个请求\n- burst=3 表示请求队列的长度\n- Nodally 表示不延时\n\n> 链接限制\n\n属性： limit_conn_zone\n\n语法： \n\n```nginx\nlimit_conn_zone key zone=name:size;\nlimit_conn zone number\n```\n\n示例：\n\n```nginx\nlimit_conn_zone $binary_remote_addr zone=conn_zone:10m;\n\nserver {\n  location / {\n    limit_conn conn_zone 1;c\n  }\n}\n```\n\n> ###### 访问控制\n\n- 基于IP的访问控制 http_access_module\n- 基于用户的信任登陆 http_auth_basic_module\n\n语法：\n\n```nginx\n#  allow address | all;\n#  deny address|CIDR|all;\n```\n\n示例：\n\n```nginx\ncp limit.conf limit.conf.back\nmv limit.conf access.conf\n\nserver {\n  location ~ ^/admin.html {\n    deny 192.168.0.104;\n    allow all;\n    root /usr/share/html/\n  }\n}\n\ncd /usr/share\ntouch admin.html\n```\n\n\n\n补充知识\n\nnginx采用单线程，多进程，和多路IO复用模型（node）\n\n补充知识：\n\n1. 进程和线程\n\n   进程是分配资源的最小单位， 一个进程可以有多个线程在工作。\n\n   线程 更加轻量级， 可以随时销毁。\n\n2. I/O多路复用\n\n   多个文件描述符的I/O操作都能在一个线程里面并发交替顺序完成。 复用线程。\n\n3. I/O模式\n\n   对于一次I/O访问， 数据会线拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进程。 所以， 当一次I/O操作发生时， 它会经历两个阶段： \n\n   - a. 等待数据准备\n   - b. 将数据从内核拷贝到进程中","source":"_posts/nginx/nginx基础.md","raw":"---\ntitle: Nginx基础\nabbrlink: b9852362\ndate: 2020-06-25 13:40:50\nkeywords: Nginx\ntags: [Nginx]\n---\n\n> 前言\n\n记录一下自己学习nginx的过程\n\n#### nginx简介\n\n1. nginx是什么？\n\n   nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。\n\n2. nginx主要有哪些**应用场景**？\n\n   - 静态资源服务器\n   - 反向代理服务器\n   - api接口服务器： 权限控制， 缓存， 访问数据库。\n\n3. nginx的优势\n\n   高并发高性能、可拓展性号、高可靠性、热部署、开源许可证\n\n#### 安装nginx \n\n下面介绍在linux系统下安装nginx(centos7)。\n\n首先， 需要关闭系统防火墙\n\n```sh\nsystemctl disable firewalld.service\n```\n\n安装基础的依赖\n\n```shell\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake\nyum -y install wget httpd-tools vim\n```\n\n修改yum源\n\nhttps://nginx.org/en/linux_packages.html#RHEL-CentOS\n\n```shell\nvim /etc/yum.repos.d/nginx.repo\n\n# 文件\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n查看可安装列表\n\n```shell\nyum list | grep nginx\n```\n\nNginx 启动， 重载\n\n```shell\nsystemctl reload nginx.service\n# 或者\nnginx -s reload\n```\n\n查看nginx进程\n\n```shell\nps -ef | grep nginx\n```\n\n查看nginx日志\n\n```shell\ntail -f /var/log/nginx/access.log \ntail -f /var/log/nginx/error.log \n```\n\nNginx 检查\n\n```shell\nnginx -t\n```\n\n\n\n#### nginx配置文件\n\n这里介绍nginx的配置文件\n\n- /etc/nginx/nginx.conf 主配置文件\n- /ect/nginx/conf.d/*.conf 包含conf.d目录下面的所有配置文件\n- /etc/nginx/conf.d/default.conf\n\n语法\n\n```nginx\n# 使用#号可以添加注释 $标示变量\n# 配置文件由指令和指令块组成， 指令块以{}将多条指令组织在一起\nhttp {\n  # include 语句允许把多个配置文件组合 起来以提升可维护性\n  include mime.types;\n  # 每条指令以分号结尾， 指令与参数之间以空格分隔\n  default_type applycation/octet-stream;\n  sendfile on;\n  keepalive_timeout 65;\n  # 每个server对应一个网站\n  server {\n    listen 80; # 监听的端口号\n    server_name localhost; # 域名\n    # 指定字符集\n    charset: utf-8\n    # 指定访问日志的格式和字符集\n    access_log /var/log/nginx/host.access.log main;\n    # 有些指令可以支持正则表达式\n    location / { # 匹配所有的路径 \n      root html # 静态文件根目录\n      index index.html index.html # 索引文件\n    }\n    error_page 500 502 503 504 50x.html\n    # 服务器端错误状态码重定向到50x.html\n    location = /50x.html {\n      root html;\n    }\n    # 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1\n    location ~ \\.php$ {\n      proxy_pass http://127.0.0.1;\n    }\n    \n    # 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;\n    location ~ \\.php$ {\n      root html;\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;\n      include fastcgi_params\n    }\n  }\n}\n```\n\nNginx.conf\n\n```nginx\nuser  nginx; # 设置运行此nginx的用户名 \nworker_processes  1; # 工作进行树\n\nerror_log  /var/log/nginx/error.log warn; # 指定错误日志的路径\npid        /var/run/nginx.pid; # 这是一个文件， 存放的是nginx的进程号\n\n\nevents {\n    worker_connections  1024; # 工作进程的最大链接数\n}\n\n\nhttp {\n    # 包含内容和文件名后缀的对应关系\n    include       /etc/nginx/mime.types;\n   \t# 默认content-type 类型\n    default_type  application/octet-stream;\n\t\t# 定义一个日志的格式\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" \n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  \n    log_format main2 '\"$arg_name\" \"$http_host\" \"set_http_date\"'\n\t\t# 指定访问日志的存放位置， 格式为main\n    access_log  /var/log/nginx/access.log  main2;\n\t\t# 零拷贝模式， 不启用用户空间\n    sendfile        on;\n  \t# 不立即推送， 有一定的缓存\n    #tcp_nopush     on;\n\t\t# 活动链接的超时时间\n    keepalive_timeout  65;\n\t\t# 是否启用压缩\n    #gzip  on;\n\t\t# 包含其它配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n\n\n#### nginx实战\n\n> ###### 代理服务 proxy_pass\n\n代理分为两种， 正向代理和反向代理\n\n- 正向代理\n\n  正向代理的对象是客户端， 服务端看不到真正的客户端， 例如公司局域网内访问外网。\n\n- 反向代理\n\n  反向代理的对象是服务端， 客户端看不到真正的服务端nginx代理应用服务器\n\n示例:\n\n 1. 正向代理: \n\n    ```nginx\n    server_name www.yueqi.com;\n    resolver 8.8.8.8; # 谷歌的域名解析地址\n    server {\n      location / {\n        proxy_pass http://$http_host$request_uri;\n      }\n    }\n    ```\n\n\t2. 反向代理：让客户端发起的请求使用nginx转发到localhost:3000端口\n\n    ```nginx\n    location ~ ^/api {\n      proxy_pass http://localhost:3000;\n      proxy_redirect default; #重定向\n      \n      proxy_set_header Host $http_host; #向后传递头信息\n      proxy_set_header X-Real-IP $remote_addr; #把真实IP传给应用服务器\n    }\n    ```\n\n> ###### 负载均衡\n\nUpstream\n\n语法： upstream name {}\n\nUpstream 服务池\n\n- 使用集群是网站解决高并发、海量数据的问题的常用手段。\n- 当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。\n- 这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈\n\n```nginx\nupstream yueqi {\n  server 127.0.0.1:3000 weight=10;\n  server 127.0.0.1:4000;\n  server 127.0.0.1:5000;\n}\n\nserver {\n  location / {\n    proxy_passhttp://yueqi;\n  }\n}\n```\n\n后台服务器状态\n\n- down 当前服务器不赞誉负载均衡\n- Backup 当其它节点都无法使用时的备份的服务器\n- Max_fails 允许请求失败的次数， 到达最大次数就会休眠\n- Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s\n- Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。\n\n```nginx\nupstream yueqi {\n  server localhost:3000 down;\n  server localhost:4000 backup;\n  server localhost:5000 max_fails=1 fail_timeout=10s;\n}\n```\n\n> ###### 跨域\n\n通过给nginx设置转发头解决跨域问题\n\n```nginx\nserver {\n  location ~ .*\\.json$ {\n    add_header Access-Control-Allow-Origin http://localhost:3000;\n    add_header Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;\n    root /data/json;\n  }\n}\n```\n\n> ###### 压缩 gzip\n\n```nginx\ncp static.conf static.conf.back\nmv static.conf gzip.conf\nserver {\n  location ~ .*\\.(jpg|png|gif) {\n    gzip off;\n    root /usr/share/nginx/html;\n  }\n  \n  location ~ .*\\.(html|js|css) {\n    gzip on;\n    gizp_min_length 1k;\n    gzip_http_version 1.1; # http协议版本1.1以上\n    gizp_comp_level 9; # 压缩级别\n    gzip_types text/css application/javascript; \n    root /usr/share/nginx/html;\n  }\n  \n  location ~ ^/download {\n    gzip_static on; # \n    tcp_nopush on; # 延迟推送\n    root /usr/share/nginx/html;\n  }\n}\n```\n\n> ###### 请求限制\n\n属性： limit_req_zone\n\n语法：\n\n```nginx\nlimit_req_zone key zone=name:siz  e rate=rate(每秒多少次)\n```\n\n示例：\n\n```nginx\n# mv status.conf limit.conf\n\nlimit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s;\n\nserver {\n  # 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个\n  limit_req zone=req_zone burst=3 nodelay;\n}\n```\n\n常见变量\n\n- $binary_remote_addr 表示远程的IP地址\n- zone=req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone\n- zone=req_zone 表示这个参数对应的全局设置就是req_zone的那个区域\n- rate=1r/s 表示请求的速率是一秒一个请求\n- burst=3 表示请求队列的长度\n- Nodally 表示不延时\n\n> 链接限制\n\n属性： limit_conn_zone\n\n语法： \n\n```nginx\nlimit_conn_zone key zone=name:size;\nlimit_conn zone number\n```\n\n示例：\n\n```nginx\nlimit_conn_zone $binary_remote_addr zone=conn_zone:10m;\n\nserver {\n  location / {\n    limit_conn conn_zone 1;c\n  }\n}\n```\n\n> ###### 访问控制\n\n- 基于IP的访问控制 http_access_module\n- 基于用户的信任登陆 http_auth_basic_module\n\n语法：\n\n```nginx\n#  allow address | all;\n#  deny address|CIDR|all;\n```\n\n示例：\n\n```nginx\ncp limit.conf limit.conf.back\nmv limit.conf access.conf\n\nserver {\n  location ~ ^/admin.html {\n    deny 192.168.0.104;\n    allow all;\n    root /usr/share/html/\n  }\n}\n\ncd /usr/share\ntouch admin.html\n```\n\n\n\n补充知识\n\nnginx采用单线程，多进程，和多路IO复用模型（node）\n\n补充知识：\n\n1. 进程和线程\n\n   进程是分配资源的最小单位， 一个进程可以有多个线程在工作。\n\n   线程 更加轻量级， 可以随时销毁。\n\n2. I/O多路复用\n\n   多个文件描述符的I/O操作都能在一个线程里面并发交替顺序完成。 复用线程。\n\n3. I/O模式\n\n   对于一次I/O访问， 数据会线拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进程。 所以， 当一次I/O操作发生时， 它会经历两个阶段： \n\n   - a. 等待数据准备\n   - b. 将数据从内核拷贝到进程中","slug":"nginx/nginx基础","published":1,"updated":"2024-10-09T01:52:10.879Z","_id":"cm215vet6000y7k9kcrflf8gs","comments":1,"layout":"post","photos":[],"content":"<blockquote>\n<p>前言</p>\n</blockquote>\n<p>记录一下自己学习nginx的过程</p>\n<h4 id=\"nginx简介\"><a href=\"#nginx简介\" class=\"headerlink\" title=\"nginx简介\"></a>nginx简介</h4><ol>\n<li><p>nginx是什么？</p>\n<p>nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP &#x2F; POP3代理服务器。</p>\n</li>\n<li><p>nginx主要有哪些<strong>应用场景</strong>？</p>\n<ul>\n<li>静态资源服务器</li>\n<li>反向代理服务器</li>\n<li>api接口服务器： 权限控制， 缓存， 访问数据库。</li>\n</ul>\n</li>\n<li><p>nginx的优势</p>\n<p>高并发高性能、可拓展性号、高可靠性、热部署、开源许可证</p>\n</li>\n</ol>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><p>下面介绍在linux系统下安装nginx(centos7)。</p>\n<p>首先， 需要关闭系统防火墙</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>\n\n<p>安装基础的依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake</span><br><span class=\"line\">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>修改yum源</p>\n<p><a href=\"https://nginx.org/en/linux_packages.html#RHEL-CentOS\">https://nginx.org/en/linux_packages.html#RHEL-CentOS</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/nginx.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文件</span></span><br><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>查看可安装列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>Nginx 启动， 重载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl reload nginx.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/nginx/access.log </span><br><span class=\"line\">tail -f /var/log/nginx/error.log </span><br></pre></td></tr></table></figure>\n\n<p>Nginx 检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nginx配置文件\"><a href=\"#nginx配置文件\" class=\"headerlink\" title=\"nginx配置文件\"></a>nginx配置文件</h4><p>这里介绍nginx的配置文件</p>\n<ul>\n<li>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 主配置文件</li>\n<li>&#x2F;ect&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 包含conf.d目录下面的所有配置文件</li>\n<li>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</li>\n</ul>\n<p>语法</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用#号可以添加注释 $标示变量</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件由指令和指令块组成， 指令块以&#123;&#125;将多条指令组织在一起</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># include 语句允许把多个配置文件组合 起来以提升可维护性</span></span><br><span class=\"line\">  <span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\">  <span class=\"comment\"># 每条指令以分号结尾， 指令与参数之间以空格分隔</span></span><br><span class=\"line\">  <span class=\"attribute\">default_type</span> applycation/octet-stream;</span><br><span class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;</span><br><span class=\"line\">  <span class=\"comment\"># 每个server对应一个网站</span></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; <span class=\"comment\"># 监听的端口号</span></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; <span class=\"comment\"># 域名</span></span><br><span class=\"line\">    <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">    charset: utf-8</span><br><span class=\"line\">    <span class=\"comment\"># 指定访问日志的格式和字符集</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/host.access.log main;</span><br><span class=\"line\">    <span class=\"comment\"># 有些指令可以支持正则表达式</span></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123; <span class=\"comment\"># 匹配所有的路径 </span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> html <span class=\"comment\"># 静态文件根目录</span></span><br><span class=\"line\">      index index.html index.html <span class=\"comment\"># 索引文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> 50x.html</span><br><span class=\"line\">    <span class=\"comment\"># 服务器端错误状态码重定向到50x.html</span></span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://127.0.0.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME /scripts<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">      <span class=\"attribute\">include</span> fastcgi_params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx; <span class=\"comment\"># 设置运行此nginx的用户名 </span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>; <span class=\"comment\"># 工作进行树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/<span class=\"literal\">error</span>.log <span class=\"literal\">warn</span>; <span class=\"comment\"># 指定错误日志的路径</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid; <span class=\"comment\"># 这是一个文件， 存放的是nginx的进程号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>; <span class=\"comment\"># 工作进程的最大链接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 包含内容和文件名后缀的对应关系</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">   \t<span class=\"comment\"># 默认content-type 类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义一个日志的格式</span></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; </span></span><br><span class=\"line\"><span class=\"string\">                      &#x27;</span><span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> <span class=\"string\">&quot;<span class=\"variable\">$http_referer</span>&quot;</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                      &#x27;</span><span class=\"string\">&quot;<span class=\"variable\">$http_user_agent</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot;</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">    log_format main2 &#x27;</span><span class=\"string\">&quot;<span class=\"variable\">$arg_name</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$http_host</span>&quot;</span> <span class=\"string\">&quot;set_http_date&quot;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 指定访问日志的存放位置， 格式为main</span></span><br><span class=\"line\"><span class=\"string\">    access_log  /var/log/nginx/access.log  main2;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 零拷贝模式， 不启用用户空间</span></span><br><span class=\"line\"><span class=\"string\">    sendfile        on;</span></span><br><span class=\"line\"><span class=\"string\">  \t# 不立即推送， 有一定的缓存</span></span><br><span class=\"line\"><span class=\"string\">    #tcp_nopush     on;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 活动链接的超时时间</span></span><br><span class=\"line\"><span class=\"string\">    keepalive_timeout  65;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 是否启用压缩</span></span><br><span class=\"line\"><span class=\"string\">    #gzip  on;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 包含其它配置文件</span></span><br><span class=\"line\"><span class=\"string\">    include /etc/nginx/conf.d/*.conf;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nginx实战\"><a href=\"#nginx实战\" class=\"headerlink\" title=\"nginx实战\"></a>nginx实战</h4><blockquote>\n<h6 id=\"代理服务-proxy-pass\"><a href=\"#代理服务-proxy-pass\" class=\"headerlink\" title=\"代理服务 proxy_pass\"></a>代理服务 proxy_pass</h6></blockquote>\n<p>代理分为两种， 正向代理和反向代理</p>\n<ul>\n<li><p>正向代理</p>\n<p>正向代理的对象是客户端， 服务端看不到真正的客户端， 例如公司局域网内访问外网。</p>\n</li>\n<li><p>反向代理</p>\n<p>反向代理的对象是服务端， 客户端看不到真正的服务端nginx代理应用服务器</p>\n</li>\n</ul>\n<p>示例:</p>\n<ol>\n<li><p>正向代理: </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span> www.yueqi.com;</span><br><span class=\"line\"><span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>; <span class=\"comment\"># 谷歌的域名解析地址</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>反向代理：让客户端发起的请求使用nginx转发到localhost:3000端口</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ ^/api</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://localhost:3000;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_redirect</span> default; <span class=\"comment\">#重定向</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>; <span class=\"comment\">#向后传递头信息</span></span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>; <span class=\"comment\">#把真实IP传给应用服务器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<h6 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h6></blockquote>\n<p>Upstream</p>\n<p>语法： upstream name {}</p>\n<p>Upstream 服务池</p>\n<ul>\n<li>使用集群是网站解决高并发、海量数据的问题的常用手段。</li>\n<li>当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。</li>\n<li>这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> yueqi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:3000</span> weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:4000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:5000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    proxy_passhttp://yueqi;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后台服务器状态</p>\n<ul>\n<li>down 当前服务器不赞誉负载均衡</li>\n<li>Backup 当其它节点都无法使用时的备份的服务器</li>\n<li>Max_fails 允许请求失败的次数， 到达最大次数就会休眠</li>\n<li>Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s</li>\n<li>Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> yueqi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">3000</span> down;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">4000</span> backup;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">5000</span> max_fails=<span class=\"number\">1</span> fail_timeout=<span class=\"number\">10s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h6></blockquote>\n<p>通过给nginx设置转发头解决跨域问题</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.json$</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin http://localhost:3000;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /data/json;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"压缩-gzip\"><a href=\"#压缩-gzip\" class=\"headerlink\" title=\"压缩 gzip\"></a>压缩 gzip</h6></blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> static.conf static.conf.back</span><br><span class=\"line\">mv static.conf gzip.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(html|js|css)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gizp_min_length</span> <span class=\"number\">1k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; <span class=\"comment\"># http协议版本1.1以上</span></span><br><span class=\"line\">    <span class=\"attribute\">gizp_comp_level</span> <span class=\"number\">9</span>; <span class=\"comment\"># 压缩级别</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/css application/javascript; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/download</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>; <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; <span class=\"comment\"># 延迟推送</span></span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"请求限制\"><a href=\"#请求限制\" class=\"headerlink\" title=\"请求限制\"></a>请求限制</h6></blockquote>\n<p>属性： limit_req_zone</p>\n<p>语法：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> key zone=name:siz  e rate=rate(每秒多少次)</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mv status.conf limit.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_zone:<span class=\"number\">10m</span> rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个</span></span><br><span class=\"line\">  <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span> nodelay;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见变量</p>\n<ul>\n<li>$binary_remote_addr 表示远程的IP地址</li>\n<li>zone&#x3D;req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone</li>\n<li>zone&#x3D;req_zone 表示这个参数对应的全局设置就是req_zone的那个区域</li>\n<li>rate&#x3D;1r&#x2F;s 表示请求的速率是一秒一个请求</li>\n<li>burst&#x3D;3 表示请求队列的长度</li>\n<li>Nodally 表示不延时</li>\n</ul>\n<blockquote>\n<p>链接限制</p>\n</blockquote>\n<p>属性： limit_conn_zone</p>\n<p>语法： </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_conn_zone</span> key zone=name:size;</span><br><span class=\"line\"><span class=\"attribute\">limit_conn</span> zone number</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=conn_zone:<span class=\"number\">10m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> conn_zone <span class=\"number\">1</span>;<span class=\"attribute\">c</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h6></blockquote>\n<ul>\n<li>基于IP的访问控制 http_access_module</li>\n<li>基于用户的信任登陆 http_auth_basic_module</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  allow address | all;</span></span><br><span class=\"line\"><span class=\"comment\">#  deny address|CIDR|all;</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> limit.conf limit.conf.back</span><br><span class=\"line\">mv limit.conf access.conf</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/admin.html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">deny</span> <span class=\"number\">192.168.0.104</span>;</span><br><span class=\"line\">    <span class=\"attribute\">allow</span> all;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/html/</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd /usr/share</span><br><span class=\"line\">touch admin.html</span><br></pre></td></tr></table></figure>\n\n\n\n<p>补充知识</p>\n<p>nginx采用单线程，多进程，和多路IO复用模型（node）</p>\n<p>补充知识：</p>\n<ol>\n<li><p>进程和线程</p>\n<p>进程是分配资源的最小单位， 一个进程可以有多个线程在工作。</p>\n<p>线程 更加轻量级， 可以随时销毁。</p>\n</li>\n<li><p>I&#x2F;O多路复用</p>\n<p>多个文件描述符的I&#x2F;O操作都能在一个线程里面并发交替顺序完成。 复用线程。</p>\n</li>\n<li><p>I&#x2F;O模式</p>\n<p>对于一次I&#x2F;O访问， 数据会线拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进程。 所以， 当一次I&#x2F;O操作发生时， 它会经历两个阶段： </p>\n<ul>\n<li>a. 等待数据准备</li>\n<li>b. 将数据从内核拷贝到进程中</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>前言</p>\n</blockquote>\n<p>记录一下自己学习nginx的过程</p>\n<h4 id=\"nginx简介\"><a href=\"#nginx简介\" class=\"headerlink\" title=\"nginx简介\"></a>nginx简介</h4><ol>\n<li><p>nginx是什么？</p>\n<p>nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP &#x2F; POP3代理服务器。</p>\n</li>\n<li><p>nginx主要有哪些<strong>应用场景</strong>？</p>\n<ul>\n<li>静态资源服务器</li>\n<li>反向代理服务器</li>\n<li>api接口服务器： 权限控制， 缓存， 访问数据库。</li>\n</ul>\n</li>\n<li><p>nginx的优势</p>\n<p>高并发高性能、可拓展性号、高可靠性、热部署、开源许可证</p>\n</li>\n</ol>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><p>下面介绍在linux系统下安装nginx(centos7)。</p>\n<p>首先， 需要关闭系统防火墙</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>\n\n<p>安装基础的依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make authmake</span><br><span class=\"line\">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>修改yum源</p>\n<p><a href=\"https://nginx.org/en/linux_packages.html#RHEL-CentOS\">https://nginx.org/en/linux_packages.html#RHEL-CentOS</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/nginx.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文件</span></span><br><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>查看可安装列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>Nginx 启动， 重载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl reload nginx.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>查看nginx日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/nginx/access.log </span><br><span class=\"line\">tail -f /var/log/nginx/error.log </span><br></pre></td></tr></table></figure>\n\n<p>Nginx 检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nginx配置文件\"><a href=\"#nginx配置文件\" class=\"headerlink\" title=\"nginx配置文件\"></a>nginx配置文件</h4><p>这里介绍nginx的配置文件</p>\n<ul>\n<li>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 主配置文件</li>\n<li>&#x2F;ect&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 包含conf.d目录下面的所有配置文件</li>\n<li>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</li>\n</ul>\n<p>语法</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用#号可以添加注释 $标示变量</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件由指令和指令块组成， 指令块以&#123;&#125;将多条指令组织在一起</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># include 语句允许把多个配置文件组合 起来以提升可维护性</span></span><br><span class=\"line\">  <span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\">  <span class=\"comment\"># 每条指令以分号结尾， 指令与参数之间以空格分隔</span></span><br><span class=\"line\">  <span class=\"attribute\">default_type</span> applycation/octet-stream;</span><br><span class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">  <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;</span><br><span class=\"line\">  <span class=\"comment\"># 每个server对应一个网站</span></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; <span class=\"comment\"># 监听的端口号</span></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; <span class=\"comment\"># 域名</span></span><br><span class=\"line\">    <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">    charset: utf-8</span><br><span class=\"line\">    <span class=\"comment\"># 指定访问日志的格式和字符集</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/host.access.log main;</span><br><span class=\"line\">    <span class=\"comment\"># 有些指令可以支持正则表达式</span></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123; <span class=\"comment\"># 匹配所有的路径 </span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> html <span class=\"comment\"># 静态文件根目录</span></span><br><span class=\"line\">      index index.html index.html <span class=\"comment\"># 索引文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> 50x.html</span><br><span class=\"line\">    <span class=\"comment\"># 服务器端错误状态码重定向到50x.html</span></span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话， 会把此请求转发给127.0.0.1</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://127.0.0.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 如果说访问的文件名是.php结尾的话，会把请求转发给127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">      <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME /scripts<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">      <span class=\"attribute\">include</span> fastcgi_params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx; <span class=\"comment\"># 设置运行此nginx的用户名 </span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>; <span class=\"comment\"># 工作进行树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/<span class=\"literal\">error</span>.log <span class=\"literal\">warn</span>; <span class=\"comment\"># 指定错误日志的路径</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid; <span class=\"comment\"># 这是一个文件， 存放的是nginx的进程号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>; <span class=\"comment\"># 工作进程的最大链接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 包含内容和文件名后缀的对应关系</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">   \t<span class=\"comment\"># 默认content-type 类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义一个日志的格式</span></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; </span></span><br><span class=\"line\"><span class=\"string\">                      &#x27;</span><span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> <span class=\"string\">&quot;<span class=\"variable\">$http_referer</span>&quot;</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                      &#x27;</span><span class=\"string\">&quot;<span class=\"variable\">$http_user_agent</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot;</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">    log_format main2 &#x27;</span><span class=\"string\">&quot;<span class=\"variable\">$arg_name</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$http_host</span>&quot;</span> <span class=\"string\">&quot;set_http_date&quot;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 指定访问日志的存放位置， 格式为main</span></span><br><span class=\"line\"><span class=\"string\">    access_log  /var/log/nginx/access.log  main2;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 零拷贝模式， 不启用用户空间</span></span><br><span class=\"line\"><span class=\"string\">    sendfile        on;</span></span><br><span class=\"line\"><span class=\"string\">  \t# 不立即推送， 有一定的缓存</span></span><br><span class=\"line\"><span class=\"string\">    #tcp_nopush     on;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 活动链接的超时时间</span></span><br><span class=\"line\"><span class=\"string\">    keepalive_timeout  65;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 是否启用压缩</span></span><br><span class=\"line\"><span class=\"string\">    #gzip  on;</span></span><br><span class=\"line\"><span class=\"string\">\t\t# 包含其它配置文件</span></span><br><span class=\"line\"><span class=\"string\">    include /etc/nginx/conf.d/*.conf;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nginx实战\"><a href=\"#nginx实战\" class=\"headerlink\" title=\"nginx实战\"></a>nginx实战</h4><blockquote>\n<h6 id=\"代理服务-proxy-pass\"><a href=\"#代理服务-proxy-pass\" class=\"headerlink\" title=\"代理服务 proxy_pass\"></a>代理服务 proxy_pass</h6></blockquote>\n<p>代理分为两种， 正向代理和反向代理</p>\n<ul>\n<li><p>正向代理</p>\n<p>正向代理的对象是客户端， 服务端看不到真正的客户端， 例如公司局域网内访问外网。</p>\n</li>\n<li><p>反向代理</p>\n<p>反向代理的对象是服务端， 客户端看不到真正的服务端nginx代理应用服务器</p>\n</li>\n</ul>\n<p>示例:</p>\n<ol>\n<li><p>正向代理: </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span> www.yueqi.com;</span><br><span class=\"line\"><span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>; <span class=\"comment\"># 谷歌的域名解析地址</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>反向代理：让客户端发起的请求使用nginx转发到localhost:3000端口</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ ^/api</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://localhost:3000;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_redirect</span> default; <span class=\"comment\">#重定向</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>; <span class=\"comment\">#向后传递头信息</span></span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>; <span class=\"comment\">#把真实IP传给应用服务器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<h6 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h6></blockquote>\n<p>Upstream</p>\n<p>语法： upstream name {}</p>\n<p>Upstream 服务池</p>\n<ul>\n<li>使用集群是网站解决高并发、海量数据的问题的常用手段。</li>\n<li>当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。</li>\n<li>这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> yueqi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:3000</span> weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:4000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:5000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    proxy_passhttp://yueqi;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后台服务器状态</p>\n<ul>\n<li>down 当前服务器不赞誉负载均衡</li>\n<li>Backup 当其它节点都无法使用时的备份的服务器</li>\n<li>Max_fails 允许请求失败的次数， 到达最大次数就会休眠</li>\n<li>Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s</li>\n<li>Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> yueqi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">3000</span> down;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">4000</span> backup;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">5000</span> max_fails=<span class=\"number\">1</span> fail_timeout=<span class=\"number\">10s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h6></blockquote>\n<p>通过给nginx设置转发头解决跨域问题</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.json$</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin http://localhost:3000;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /data/json;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"压缩-gzip\"><a href=\"#压缩-gzip\" class=\"headerlink\" title=\"压缩 gzip\"></a>压缩 gzip</h6></blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> static.conf static.conf.back</span><br><span class=\"line\">mv static.conf gzip.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(html|js|css)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gizp_min_length</span> <span class=\"number\">1k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; <span class=\"comment\"># http协议版本1.1以上</span></span><br><span class=\"line\">    <span class=\"attribute\">gizp_comp_level</span> <span class=\"number\">9</span>; <span class=\"comment\"># 压缩级别</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/css application/javascript; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/download</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>; <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; <span class=\"comment\"># 延迟推送</span></span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"请求限制\"><a href=\"#请求限制\" class=\"headerlink\" title=\"请求限制\"></a>请求限制</h6></blockquote>\n<p>属性： limit_req_zone</p>\n<p>语法：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> key zone=name:siz  e rate=rate(每秒多少次)</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mv status.conf limit.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_zone:<span class=\"number\">10m</span> rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 缓存队列burst=3个， 放入到缓存中， 并发处理rate+burst个</span></span><br><span class=\"line\">  <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span> nodelay;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见变量</p>\n<ul>\n<li>$binary_remote_addr 表示远程的IP地址</li>\n<li>zone&#x3D;req_zone:10m 表示一个内存区域带下为10M， 并且设定了名称为req_zone</li>\n<li>zone&#x3D;req_zone 表示这个参数对应的全局设置就是req_zone的那个区域</li>\n<li>rate&#x3D;1r&#x2F;s 表示请求的速率是一秒一个请求</li>\n<li>burst&#x3D;3 表示请求队列的长度</li>\n<li>Nodally 表示不延时</li>\n</ul>\n<blockquote>\n<p>链接限制</p>\n</blockquote>\n<p>属性： limit_conn_zone</p>\n<p>语法： </p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_conn_zone</span> key zone=name:size;</span><br><span class=\"line\"><span class=\"attribute\">limit_conn</span> zone number</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=conn_zone:<span class=\"number\">10m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> conn_zone <span class=\"number\">1</span>;<span class=\"attribute\">c</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h6 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h6></blockquote>\n<ul>\n<li>基于IP的访问控制 http_access_module</li>\n<li>基于用户的信任登陆 http_auth_basic_module</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  allow address | all;</span></span><br><span class=\"line\"><span class=\"comment\">#  deny address|CIDR|all;</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> limit.conf limit.conf.back</span><br><span class=\"line\">mv limit.conf access.conf</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/admin.html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">deny</span> <span class=\"number\">192.168.0.104</span>;</span><br><span class=\"line\">    <span class=\"attribute\">allow</span> all;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/html/</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd /usr/share</span><br><span class=\"line\">touch admin.html</span><br></pre></td></tr></table></figure>\n\n\n\n<p>补充知识</p>\n<p>nginx采用单线程，多进程，和多路IO复用模型（node）</p>\n<p>补充知识：</p>\n<ol>\n<li><p>进程和线程</p>\n<p>进程是分配资源的最小单位， 一个进程可以有多个线程在工作。</p>\n<p>线程 更加轻量级， 可以随时销毁。</p>\n</li>\n<li><p>I&#x2F;O多路复用</p>\n<p>多个文件描述符的I&#x2F;O操作都能在一个线程里面并发交替顺序完成。 复用线程。</p>\n</li>\n<li><p>I&#x2F;O模式</p>\n<p>对于一次I&#x2F;O访问， 数据会线拷贝到操作系统内核的缓冲区中， 然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区， 最后交给进程。 所以， 当一次I&#x2F;O操作发生时， 它会经历两个阶段： </p>\n<ul>\n<li>a. 等待数据准备</li>\n<li>b. 将数据从内核拷贝到进程中</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Nginx实战","abbrlink":"b598852562","date":"2020-06-25T05:40:50.000Z","keywords":"Nginx","_content":"\n#### 静态资源web服务器\n\n### CDN\n\ncdn的全称是 Content Delivery Network, 即内容分发网络。\n\n```nginx\nsendfile on; \ntcp_nopush on \n```\n\n压缩 gzip\n\n```nginx\ncp static.conf static.conf.back\nmv static.conf gzip.conf\nserver {\n  location ~ .*\\.(jpg|png|gif) {\n    gzip off;\n    root /usr/share/nginx/html;\n  }\n  \n  location ~ .*\\.(html|js|css) {\n    gzip on;\n    gizp_min_length 1k;\n    gzip_http_version 1.1; # http协议版本1.1以上\n    gizp_comp_level 9; # 压缩级别\n    gzip_types text/css application/javascript; \n    root /usr/share/nginx/html;\n  }\n  \n  location ~ ^/download {\n    gzip_static on; # \n    tcp_nopush on; # 延迟推送\n    root /usr/share/nginx/html;\n  }\n}\n```\n\n![image-20200607145042859](/Users/yueqi/Desktop/document/nginx/image-20200607145042859.png)\n\n#### 跨域\n\n```nginx\nserver {\n  location ~ .*\\.json$ {\n    add_header Access-Control-Allow-Origin http://localhost:3000;\n    add_header Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;\n    root /data/json;\n  }\n}\n```\n\n#### 防盗链\n\n- 防止网络资源被盗用\n- 保证信息安全\n- 防止流量过量\n\n```nginx\nlocation ~ .*\\.(jpg|png|gif)$ {\n  valid_referers nono blocked 47.104.184.134;\n  if ($invalid_referer) { # 验证通过为0， 不通过为1\n    return 403\n  }\n} \n```\n\n#### 代理服务\n\nProps_pass\n\n- 正向代理\n\n  正向代理的对象是客户端， 服务器端看不到真正的客户端， 例如公司局域网内访问外网\n\n- 反向代理\n\n  反向代理代理的对象是服务端， 客户端看不到真正的服务端 nginx代理应用服务器\n\n示例：\n\n1. 正向代理\n\n```nginx\nserver_name www.yueqi.com;\nresolver 8.8.8.8; # 谷歌的域名解析地址\nserver {\n  location / {\n    proxy_pass http://$http_host$request_uri;\n  }\n}\n```\n\n2. 反向代理\n\n```nginx\nlocation ~ ^/api {\n  proxy_pass http://localhost:3000;\n  proxy_redirect default; #重定向\n  \n  proxy_set_header Host $http_host; #向后传递头信息\n  proxy_set_header X-Real-IP $remote_addr; #把真实IP传给应用服务器\n}\n```\n\n\n\n#### 负载均衡\n\n- 使用集群是网站解决高并发、海量数据的问题的常用手段。\n- 当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。\n- 这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈\n\nUpstream\n\n语法： upstream name {}\n\nUpstream 服务池\n\n```nginx\nupstream yueqi {\n  server 127.0.0.1:3000 weight=10;\n  server 127.0.0.1:4000;\n  server 127.0.0.1:5000;\n}\n\nserver {\n  location / {\n    proxy_passhttp://yueqi;\n  }\n}\n```\n\n后台服务器状态\n\n- down 当前服务器不赞誉负载均衡\n- Backup 当其它节点都无法使用时的备份的服务器\n- Max_fails 允许请求失败的次数， 到达最大次数就会休眠\n- Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s\n- Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。\n\n```nginx\nupstream zfpx {\n  server localhost:3000 down;\n  server localhost:4000 backup;\n  server localhost:5000 max_fails=1 fail_timeout=10s;\n}\n```\n\nKill -9 10826\n\n![image-20200607210927446](/Users/yueqi/Library/Application Support/typora-user-images/image-20200607210927446.png)","source":"_posts/nginx/nginx实战.md","raw":"---\ntitle: Nginx实战\nabbrlink: b598852562\ndate: 2020-06-25 13:40:50\nkeywords: Nginx\ntags: [Nginx]\n---\n\n#### 静态资源web服务器\n\n### CDN\n\ncdn的全称是 Content Delivery Network, 即内容分发网络。\n\n```nginx\nsendfile on; \ntcp_nopush on \n```\n\n压缩 gzip\n\n```nginx\ncp static.conf static.conf.back\nmv static.conf gzip.conf\nserver {\n  location ~ .*\\.(jpg|png|gif) {\n    gzip off;\n    root /usr/share/nginx/html;\n  }\n  \n  location ~ .*\\.(html|js|css) {\n    gzip on;\n    gizp_min_length 1k;\n    gzip_http_version 1.1; # http协议版本1.1以上\n    gizp_comp_level 9; # 压缩级别\n    gzip_types text/css application/javascript; \n    root /usr/share/nginx/html;\n  }\n  \n  location ~ ^/download {\n    gzip_static on; # \n    tcp_nopush on; # 延迟推送\n    root /usr/share/nginx/html;\n  }\n}\n```\n\n![image-20200607145042859](/Users/yueqi/Desktop/document/nginx/image-20200607145042859.png)\n\n#### 跨域\n\n```nginx\nserver {\n  location ~ .*\\.json$ {\n    add_header Access-Control-Allow-Origin http://localhost:3000;\n    add_header Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;\n    root /data/json;\n  }\n}\n```\n\n#### 防盗链\n\n- 防止网络资源被盗用\n- 保证信息安全\n- 防止流量过量\n\n```nginx\nlocation ~ .*\\.(jpg|png|gif)$ {\n  valid_referers nono blocked 47.104.184.134;\n  if ($invalid_referer) { # 验证通过为0， 不通过为1\n    return 403\n  }\n} \n```\n\n#### 代理服务\n\nProps_pass\n\n- 正向代理\n\n  正向代理的对象是客户端， 服务器端看不到真正的客户端， 例如公司局域网内访问外网\n\n- 反向代理\n\n  反向代理代理的对象是服务端， 客户端看不到真正的服务端 nginx代理应用服务器\n\n示例：\n\n1. 正向代理\n\n```nginx\nserver_name www.yueqi.com;\nresolver 8.8.8.8; # 谷歌的域名解析地址\nserver {\n  location / {\n    proxy_pass http://$http_host$request_uri;\n  }\n}\n```\n\n2. 反向代理\n\n```nginx\nlocation ~ ^/api {\n  proxy_pass http://localhost:3000;\n  proxy_redirect default; #重定向\n  \n  proxy_set_header Host $http_host; #向后传递头信息\n  proxy_set_header X-Real-IP $remote_addr; #把真实IP传给应用服务器\n}\n```\n\n\n\n#### 负载均衡\n\n- 使用集群是网站解决高并发、海量数据的问题的常用手段。\n- 当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。\n- 这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈\n\nUpstream\n\n语法： upstream name {}\n\nUpstream 服务池\n\n```nginx\nupstream yueqi {\n  server 127.0.0.1:3000 weight=10;\n  server 127.0.0.1:4000;\n  server 127.0.0.1:5000;\n}\n\nserver {\n  location / {\n    proxy_passhttp://yueqi;\n  }\n}\n```\n\n后台服务器状态\n\n- down 当前服务器不赞誉负载均衡\n- Backup 当其它节点都无法使用时的备份的服务器\n- Max_fails 允许请求失败的次数， 到达最大次数就会休眠\n- Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s\n- Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。\n\n```nginx\nupstream zfpx {\n  server localhost:3000 down;\n  server localhost:4000 backup;\n  server localhost:5000 max_fails=1 fail_timeout=10s;\n}\n```\n\nKill -9 10826\n\n![image-20200607210927446](/Users/yueqi/Library/Application Support/typora-user-images/image-20200607210927446.png)","slug":"nginx/nginx实战","published":1,"updated":"2024-10-09T01:52:27.206Z","_id":"cm215vet700117k9keg3gh0a6","comments":1,"layout":"post","photos":[],"content":"<h4 id=\"静态资源web服务器\"><a href=\"#静态资源web服务器\" class=\"headerlink\" title=\"静态资源web服务器\"></a>静态资源web服务器</h4><h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><p>cdn的全称是 Content Delivery Network, 即内容分发网络。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\"><span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span> </span><br></pre></td></tr></table></figure>\n\n<p>压缩 gzip</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> static.conf static.conf.back</span><br><span class=\"line\">mv static.conf gzip.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(html|js|css)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gizp_min_length</span> <span class=\"number\">1k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; <span class=\"comment\"># http协议版本1.1以上</span></span><br><span class=\"line\">    <span class=\"attribute\">gizp_comp_level</span> <span class=\"number\">9</span>; <span class=\"comment\"># 压缩级别</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/css application/javascript; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/download</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>; <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; <span class=\"comment\"># 延迟推送</span></span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/Users/yueqi/Desktop/document/nginx/image-20200607145042859.png\" alt=\"image-20200607145042859\"></p>\n<h4 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.json$</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin http://localhost:3000;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /data/json;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防盗链\"><a href=\"#防盗链\" class=\"headerlink\" title=\"防盗链\"></a>防盗链</h4><ul>\n<li>防止网络资源被盗用</li>\n<li>保证信息安全</li>\n<li>防止流量过量</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)$</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">valid_referers</span> nono <span class=\"literal\">blocked</span> <span class=\"number\">47.104.184.134</span>;</span><br><span class=\"line\">  <span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123; <span class=\"comment\"># 验证通过为0， 不通过为1</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">403</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代理服务\"><a href=\"#代理服务\" class=\"headerlink\" title=\"代理服务\"></a>代理服务</h4><p>Props_pass</p>\n<ul>\n<li><p>正向代理</p>\n<p>正向代理的对象是客户端， 服务器端看不到真正的客户端， 例如公司局域网内访问外网</p>\n</li>\n<li><p>反向代理</p>\n<p>反向代理代理的对象是服务端， 客户端看不到真正的服务端 nginx代理应用服务器</p>\n</li>\n</ul>\n<p>示例：</p>\n<ol>\n<li>正向代理</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span> www.yueqi.com;</span><br><span class=\"line\"><span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>; <span class=\"comment\"># 谷歌的域名解析地址</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>反向代理</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ ^/api</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://localhost:3000;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_redirect</span> default; <span class=\"comment\">#重定向</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>; <span class=\"comment\">#向后传递头信息</span></span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>; <span class=\"comment\">#把真实IP传给应用服务器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><ul>\n<li>使用集群是网站解决高并发、海量数据的问题的常用手段。</li>\n<li>当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。</li>\n<li>这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈</li>\n</ul>\n<p>Upstream</p>\n<p>语法： upstream name {}</p>\n<p>Upstream 服务池</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> yueqi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:3000</span> weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:4000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:5000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    proxy_passhttp://yueqi;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后台服务器状态</p>\n<ul>\n<li>down 当前服务器不赞誉负载均衡</li>\n<li>Backup 当其它节点都无法使用时的备份的服务器</li>\n<li>Max_fails 允许请求失败的次数， 到达最大次数就会休眠</li>\n<li>Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s</li>\n<li>Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> zfpx &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">3000</span> down;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">4000</span> backup;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">5000</span> max_fails=<span class=\"number\">1</span> fail_timeout=<span class=\"number\">10s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kill -9 10826</p>\n<p>![image-20200607210927446](&#x2F;Users&#x2F;yueqi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200607210927446.png)</p>\n","excerpt":"","more":"<h4 id=\"静态资源web服务器\"><a href=\"#静态资源web服务器\" class=\"headerlink\" title=\"静态资源web服务器\"></a>静态资源web服务器</h4><h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><p>cdn的全称是 Content Delivery Network, 即内容分发网络。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\"><span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span> </span><br></pre></td></tr></table></figure>\n\n<p>压缩 gzip</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cp</span> static.conf static.conf.back</span><br><span class=\"line\">mv static.conf gzip.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(html|js|css)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gizp_min_length</span> <span class=\"number\">1k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; <span class=\"comment\"># http协议版本1.1以上</span></span><br><span class=\"line\">    <span class=\"attribute\">gizp_comp_level</span> <span class=\"number\">9</span>; <span class=\"comment\"># 压缩级别</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/css application/javascript; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ ^/download</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>; <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; <span class=\"comment\"># 延迟推送</span></span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/Users/yueqi/Desktop/document/nginx/image-20200607145042859.png\" alt=\"image-20200607145042859\"></p>\n<h4 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.json$</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin http://localhost:3000;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /data/json;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防盗链\"><a href=\"#防盗链\" class=\"headerlink\" title=\"防盗链\"></a>防盗链</h4><ul>\n<li>防止网络资源被盗用</li>\n<li>保证信息安全</li>\n<li>防止流量过量</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)$</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">valid_referers</span> nono <span class=\"literal\">blocked</span> <span class=\"number\">47.104.184.134</span>;</span><br><span class=\"line\">  <span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123; <span class=\"comment\"># 验证通过为0， 不通过为1</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">403</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代理服务\"><a href=\"#代理服务\" class=\"headerlink\" title=\"代理服务\"></a>代理服务</h4><p>Props_pass</p>\n<ul>\n<li><p>正向代理</p>\n<p>正向代理的对象是客户端， 服务器端看不到真正的客户端， 例如公司局域网内访问外网</p>\n</li>\n<li><p>反向代理</p>\n<p>反向代理代理的对象是服务端， 客户端看不到真正的服务端 nginx代理应用服务器</p>\n</li>\n</ul>\n<p>示例：</p>\n<ol>\n<li>正向代理</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span> www.yueqi.com;</span><br><span class=\"line\"><span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>; <span class=\"comment\"># 谷歌的域名解析地址</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>反向代理</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ ^/api</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://localhost:3000;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_redirect</span> default; <span class=\"comment\">#重定向</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>; <span class=\"comment\">#向后传递头信息</span></span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>; <span class=\"comment\">#把真实IP传给应用服务器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><ul>\n<li>使用集群是网站解决高并发、海量数据的问题的常用手段。</li>\n<li>当一台服务器的处理能力、存储空间不足时， 不要企图去换更强大的服务器， 对大型网站而言， 不管多么强大的服务器， 都满足不了网站持续增长的业务需求。</li>\n<li>这种情况下， 更恰当的做法是增加一台服务器分担原油服务器的访问及存储压力。通过负载均衡调度服务器， 将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上吗如果有更多的用户， 就在集群中加入更多的应用服务器， 使应用服务器的负载压力不再成为整个网站的瓶颈</li>\n</ul>\n<p>Upstream</p>\n<p>语法： upstream name {}</p>\n<p>Upstream 服务池</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> yueqi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:3000</span> weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:4000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:5000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    proxy_passhttp://yueqi;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后台服务器状态</p>\n<ul>\n<li>down 当前服务器不赞誉负载均衡</li>\n<li>Backup 当其它节点都无法使用时的备份的服务器</li>\n<li>Max_fails 允许请求失败的次数， 到达最大次数就会休眠</li>\n<li>Fail_timeout 经过max_fails失败后， 服务器暂停的时间， 默认10s</li>\n<li>Max_conns 限制每个server最大的接受的连接数， 性能高的服务器可以连接数多一些。</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> zfpx &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">3000</span> down;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">4000</span> backup;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> localhost:<span class=\"number\">5000</span> max_fails=<span class=\"number\">1</span> fail_timeout=<span class=\"number\">10s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kill -9 10826</p>\n<p>![image-20200607210927446](&#x2F;Users&#x2F;yueqi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200607210927446.png)</p>\n"},{"title":"全局对象","abbrlink":"b585e161","date":"2020-06-25T05:40:50.000Z","keywords":"nodejs","_content":"\n1. 这些对象在所有模块中都可用。 以下变量可能看起来是全局的，但实际上不是。 它们只存在于模块的作用域中，参见模块系统文档：\n\n * global == window 全局对象\n * module 当前模块对象[loaded、children]\n * exports 导出对象[module.exports别名, 但exports不能直接赋值后导出]\n * require 加载模块的方法[cache, resovle,]\n * __dirname当前模块所在的目录的绝对路径\n * __filename 当前模块的绝对路径\nnodejs中每个node模块就是独立模块作用域; \n2. 定时器相关 // 同步 > nextTick > setTimeout|setInterval > setImmediate > 异步IO;\n3. console、Event、global;\n```nodejs\n// 订阅发布\nfunction Event(name){\n    this.name = name;\n    this._events = {};\n\n    //注册监听\n    this.on = function(eventName,callback){\n        if(this._events[eventName]){//有人已经订阅过了这个事件\n            this._events[eventName].push(callback);\n        }else{\n            this._events[eventName] = [callback];\n        }\n    }\n    this.emit = function(eventName){\n        var args = Array.prototype.slice.call(arguments,1);\n        var callbacks = this._events[eventName];\n        var self = this;\n        callbacks.forEach(function(callback){\n            callback.apply(self,args);\n        });\n    }\n    this.removeListener = function(eventName,callback){\n        this._events[eventName] = this._events[eventName].filter(function(cb){\n        return cb != callback;\n    });\n    }\n    this.once = function(eventName,callback) {\n        function onceCallback(){\n            callback.apply(this,arguments);\n            this.removeListener(eventName,onceCallback);\n        }\n        this.on(eventName,onceCallback);\n    }\n}\n```\n\n```nodejs\nprocess.on('uncaughtException',function(e){\n    console.log('uncaughtException', e.message);\n});\n\n//function x(module,exports,require,__dirname,__filename){\n  //console.trace();//显示当前的调用当前堆栈\n//}\n\nconsole.log(global);\nprocess.stdout.write('hello'); // 输出到控制台\nconsole.log(process.pid, process);\n\nprocess.stdin.on('data',function(data){ // 控制台输入\n console.log(data.toString());\n});\n\nprocess.on('exit',function(){\n    console.log('退出前执行');\n});\n\n// ctrl + c 发送一个信号,已确保能正常出发exit事件;\nprocess.on('SIGINT', function() {\n    console.log('SIGINT');\n    process.exit();\n});\n\n// process.argv\n// 中断进程pid\nprocess.kill(process.pid);\nprocess.chdir('4.global');\nconsole.log(process.cwd()); // 改变当前目录, cwd也会对应的变化;\nconsole.log(__dirname); // __dirname 固定为当前工作目录,不会更改;\n```\n\n1. Buffer 用于处理二进制数据;string_decoder\n2. MessageChannel、MessageEvent、MessagePort、performance;\n3. process、queueMicrotask;\n4. URL、URLSearchParams、WebAssembly;\n\n## 调试node - chrome\nnode --inspect --inspect-brk x.js\njson res.end(`${cb}(${data})`);\ncors: writeHead(200, {\n    'Access-Control-Allow-Origin: *'\n});\nmiddleware cors: \ncheerio|puppter|events\nfs.watch|rename|readDir|stat|watchFile\nreadline: 行读取器\ncrypto: 加密\n\n## stream\n```nodejs\nconst fs = require('fs');\nconst zlib = require('zlib');\nconst gzip = zlib.crateGzip();\n\nconst rs = fs.createReadStream(fileInPath);\nconst ws = fs.createReadStream(fileOutPath);\n\nrs.pipe(zip).pipe(ws);\n// rs.pipe(ws);\n// sw.write(rs);\n```\n\n```nodejs\nconst crypto = require('crypto');\nconst pwd = crypto.createHash('md5|sh1').update(pwd).digest('hex');\n\n```\n","source":"_posts/nodejs/global.md","raw":"---\ntitle: 全局对象\nabbrlink: b585e161\ndate: 2020-06-25 13:40:50\nkeywords: nodejs\ntags: [nodejs]\n---\n\n1. 这些对象在所有模块中都可用。 以下变量可能看起来是全局的，但实际上不是。 它们只存在于模块的作用域中，参见模块系统文档：\n\n * global == window 全局对象\n * module 当前模块对象[loaded、children]\n * exports 导出对象[module.exports别名, 但exports不能直接赋值后导出]\n * require 加载模块的方法[cache, resovle,]\n * __dirname当前模块所在的目录的绝对路径\n * __filename 当前模块的绝对路径\nnodejs中每个node模块就是独立模块作用域; \n2. 定时器相关 // 同步 > nextTick > setTimeout|setInterval > setImmediate > 异步IO;\n3. console、Event、global;\n```nodejs\n// 订阅发布\nfunction Event(name){\n    this.name = name;\n    this._events = {};\n\n    //注册监听\n    this.on = function(eventName,callback){\n        if(this._events[eventName]){//有人已经订阅过了这个事件\n            this._events[eventName].push(callback);\n        }else{\n            this._events[eventName] = [callback];\n        }\n    }\n    this.emit = function(eventName){\n        var args = Array.prototype.slice.call(arguments,1);\n        var callbacks = this._events[eventName];\n        var self = this;\n        callbacks.forEach(function(callback){\n            callback.apply(self,args);\n        });\n    }\n    this.removeListener = function(eventName,callback){\n        this._events[eventName] = this._events[eventName].filter(function(cb){\n        return cb != callback;\n    });\n    }\n    this.once = function(eventName,callback) {\n        function onceCallback(){\n            callback.apply(this,arguments);\n            this.removeListener(eventName,onceCallback);\n        }\n        this.on(eventName,onceCallback);\n    }\n}\n```\n\n```nodejs\nprocess.on('uncaughtException',function(e){\n    console.log('uncaughtException', e.message);\n});\n\n//function x(module,exports,require,__dirname,__filename){\n  //console.trace();//显示当前的调用当前堆栈\n//}\n\nconsole.log(global);\nprocess.stdout.write('hello'); // 输出到控制台\nconsole.log(process.pid, process);\n\nprocess.stdin.on('data',function(data){ // 控制台输入\n console.log(data.toString());\n});\n\nprocess.on('exit',function(){\n    console.log('退出前执行');\n});\n\n// ctrl + c 发送一个信号,已确保能正常出发exit事件;\nprocess.on('SIGINT', function() {\n    console.log('SIGINT');\n    process.exit();\n});\n\n// process.argv\n// 中断进程pid\nprocess.kill(process.pid);\nprocess.chdir('4.global');\nconsole.log(process.cwd()); // 改变当前目录, cwd也会对应的变化;\nconsole.log(__dirname); // __dirname 固定为当前工作目录,不会更改;\n```\n\n1. Buffer 用于处理二进制数据;string_decoder\n2. MessageChannel、MessageEvent、MessagePort、performance;\n3. process、queueMicrotask;\n4. URL、URLSearchParams、WebAssembly;\n\n## 调试node - chrome\nnode --inspect --inspect-brk x.js\njson res.end(`${cb}(${data})`);\ncors: writeHead(200, {\n    'Access-Control-Allow-Origin: *'\n});\nmiddleware cors: \ncheerio|puppter|events\nfs.watch|rename|readDir|stat|watchFile\nreadline: 行读取器\ncrypto: 加密\n\n## stream\n```nodejs\nconst fs = require('fs');\nconst zlib = require('zlib');\nconst gzip = zlib.crateGzip();\n\nconst rs = fs.createReadStream(fileInPath);\nconst ws = fs.createReadStream(fileOutPath);\n\nrs.pipe(zip).pipe(ws);\n// rs.pipe(ws);\n// sw.write(rs);\n```\n\n```nodejs\nconst crypto = require('crypto');\nconst pwd = crypto.createHash('md5|sh1').update(pwd).digest('hex');\n\n```\n","slug":"nodejs/global","published":1,"updated":"2024-10-09T00:58:24.383Z","_id":"cm215vet900137k9kcwyu7jgq","comments":1,"layout":"post","photos":[],"content":"<ol>\n<li>这些对象在所有模块中都可用。 以下变量可能看起来是全局的，但实际上不是。 它们只存在于模块的作用域中，参见模块系统文档：</li>\n</ol>\n<ul>\n<li>global &#x3D;&#x3D; window 全局对象</li>\n<li>module 当前模块对象[loaded、children]</li>\n<li>exports 导出对象[module.exports别名, 但exports不能直接赋值后导出]</li>\n<li>require 加载模块的方法[cache, resovle,]</li>\n<li>__dirname当前模块所在的目录的绝对路径</li>\n<li>__filename 当前模块的绝对路径<br>nodejs中每个node模块就是独立模块作用域;</li>\n</ul>\n<ol start=\"2\">\n<li>定时器相关 &#x2F;&#x2F; 同步 &gt; nextTick &gt; setTimeout|setInterval &gt; setImmediate &gt; 异步IO;</li>\n<li>console、Event、global;<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 订阅发布</span><br><span class=\"line\">function Event(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this._events = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //注册监听</span><br><span class=\"line\">    this.on = function(eventName,callback)&#123;</span><br><span class=\"line\">        if(this._events[eventName])&#123;//有人已经订阅过了这个事件</span><br><span class=\"line\">            this._events[eventName].push(callback);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            this._events[eventName] = [callback];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.emit = function(eventName)&#123;</span><br><span class=\"line\">        var args = Array.prototype.slice.call(arguments,1);</span><br><span class=\"line\">        var callbacks = this._events[eventName];</span><br><span class=\"line\">        var self = this;</span><br><span class=\"line\">        callbacks.forEach(function(callback)&#123;</span><br><span class=\"line\">            callback.apply(self,args);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.removeListener = function(eventName,callback)&#123;</span><br><span class=\"line\">        this._events[eventName] = this._events[eventName].filter(function(cb)&#123;</span><br><span class=\"line\">        return cb != callback;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.once = function(eventName,callback) &#123;</span><br><span class=\"line\">        function onceCallback()&#123;</span><br><span class=\"line\">            callback.apply(this,arguments);</span><br><span class=\"line\">            this.removeListener(eventName,onceCallback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.on(eventName,onceCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&#x27;uncaughtException&#x27;,function(e)&#123;</span><br><span class=\"line\">    console.log(&#x27;uncaughtException&#x27;, e.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//function x(module,exports,require,__dirname,__filename)&#123;</span><br><span class=\"line\">  //console.trace();//显示当前的调用当前堆栈</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(global);</span><br><span class=\"line\">process.stdout.write(&#x27;hello&#x27;); // 输出到控制台</span><br><span class=\"line\">console.log(process.pid, process);</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin.on(&#x27;data&#x27;,function(data)&#123; // 控制台输入</span><br><span class=\"line\"> console.log(data.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">process.on(&#x27;exit&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;退出前执行&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// ctrl + c 发送一个信号,已确保能正常出发exit事件;</span><br><span class=\"line\">process.on(&#x27;SIGINT&#x27;, function() &#123;</span><br><span class=\"line\">    console.log(&#x27;SIGINT&#x27;);</span><br><span class=\"line\">    process.exit();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// process.argv</span><br><span class=\"line\">// 中断进程pid</span><br><span class=\"line\">process.kill(process.pid);</span><br><span class=\"line\">process.chdir(&#x27;4.global&#x27;);</span><br><span class=\"line\">console.log(process.cwd()); // 改变当前目录, cwd也会对应的变化;</span><br><span class=\"line\">console.log(__dirname); // __dirname 固定为当前工作目录,不会更改;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Buffer 用于处理二进制数据;string_decoder</li>\n<li>MessageChannel、MessageEvent、MessagePort、performance;</li>\n<li>process、queueMicrotask;</li>\n<li>URL、URLSearchParams、WebAssembly;</li>\n</ol>\n<h2 id=\"调试node-chrome\"><a href=\"#调试node-chrome\" class=\"headerlink\" title=\"调试node - chrome\"></a>调试node - chrome</h2><p>node –inspect –inspect-brk x.js<br>json res.end(<code>$&#123;cb&#125;($&#123;data&#125;)</code>);<br>cors: writeHead(200, {<br>    ‘Access-Control-Allow-Origin: *’<br>});<br>middleware cors:<br>cheerio|puppter|events<br>fs.watch|rename|readDir|stat|watchFile<br>readline: 行读取器<br>crypto: 加密</p>\n<h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const zlib = require(&#x27;zlib&#x27;);</span><br><span class=\"line\">const gzip = zlib.crateGzip();</span><br><span class=\"line\"></span><br><span class=\"line\">const rs = fs.createReadStream(fileInPath);</span><br><span class=\"line\">const ws = fs.createReadStream(fileOutPath);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.pipe(zip).pipe(ws);</span><br><span class=\"line\">// rs.pipe(ws);</span><br><span class=\"line\">// sw.write(rs);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto = require(&#x27;crypto&#x27;);</span><br><span class=\"line\">const pwd = crypto.createHash(&#x27;md5|sh1&#x27;).update(pwd).digest(&#x27;hex&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<ol>\n<li>这些对象在所有模块中都可用。 以下变量可能看起来是全局的，但实际上不是。 它们只存在于模块的作用域中，参见模块系统文档：</li>\n</ol>\n<ul>\n<li>global &#x3D;&#x3D; window 全局对象</li>\n<li>module 当前模块对象[loaded、children]</li>\n<li>exports 导出对象[module.exports别名, 但exports不能直接赋值后导出]</li>\n<li>require 加载模块的方法[cache, resovle,]</li>\n<li>__dirname当前模块所在的目录的绝对路径</li>\n<li>__filename 当前模块的绝对路径<br>nodejs中每个node模块就是独立模块作用域;</li>\n</ul>\n<ol start=\"2\">\n<li>定时器相关 &#x2F;&#x2F; 同步 &gt; nextTick &gt; setTimeout|setInterval &gt; setImmediate &gt; 异步IO;</li>\n<li>console、Event、global;<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 订阅发布</span><br><span class=\"line\">function Event(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this._events = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //注册监听</span><br><span class=\"line\">    this.on = function(eventName,callback)&#123;</span><br><span class=\"line\">        if(this._events[eventName])&#123;//有人已经订阅过了这个事件</span><br><span class=\"line\">            this._events[eventName].push(callback);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            this._events[eventName] = [callback];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.emit = function(eventName)&#123;</span><br><span class=\"line\">        var args = Array.prototype.slice.call(arguments,1);</span><br><span class=\"line\">        var callbacks = this._events[eventName];</span><br><span class=\"line\">        var self = this;</span><br><span class=\"line\">        callbacks.forEach(function(callback)&#123;</span><br><span class=\"line\">            callback.apply(self,args);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.removeListener = function(eventName,callback)&#123;</span><br><span class=\"line\">        this._events[eventName] = this._events[eventName].filter(function(cb)&#123;</span><br><span class=\"line\">        return cb != callback;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.once = function(eventName,callback) &#123;</span><br><span class=\"line\">        function onceCallback()&#123;</span><br><span class=\"line\">            callback.apply(this,arguments);</span><br><span class=\"line\">            this.removeListener(eventName,onceCallback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.on(eventName,onceCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&#x27;uncaughtException&#x27;,function(e)&#123;</span><br><span class=\"line\">    console.log(&#x27;uncaughtException&#x27;, e.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//function x(module,exports,require,__dirname,__filename)&#123;</span><br><span class=\"line\">  //console.trace();//显示当前的调用当前堆栈</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(global);</span><br><span class=\"line\">process.stdout.write(&#x27;hello&#x27;); // 输出到控制台</span><br><span class=\"line\">console.log(process.pid, process);</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin.on(&#x27;data&#x27;,function(data)&#123; // 控制台输入</span><br><span class=\"line\"> console.log(data.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">process.on(&#x27;exit&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;退出前执行&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// ctrl + c 发送一个信号,已确保能正常出发exit事件;</span><br><span class=\"line\">process.on(&#x27;SIGINT&#x27;, function() &#123;</span><br><span class=\"line\">    console.log(&#x27;SIGINT&#x27;);</span><br><span class=\"line\">    process.exit();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// process.argv</span><br><span class=\"line\">// 中断进程pid</span><br><span class=\"line\">process.kill(process.pid);</span><br><span class=\"line\">process.chdir(&#x27;4.global&#x27;);</span><br><span class=\"line\">console.log(process.cwd()); // 改变当前目录, cwd也会对应的变化;</span><br><span class=\"line\">console.log(__dirname); // __dirname 固定为当前工作目录,不会更改;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Buffer 用于处理二进制数据;string_decoder</li>\n<li>MessageChannel、MessageEvent、MessagePort、performance;</li>\n<li>process、queueMicrotask;</li>\n<li>URL、URLSearchParams、WebAssembly;</li>\n</ol>\n<h2 id=\"调试node-chrome\"><a href=\"#调试node-chrome\" class=\"headerlink\" title=\"调试node - chrome\"></a>调试node - chrome</h2><p>node –inspect –inspect-brk x.js<br>json res.end(<code>$&#123;cb&#125;($&#123;data&#125;)</code>);<br>cors: writeHead(200, {<br>    ‘Access-Control-Allow-Origin: *’<br>});<br>middleware cors:<br>cheerio|puppter|events<br>fs.watch|rename|readDir|stat|watchFile<br>readline: 行读取器<br>crypto: 加密</p>\n<h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const zlib = require(&#x27;zlib&#x27;);</span><br><span class=\"line\">const gzip = zlib.crateGzip();</span><br><span class=\"line\"></span><br><span class=\"line\">const rs = fs.createReadStream(fileInPath);</span><br><span class=\"line\">const ws = fs.createReadStream(fileOutPath);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.pipe(zip).pipe(ws);</span><br><span class=\"line\">// rs.pipe(ws);</span><br><span class=\"line\">// sw.write(rs);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto = require(&#x27;crypto&#x27;);</span><br><span class=\"line\">const pwd = crypto.createHash(&#x27;md5|sh1&#x27;).update(pwd).digest(&#x27;hex&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"single-spa API 研读","slug":"singleSpa/single-spa-api","keywords":"微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA","date":"2018-09-01T14:17:36.000Z","_content":"\nSingle-spa(简称sspa) 是一个将多个单页应用聚合为一个整体应用的js微前端框架;\n\n> 好处:\n    集成多个技术栈 而不刷新页面\n    独立部署应用\n    新功能使用新框架，旧的不重写可以共存\n    改善初始加载时间，迟加载代码\n\n## 架构\n\n    1. sspa完整生命周期(bootstrap,mount,umount);\n    2. sspa活动下会响应url路由,dom init -> mount -> unmount自身;\n    3. 非活动下,DOM移除\n    4. 核心加载文件\n\n    ```js\n    // main.js\n    import * as singleSpa from 'single-spa';\n    const name = 'app1';\n    const app = () => import('./app1/app1.js');\n    const activeWhen = '/app1';\n    singleSpa.registerApplication({ name, app, activeWhen });\n    singleSpa.start();\n\n    // app1.js\n    let domEl;\n    export function bootstrap(props) {\n        return Promise\n            .resolve()\n            .then(() => {\n                domEl = document.createElement('div');\n                domEl.id = 'app1';\n                document.body.appendChild(domEl);\n            });\n    }\n    export function mount(props) {\n        return Promise\n            .resolve()\n            .then(() => {\n                // 在这里通常使用框架将ui组件挂载到dom。请参阅https://single-spa.js.org/docs/ecosystem.html。\n                domEl.textContent = 'App 1 is mounted!'\n            });\n    }\n    export function unmount(props) {\n        return Promise\n            .resolve()\n            .then(() => {\n                // 在这里通常是通知框架把ui组件从dom中卸载。参见https://single-spa.js.org/docs/ecosystem.html\n                domEl.textContent = '';\n            })\n    }\n    ```\n\n## sspa cli\n\n    [官方脚手架cli](https://zh-hans.single-spa.js.org/docs/create-single-spa)\nnpm install --global create-single-spa\n--dir|moduleType|framework\n\n## 微前端类型\n\n在single-spa中，有以下三种微前端类型：(一个应用可能包含多种类型)\n\n 1. single-spa applications:有一组特定路由,渲染组件的微前端。\n 2. single-spa parcels: 不受路由控制，渲染组件的微前端。\n 3. utility modules: 非渲染组件，用于暴露共享js逻辑的微前端。\n具体见:[官方解释](https://zh-hans.single-spa.js.org/docs/module-types)      \n","source":"_posts/singleSpa/single-spa-api.md","raw":"---\ntitle: single-spa API 研读\ntags: [微前端,MicroFrontend,前端全栈]\nslug: ea799f7c\nkeywords: 微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA\ndate: 2018-09-01 22:17:36\n---\n\nSingle-spa(简称sspa) 是一个将多个单页应用聚合为一个整体应用的js微前端框架;\n\n> 好处:\n    集成多个技术栈 而不刷新页面\n    独立部署应用\n    新功能使用新框架，旧的不重写可以共存\n    改善初始加载时间，迟加载代码\n\n## 架构\n\n    1. sspa完整生命周期(bootstrap,mount,umount);\n    2. sspa活动下会响应url路由,dom init -> mount -> unmount自身;\n    3. 非活动下,DOM移除\n    4. 核心加载文件\n\n    ```js\n    // main.js\n    import * as singleSpa from 'single-spa';\n    const name = 'app1';\n    const app = () => import('./app1/app1.js');\n    const activeWhen = '/app1';\n    singleSpa.registerApplication({ name, app, activeWhen });\n    singleSpa.start();\n\n    // app1.js\n    let domEl;\n    export function bootstrap(props) {\n        return Promise\n            .resolve()\n            .then(() => {\n                domEl = document.createElement('div');\n                domEl.id = 'app1';\n                document.body.appendChild(domEl);\n            });\n    }\n    export function mount(props) {\n        return Promise\n            .resolve()\n            .then(() => {\n                // 在这里通常使用框架将ui组件挂载到dom。请参阅https://single-spa.js.org/docs/ecosystem.html。\n                domEl.textContent = 'App 1 is mounted!'\n            });\n    }\n    export function unmount(props) {\n        return Promise\n            .resolve()\n            .then(() => {\n                // 在这里通常是通知框架把ui组件从dom中卸载。参见https://single-spa.js.org/docs/ecosystem.html\n                domEl.textContent = '';\n            })\n    }\n    ```\n\n## sspa cli\n\n    [官方脚手架cli](https://zh-hans.single-spa.js.org/docs/create-single-spa)\nnpm install --global create-single-spa\n--dir|moduleType|framework\n\n## 微前端类型\n\n在single-spa中，有以下三种微前端类型：(一个应用可能包含多种类型)\n\n 1. single-spa applications:有一组特定路由,渲染组件的微前端。\n 2. single-spa parcels: 不受路由控制，渲染组件的微前端。\n 3. utility modules: 非渲染组件，用于暴露共享js逻辑的微前端。\n具体见:[官方解释](https://zh-hans.single-spa.js.org/docs/module-types)      \n","published":1,"updated":"2024-10-09T10:45:07.382Z","_id":"cm215veu7002h7k9kcu4sh0u9","comments":1,"layout":"post","photos":[],"content":"<p>Single-spa(简称sspa) 是一个将多个单页应用聚合为一个整体应用的js微前端框架;</p>\n<blockquote>\n<p>好处:<br>    集成多个技术栈 而不刷新页面<br>    独立部署应用<br>    新功能使用新框架，旧的不重写可以共存<br>    改善初始加载时间，迟加载代码</p>\n</blockquote>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><pre><code>1. sspa完整生命周期(bootstrap,mount,umount);\n2. sspa活动下会响应url路由,dom init -&gt; mount -&gt; unmount自身;\n3. 非活动下,DOM移除\n4. 核心加载文件\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> singleSpa <span class=\"keyword\">from</span> <span class=\"string\">&#x27;single-spa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;app1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">app</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./app1/app1.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> activeWhen = <span class=\"string\">&#x27;/app1&#x27;</span>;</span><br><span class=\"line\">singleSpa.<span class=\"title function_\">registerApplication</span>(&#123; name, app, activeWhen &#125;);</span><br><span class=\"line\">singleSpa.<span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app1.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> domEl;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span></span><br><span class=\"line\">        .<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            domEl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">            domEl.<span class=\"property\">id</span> = <span class=\"string\">&#x27;app1&#x27;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(domEl);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span></span><br><span class=\"line\">        .<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里通常使用框架将ui组件挂载到dom。请参阅https://single-spa.js.org/docs/ecosystem.html。</span></span><br><span class=\"line\">            domEl.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;App 1 is mounted!&#x27;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span></span><br><span class=\"line\">        .<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里通常是通知框架把ui组件从dom中卸载。参见https://single-spa.js.org/docs/ecosystem.html</span></span><br><span class=\"line\">            domEl.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"sspa-cli\"><a href=\"#sspa-cli\" class=\"headerlink\" title=\"sspa cli\"></a>sspa cli</h2><pre><code>[官方脚手架cli](https://zh-hans.single-spa.js.org/docs/create-single-spa)\n</code></pre>\n<p>npm install –global create-single-spa<br>–dir|moduleType|framework</p>\n<h2 id=\"微前端类型\"><a href=\"#微前端类型\" class=\"headerlink\" title=\"微前端类型\"></a>微前端类型</h2><p>在single-spa中，有以下三种微前端类型：(一个应用可能包含多种类型)</p>\n<ol>\n<li>single-spa applications:有一组特定路由,渲染组件的微前端。</li>\n<li>single-spa parcels: 不受路由控制，渲染组件的微前端。</li>\n<li>utility modules: 非渲染组件，用于暴露共享js逻辑的微前端。<br>具体见:<a href=\"https://zh-hans.single-spa.js.org/docs/module-types\">官方解释</a></li>\n</ol>\n","excerpt":"","more":"<p>Single-spa(简称sspa) 是一个将多个单页应用聚合为一个整体应用的js微前端框架;</p>\n<blockquote>\n<p>好处:<br>    集成多个技术栈 而不刷新页面<br>    独立部署应用<br>    新功能使用新框架，旧的不重写可以共存<br>    改善初始加载时间，迟加载代码</p>\n</blockquote>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><pre><code>1. sspa完整生命周期(bootstrap,mount,umount);\n2. sspa活动下会响应url路由,dom init -&gt; mount -&gt; unmount自身;\n3. 非活动下,DOM移除\n4. 核心加载文件\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> singleSpa <span class=\"keyword\">from</span> <span class=\"string\">&#x27;single-spa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;app1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">app</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./app1/app1.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> activeWhen = <span class=\"string\">&#x27;/app1&#x27;</span>;</span><br><span class=\"line\">singleSpa.<span class=\"title function_\">registerApplication</span>(&#123; name, app, activeWhen &#125;);</span><br><span class=\"line\">singleSpa.<span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app1.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> domEl;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span></span><br><span class=\"line\">        .<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            domEl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">            domEl.<span class=\"property\">id</span> = <span class=\"string\">&#x27;app1&#x27;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(domEl);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span></span><br><span class=\"line\">        .<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里通常使用框架将ui组件挂载到dom。请参阅https://single-spa.js.org/docs/ecosystem.html。</span></span><br><span class=\"line\">            domEl.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;App 1 is mounted!&#x27;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span></span><br><span class=\"line\">        .<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里通常是通知框架把ui组件从dom中卸载。参见https://single-spa.js.org/docs/ecosystem.html</span></span><br><span class=\"line\">            domEl.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"sspa-cli\"><a href=\"#sspa-cli\" class=\"headerlink\" title=\"sspa cli\"></a>sspa cli</h2><pre><code>[官方脚手架cli](https://zh-hans.single-spa.js.org/docs/create-single-spa)\n</code></pre>\n<p>npm install –global create-single-spa<br>–dir|moduleType|framework</p>\n<h2 id=\"微前端类型\"><a href=\"#微前端类型\" class=\"headerlink\" title=\"微前端类型\"></a>微前端类型</h2><p>在single-spa中，有以下三种微前端类型：(一个应用可能包含多种类型)</p>\n<ol>\n<li>single-spa applications:有一组特定路由,渲染组件的微前端。</li>\n<li>single-spa parcels: 不受路由控制，渲染组件的微前端。</li>\n<li>utility modules: 非渲染组件，用于暴露共享js逻辑的微前端。<br>具体见:<a href=\"https://zh-hans.single-spa.js.org/docs/module-types\">官方解释</a></li>\n</ol>\n"},{"title":"single-spa 流程","slug":"singleSpa/single-spa脉络","keywords":"微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA","date":"2018-09-01T14:17:36.000Z","_content":"## single-spa主流程解析\n\n首先， 要明确两个点：\n\n第一, single-spa是通过event-loop来控制每个应用之间的状态切换的（invoke函数）\n\n第二, single-spa是就像一个状态机，通过给应用设置各种状态， 来管理应用\n\n![主流程](/blog/images/singleSpa/1.png)\n\n接下来， 我们来看一下single-spa框架的主流程是\n\n- 首先，将路由改变需要切换的app或者用户用户手动调起的app包装后， 统一push到事件队列里面\n\n- 如果容器应用没有启动， 那么加载需要加载的app。加载成功之后调用finish方法， 清空当前的执行栈\n\n- 如果容器已经启动，切换app的时候，卸载不需要的app，加载需要的app，挂载需要的app。 完成之后\n\n  清空当前的执行栈。\n\n- 如果过程中，有路由改变等事件， 需要切换app的时候， 将它放入到下一个执行栈中\n\n## singleSpa中的状态机\n\n我们先来熟悉一下single-spa中应用的各种状态\n\n![各种状态](/blog/images/singleSpa/state.png)\n\n- 默认为NOT_LOAD\n- LOAD:   开始加载应用\n- NOTBOOTSTRAP:  加载成功未启动\n- BOOTSTRAPING: 开始挂载/启动， 执行bootstrap生命周期， 只执行一次\n- NOT_MOUNTED：BOOTSTRAP生命周期函数执行完成(成功)\n- MOUNTING: 开始执行mount生命周期函数\n- MOUNTED:  app挂载成功， mount生命周期函数执行成功， 可以执行Vue的$mount()或ReactDOM的render()\n- UNMOUNTING: unmount生命周期函数执行，执行 Vue的$destory()或ReactDOM的unmountComponentAtNode()。\n- SKIP_BECAUSE_BROKEN： 状态改变出错\n- LOAD_ERROR： 一般是用户提供的信息有误，导致加载出错\n\n```js\nexport const NOT_LOADED = 'NOT_LOADED';\nexport const SKIP_BECAUSE_BROKEN = 'SKIP_BECAUSE_BROKEN';\nexport const LOAD_ERROR = 'LOAD_ERROR'\nexport const LOAD_SOURCE_CODE = 'LOAD_SOURCE_CODE'\nexport const NOT_BOOTSTRAP = 'NOT_BOOTSTRAP'\nexport const BOOTSTRAPPING = 'BOOTSTRAPPING';\nexport const NOT_MOUNTED = 'NOT_MOUNTED';\nexport const MOUNTED = 'MOUNTED'\nexport const MOUNTING = 'MOUNTING';\nexport const UNMOUNTING = 'UNMOUNTING';\nexport const UPDATING = 'UPDATING';\n\n\n// import { NOT_LOADED, notLoadError, notSkip, isntLoaded, shouldBeActivity } from './appsHelper';\nexport function notSkip(app) {\n    return app.status !== SKIP_BECAUSE_BROKEN;\n}\n\nexport function notLoadError(app) {\n    return app.status !== LOAD_ERROR;\n}\n\nexport function isntLoaded(app) {\n    return app.status === NOT_LOADED;\n}\n\nexport function isLoaded(app) {\n    return app.status !== NOT_LOADED && app.status !== SKIP_BECAUSE_BROKEN && app.status !== LOAD_ERROR;\n}\n\nexport function isActive(app) {\n    return app.status === MOUNTED\n}\n\nexport function isntActive(app) {\n    return !isActive (app)\n}\n\nexport function shouldBeActivity(app) {\n    try {\n        return app.activityWhen(window.location)\n    }catch(e) {\n        app.status = SKIP_BECAUSE_BROKEN\n        console.log(e)\n    }\n}\n\nexport function shouldntBeActivity(app) {\n    try {\n        return !app.activityWhen(window.location);\n    } catch(e) {\n        app.status = SKIP_BECAUSE_BROKEN;\n        throw e;\n    }\n}\n```\n\n- 需要加载的app\n\n  ```js\n  /**\n   * @function 获取需要被加载的app\n   * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 不是LOAD_ERROR，是NOT_LOADED 同时是应该被加载\n   */\n  export function getAppsToLoad() {\n      return APPS.filter(notSkip).filter(notLoadError).filter(isntLoaded).filter(shouldBeActivity)\n  }\n  \n  \n  /**\n   * @function 获取需要可以被挂载的app\n   * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 已经加载过，没有被激活， 同时是应该挂载\n   */\n  export function getAppsTomount() {\n      return APPS.filter(notSkip).filter(isLoaded).filter(isntActive).filter(shouldBeActivity)\n  }\n  \n  /**\n   * @function 获取需要待被挂载的app\n   */\n  export function getAppsToUnmount() {\n      return APPS.filter(notSkip).filter(isActive).filter(shouldntBeActivity)\n  }\n  \n  /**\n   * @function 获取当前已经挂载的app\n   */\n  export function getMountedApps() {\n      return APPS.filter(app => {\n          return isActive(app)\n      })\n  }\n  ```\n\n## 整个流程\n\n- 首次加载，用户通过registerApplication注册应用, 这里是将所有注册的app收集起来，后面会通过各种状态筛选需要的app。 最后调用invoke函数\n\n  ```js\n  /**\n   * @function 注册App\n   * @param {string} appName 要注册的app的名称\n   * @param {Function: Promise | Object} loadFunction app异步加载函数， 或者app的内容\n   * @param {Function: boolean} activityWhen  判断该app应该何时启动\n   * @param {Object} customProps  自定义参数配置\n   * return Promise\n   */\n  const APPS = []\n  export function registerApplication(appName, loadFunction, activityWhen, customProps = {}) {\n      // 判断参数是否合法\n      if(!appName || typeof appName !== 'string') {\n          throw new Error('appName不可以是一个空字符串')\n      }\n      if(!loadFunction) {\n          throw new Error('loadFunction must be a function or object')\n      }\n      if(typeof loadFunction !== 'function') {\n          loadFunction = () => Promise.resolve(loadFunction)\n      }\n      if(typeof activityWhen !== 'function') {\n          throw new Error('activityWhen must be a function')\n      }\n  \n      APPS.push({\n          name: appName,\n          loadFunction,\n          activityWhen,\n          customProps,\n          status: NOT_LOADED\n      })\n  \n      invoke();\n  }\n  ```\n\n- `invoke函数主要就是控制应用的状态, 同时控制当前event-loop的队列。\n  如果当前event-loop没有处理完成， 那么将需要被操作的app放入到下一次的event-loop中\n  同时判断容器应用有没有被启动， 如果启动， 那么调用performAppChanges切换应用\n  如果没有启动， 那么开始加载需要被加载的应用`\n\n  ```js\n  // 默认没有进行event-loop\n  let appChanges = false;\n  let changesQueue = [];\n  \n  /**\n   * @function 控制应用的状态，同时控制当前event-loop的队列\n   * @param {*} pendings 当前事件队列\n   * @param {*} eventArgs 路由切换的参数\n   */\n  export function invoke(pendings = [], eventArgs) {\n      // 先检查appChanges有没有在做event-loop， 如果正在做event-loop， 将当前app放入到事件队列里面等待\n      // 事件队列不存储app的信息， 所有的app都会放入到APPS的全局状态中，每次先获取\n      if(appChangesUnderway) {\n          return new Promise((resolve, reject) => {\n              changesQueue.push({\n                  success: resolve,\n                  failure: reject,\n                  eventArgs\n              })\n          })\n      }\n  \n      // 表示当前正在进行event-loop\n      appChangesUnderway = true\n  \n      // 这里是整个SingleSpa的状态， 判断容器应用是否已启动\n      if(isStarted()) {\n          return performAppChanges()\n      }\n  \n      // 获取需要被加载的app\n      return loadApps();\n  }\n  ```\n\n- performAppChanges， 切换应用状态\n\n  ```js\n    /**\n     * @function 如果应用已经启动，那么卸载不需要的app，加载需要的app，挂载需要的app\n    */\n    function performAppChanges() {\n        // 先卸载不需要的app， 这里是放到promise中， 开始执行\n        let unmountPromise = getAppsToUnmount().map(toUnmountPromise);\n        unmountPromise = Promise.all(unmountPromise);\n\n        // will load app --> NOT_MOUNTED\n        let loadApps = getAppsToLoad()\n        loadApps = loadApps.map(app => {\n            // 先去加载， 加载完成之后调用bootstrap, 然后卸载，然后加载\n            return toLoadPromise(app).then((app) => {\n                return toBootstrapPromise(app)\n                    .then(() => unmountPromise)\n                    .then(() =>  toMountPromise(app));\n            });\n        });\n\n        // will mount app --> NOT_MOUNTED\n        let mountApps = getAppsTomount();\n\n        // 针对load和mount的app做去重， 这里看一下， 为什么要去重\n        mountApps = mountApps.filter(app => loadApps.indexOf(app) === -1);\n\n        mountApps = mountApps.map((app) => {\n            return toBootstrapPromise(app)\n                .then(() => unmountPromise)\n                .then(() => toMountPromise(app))\n        })\n\n        // 卸载没有问题的时候， 进行挂载新的\n        return unmountPromise.then(() => {\n        let allPromises = loadApps.concat(mountApps);\n        return Promise.all(allPromises.map(toMountPromise)).then(() => {\n            callAllCaptureEvents();\n            return finish();\n        }, e => {\n            // 当一个promise状态已经改变的时候， 再次调用的时候不会在改变\n            pendings.forEach(item => item.failure(e));\n            throw e;\n        })\n        }, e => {\n            callAllCaptureEvents();\n            console.log(e);\n        });\n    }\n  ```\n\n- 加载完应用或者切换应用完成的时候， 调用finish方法清空当前的事件队列， 开始调用下一次事件队列\n\n  ```js\n    function finish() {\n        // 路由改变， 或者是调用start方法\n        // /home, 正在加载appA的时候， route变为了/index\n        // appA加载完成之后， 必须立马加载appB， 将appB放到changesQueue里面，\n        let returnValue = getMountedApps();\n\n        if(pendings.length) {\n            pendings.forEach(item => item.success(returnValue))\n        }\n\n        // 当前的循环已经完成\n        appChangesUnderway = false;\n        if(changesQueue.length) {\n            // backup就是当前循环中被推到事件队列里的事件， 这些事件交给下一次的invoke处理\n            let backup = changesQueue;\n            changesQueue = [];\n\n            invoke(backup);\n        }\n        return returnValue\n    }\n  ```\n\n\n\nsingleSpa的主流程大概就是这样。接下来我们分析两个问题\n\n1. singleSpa是如何实现不刷新就可以切换多框架的应用的。\n2. singleSpa中都做了哪些优化\n\n## singleSp中的路由管理\n\n这里主要介绍一下singleSpa实现不刷新就可以切换多框架的应用的。\n其实， vue或者react中的hash路由或者history路由，\n都是基于浏览器的**hashchange**和**popstate**事件来做的(pushState, replaceState)， \n所以在singleSpa中， 对这几个事件进行了拦截。 当路由改变的时候， \n优先触发singleSpa的切换应用方法(invoke)， \n之后在执行Vue或者react等其他应用的路由方法\n\n```js\nimport { invoke } from \"./invoke\";\n\nconst HIJACK_EVENTS_NAME = /^(hashchange|popstate)$/i;\nconst EVENT_POOL = {\n    hashchange: [],\n    popstate: []\n}\n\nfunction reroute() {\n    invoke([], arguments)\n}\n\nwindow.addEventListener('hashchange', reroute);\nwindow.addEventListener('popstate', reroute);\n\nconst originalAddEventListener = window.addEventListener;\nconst originalRemoveEventListener = window.removeEventListener;\n\n// 只针对性的拦截:hashchange&popstate 这两种\nwindow.addEventListener = function(eventName, handler, ) {\n    if(eventName && HIJACK_EVENTS_NAME.test(this.eventName)) {\n        EVENT_POOL[eventName].indexOf(handler) === -1 && EVENT_POOL[eventName].push(handler)\n    }else {\n        originalAddEventListener.apply(this, arguments)\n    }\n}\n\nwindow.removeEventListener = function(eventName, handler, ) {\n    if(eventName && HIJACK_EVENTS_NAME.test(this.eventName)) {\n        let events = EVENT_POOL[eventName]\n        events.indexOf(handler) > -1 && \n        (EVENT_POOL[eventName] = events.filter(fn => fn !== handler))\n    }else {\n        originalRemoveEventListener.apply(window , arguments)\n    }\n}\n\nfunction mokePopStateEvent(state) {\n    return new PopStateEvent('popstate', { state })\n}\n\nconst originalPushState = window.history.pushState;\nconst originalReplaceState = window.history.replaceState;\n\nwindow.history.pushState = function(state, title, url) {\n    let result = originalPushState.apply(this, arguments);\n\n    reroute(mokePopStateEvent(state));\n\n    return result;\n}\n\nwindow.history.replaceState = function(state, title, url) {\n    let result = originalReplaceState.apply(this, arguments);\n\n    reroute(mokePopStateEvent(state));\n\n    return result;\n}\n\nexport function callCaptureEvents(eventsArgs) {\n    if(!eventsArgs) {\n        return\n    }\n\n    if(!Array.isArray(eventsArgs)) {\n        eventsArgs = [eventsArgs]\n    }\n\n    let name = eventsArgs[0].history;\n\n    if(!EVENT_POOL[name] || EVENT_POOL[name].length === 0) {\n        return;\n    }\n\n    EVENT_POOL[name].forEach(handler => {\n        handler.apply(null, eventsArgs)\n    })\n}\n```\n\n## Single-spa中还做了哪些优化\n\n比如说应用超时处理等\n\nsingleSpa中对每个应用状态的切换都做了超时处理， 当应用切换超时的时候，可以自定义操作\n\n```js\n\nconst TIMEOUTS = {\n    bootstrap: {\n        milliseconds: 3000,\n        rejectWhenTimeout: false\n    },\n    mount: {\n        milliseconds: 3000,\n        rejectWhenTimeout: false\n    },\n    unmount: {\n        milliseconds: 3000,\n        rejectWhenTimeout: false\n    }\n}\n\nexport function reasonableTime(lifecyclePromise, description, timeout) {\n    return new Promise((resolve, reject) => {\n        let finished = false;\n        lifecyclePromise.then((data) => {\n            finished = true;\n            resolve(data);\n        }).catch(e => {\n            finished = true;\n            reject(e);\n        })\n\n        setTimeout(() => {\n            if(finished) { return };\n            if(timeout.rejectWhenTimeout) {\n                reject(`${description}`);\n            }else {\n                console.log('timeout but waiting');\n            }\n        }, timeout.milliseconds);\n    })\n}\n\nexport function ensureTimeout(timeouts = {}) {\n    return {\n        ...TIMEOUTS,\n        ...timeouts\n    }\n}\n```\n\n## 备注\n\nvue和react切换的区别\nVue 2.x的dom挂载，采取的是 **覆盖Dom挂载** 的方式。例如，组件要挂载到`#app`上，那么它会用组件覆盖掉`#app`元素。\n但是React/Angular不同，它们的挂载方式是在目标挂载元素的内部`添加元素`，而不是直接覆盖掉。 例如组件要挂载到`#app`上，那么他会在`#app`内部挂载组件，`#app`还存在。\n这样就造成了一个问题，当我从 vue子项目 => react项目 => vue子项目时，就会找不到要挂载的dom元素，从而抛出错误,不过可以在vue手动拼`#app`。\n","source":"_posts/singleSpa/single-spa脉络.md","raw":"---\ntitle: single-spa 流程\ntags: [微前端,MicroFrontend,前端全栈]\nslug: ea799f7c\nkeywords: 微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA\ndate: 2018-09-01 22:17:36\n---\n## single-spa主流程解析\n\n首先， 要明确两个点：\n\n第一, single-spa是通过event-loop来控制每个应用之间的状态切换的（invoke函数）\n\n第二, single-spa是就像一个状态机，通过给应用设置各种状态， 来管理应用\n\n![主流程](/blog/images/singleSpa/1.png)\n\n接下来， 我们来看一下single-spa框架的主流程是\n\n- 首先，将路由改变需要切换的app或者用户用户手动调起的app包装后， 统一push到事件队列里面\n\n- 如果容器应用没有启动， 那么加载需要加载的app。加载成功之后调用finish方法， 清空当前的执行栈\n\n- 如果容器已经启动，切换app的时候，卸载不需要的app，加载需要的app，挂载需要的app。 完成之后\n\n  清空当前的执行栈。\n\n- 如果过程中，有路由改变等事件， 需要切换app的时候， 将它放入到下一个执行栈中\n\n## singleSpa中的状态机\n\n我们先来熟悉一下single-spa中应用的各种状态\n\n![各种状态](/blog/images/singleSpa/state.png)\n\n- 默认为NOT_LOAD\n- LOAD:   开始加载应用\n- NOTBOOTSTRAP:  加载成功未启动\n- BOOTSTRAPING: 开始挂载/启动， 执行bootstrap生命周期， 只执行一次\n- NOT_MOUNTED：BOOTSTRAP生命周期函数执行完成(成功)\n- MOUNTING: 开始执行mount生命周期函数\n- MOUNTED:  app挂载成功， mount生命周期函数执行成功， 可以执行Vue的$mount()或ReactDOM的render()\n- UNMOUNTING: unmount生命周期函数执行，执行 Vue的$destory()或ReactDOM的unmountComponentAtNode()。\n- SKIP_BECAUSE_BROKEN： 状态改变出错\n- LOAD_ERROR： 一般是用户提供的信息有误，导致加载出错\n\n```js\nexport const NOT_LOADED = 'NOT_LOADED';\nexport const SKIP_BECAUSE_BROKEN = 'SKIP_BECAUSE_BROKEN';\nexport const LOAD_ERROR = 'LOAD_ERROR'\nexport const LOAD_SOURCE_CODE = 'LOAD_SOURCE_CODE'\nexport const NOT_BOOTSTRAP = 'NOT_BOOTSTRAP'\nexport const BOOTSTRAPPING = 'BOOTSTRAPPING';\nexport const NOT_MOUNTED = 'NOT_MOUNTED';\nexport const MOUNTED = 'MOUNTED'\nexport const MOUNTING = 'MOUNTING';\nexport const UNMOUNTING = 'UNMOUNTING';\nexport const UPDATING = 'UPDATING';\n\n\n// import { NOT_LOADED, notLoadError, notSkip, isntLoaded, shouldBeActivity } from './appsHelper';\nexport function notSkip(app) {\n    return app.status !== SKIP_BECAUSE_BROKEN;\n}\n\nexport function notLoadError(app) {\n    return app.status !== LOAD_ERROR;\n}\n\nexport function isntLoaded(app) {\n    return app.status === NOT_LOADED;\n}\n\nexport function isLoaded(app) {\n    return app.status !== NOT_LOADED && app.status !== SKIP_BECAUSE_BROKEN && app.status !== LOAD_ERROR;\n}\n\nexport function isActive(app) {\n    return app.status === MOUNTED\n}\n\nexport function isntActive(app) {\n    return !isActive (app)\n}\n\nexport function shouldBeActivity(app) {\n    try {\n        return app.activityWhen(window.location)\n    }catch(e) {\n        app.status = SKIP_BECAUSE_BROKEN\n        console.log(e)\n    }\n}\n\nexport function shouldntBeActivity(app) {\n    try {\n        return !app.activityWhen(window.location);\n    } catch(e) {\n        app.status = SKIP_BECAUSE_BROKEN;\n        throw e;\n    }\n}\n```\n\n- 需要加载的app\n\n  ```js\n  /**\n   * @function 获取需要被加载的app\n   * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 不是LOAD_ERROR，是NOT_LOADED 同时是应该被加载\n   */\n  export function getAppsToLoad() {\n      return APPS.filter(notSkip).filter(notLoadError).filter(isntLoaded).filter(shouldBeActivity)\n  }\n  \n  \n  /**\n   * @function 获取需要可以被挂载的app\n   * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 已经加载过，没有被激活， 同时是应该挂载\n   */\n  export function getAppsTomount() {\n      return APPS.filter(notSkip).filter(isLoaded).filter(isntActive).filter(shouldBeActivity)\n  }\n  \n  /**\n   * @function 获取需要待被挂载的app\n   */\n  export function getAppsToUnmount() {\n      return APPS.filter(notSkip).filter(isActive).filter(shouldntBeActivity)\n  }\n  \n  /**\n   * @function 获取当前已经挂载的app\n   */\n  export function getMountedApps() {\n      return APPS.filter(app => {\n          return isActive(app)\n      })\n  }\n  ```\n\n## 整个流程\n\n- 首次加载，用户通过registerApplication注册应用, 这里是将所有注册的app收集起来，后面会通过各种状态筛选需要的app。 最后调用invoke函数\n\n  ```js\n  /**\n   * @function 注册App\n   * @param {string} appName 要注册的app的名称\n   * @param {Function: Promise | Object} loadFunction app异步加载函数， 或者app的内容\n   * @param {Function: boolean} activityWhen  判断该app应该何时启动\n   * @param {Object} customProps  自定义参数配置\n   * return Promise\n   */\n  const APPS = []\n  export function registerApplication(appName, loadFunction, activityWhen, customProps = {}) {\n      // 判断参数是否合法\n      if(!appName || typeof appName !== 'string') {\n          throw new Error('appName不可以是一个空字符串')\n      }\n      if(!loadFunction) {\n          throw new Error('loadFunction must be a function or object')\n      }\n      if(typeof loadFunction !== 'function') {\n          loadFunction = () => Promise.resolve(loadFunction)\n      }\n      if(typeof activityWhen !== 'function') {\n          throw new Error('activityWhen must be a function')\n      }\n  \n      APPS.push({\n          name: appName,\n          loadFunction,\n          activityWhen,\n          customProps,\n          status: NOT_LOADED\n      })\n  \n      invoke();\n  }\n  ```\n\n- `invoke函数主要就是控制应用的状态, 同时控制当前event-loop的队列。\n  如果当前event-loop没有处理完成， 那么将需要被操作的app放入到下一次的event-loop中\n  同时判断容器应用有没有被启动， 如果启动， 那么调用performAppChanges切换应用\n  如果没有启动， 那么开始加载需要被加载的应用`\n\n  ```js\n  // 默认没有进行event-loop\n  let appChanges = false;\n  let changesQueue = [];\n  \n  /**\n   * @function 控制应用的状态，同时控制当前event-loop的队列\n   * @param {*} pendings 当前事件队列\n   * @param {*} eventArgs 路由切换的参数\n   */\n  export function invoke(pendings = [], eventArgs) {\n      // 先检查appChanges有没有在做event-loop， 如果正在做event-loop， 将当前app放入到事件队列里面等待\n      // 事件队列不存储app的信息， 所有的app都会放入到APPS的全局状态中，每次先获取\n      if(appChangesUnderway) {\n          return new Promise((resolve, reject) => {\n              changesQueue.push({\n                  success: resolve,\n                  failure: reject,\n                  eventArgs\n              })\n          })\n      }\n  \n      // 表示当前正在进行event-loop\n      appChangesUnderway = true\n  \n      // 这里是整个SingleSpa的状态， 判断容器应用是否已启动\n      if(isStarted()) {\n          return performAppChanges()\n      }\n  \n      // 获取需要被加载的app\n      return loadApps();\n  }\n  ```\n\n- performAppChanges， 切换应用状态\n\n  ```js\n    /**\n     * @function 如果应用已经启动，那么卸载不需要的app，加载需要的app，挂载需要的app\n    */\n    function performAppChanges() {\n        // 先卸载不需要的app， 这里是放到promise中， 开始执行\n        let unmountPromise = getAppsToUnmount().map(toUnmountPromise);\n        unmountPromise = Promise.all(unmountPromise);\n\n        // will load app --> NOT_MOUNTED\n        let loadApps = getAppsToLoad()\n        loadApps = loadApps.map(app => {\n            // 先去加载， 加载完成之后调用bootstrap, 然后卸载，然后加载\n            return toLoadPromise(app).then((app) => {\n                return toBootstrapPromise(app)\n                    .then(() => unmountPromise)\n                    .then(() =>  toMountPromise(app));\n            });\n        });\n\n        // will mount app --> NOT_MOUNTED\n        let mountApps = getAppsTomount();\n\n        // 针对load和mount的app做去重， 这里看一下， 为什么要去重\n        mountApps = mountApps.filter(app => loadApps.indexOf(app) === -1);\n\n        mountApps = mountApps.map((app) => {\n            return toBootstrapPromise(app)\n                .then(() => unmountPromise)\n                .then(() => toMountPromise(app))\n        })\n\n        // 卸载没有问题的时候， 进行挂载新的\n        return unmountPromise.then(() => {\n        let allPromises = loadApps.concat(mountApps);\n        return Promise.all(allPromises.map(toMountPromise)).then(() => {\n            callAllCaptureEvents();\n            return finish();\n        }, e => {\n            // 当一个promise状态已经改变的时候， 再次调用的时候不会在改变\n            pendings.forEach(item => item.failure(e));\n            throw e;\n        })\n        }, e => {\n            callAllCaptureEvents();\n            console.log(e);\n        });\n    }\n  ```\n\n- 加载完应用或者切换应用完成的时候， 调用finish方法清空当前的事件队列， 开始调用下一次事件队列\n\n  ```js\n    function finish() {\n        // 路由改变， 或者是调用start方法\n        // /home, 正在加载appA的时候， route变为了/index\n        // appA加载完成之后， 必须立马加载appB， 将appB放到changesQueue里面，\n        let returnValue = getMountedApps();\n\n        if(pendings.length) {\n            pendings.forEach(item => item.success(returnValue))\n        }\n\n        // 当前的循环已经完成\n        appChangesUnderway = false;\n        if(changesQueue.length) {\n            // backup就是当前循环中被推到事件队列里的事件， 这些事件交给下一次的invoke处理\n            let backup = changesQueue;\n            changesQueue = [];\n\n            invoke(backup);\n        }\n        return returnValue\n    }\n  ```\n\n\n\nsingleSpa的主流程大概就是这样。接下来我们分析两个问题\n\n1. singleSpa是如何实现不刷新就可以切换多框架的应用的。\n2. singleSpa中都做了哪些优化\n\n## singleSp中的路由管理\n\n这里主要介绍一下singleSpa实现不刷新就可以切换多框架的应用的。\n其实， vue或者react中的hash路由或者history路由，\n都是基于浏览器的**hashchange**和**popstate**事件来做的(pushState, replaceState)， \n所以在singleSpa中， 对这几个事件进行了拦截。 当路由改变的时候， \n优先触发singleSpa的切换应用方法(invoke)， \n之后在执行Vue或者react等其他应用的路由方法\n\n```js\nimport { invoke } from \"./invoke\";\n\nconst HIJACK_EVENTS_NAME = /^(hashchange|popstate)$/i;\nconst EVENT_POOL = {\n    hashchange: [],\n    popstate: []\n}\n\nfunction reroute() {\n    invoke([], arguments)\n}\n\nwindow.addEventListener('hashchange', reroute);\nwindow.addEventListener('popstate', reroute);\n\nconst originalAddEventListener = window.addEventListener;\nconst originalRemoveEventListener = window.removeEventListener;\n\n// 只针对性的拦截:hashchange&popstate 这两种\nwindow.addEventListener = function(eventName, handler, ) {\n    if(eventName && HIJACK_EVENTS_NAME.test(this.eventName)) {\n        EVENT_POOL[eventName].indexOf(handler) === -1 && EVENT_POOL[eventName].push(handler)\n    }else {\n        originalAddEventListener.apply(this, arguments)\n    }\n}\n\nwindow.removeEventListener = function(eventName, handler, ) {\n    if(eventName && HIJACK_EVENTS_NAME.test(this.eventName)) {\n        let events = EVENT_POOL[eventName]\n        events.indexOf(handler) > -1 && \n        (EVENT_POOL[eventName] = events.filter(fn => fn !== handler))\n    }else {\n        originalRemoveEventListener.apply(window , arguments)\n    }\n}\n\nfunction mokePopStateEvent(state) {\n    return new PopStateEvent('popstate', { state })\n}\n\nconst originalPushState = window.history.pushState;\nconst originalReplaceState = window.history.replaceState;\n\nwindow.history.pushState = function(state, title, url) {\n    let result = originalPushState.apply(this, arguments);\n\n    reroute(mokePopStateEvent(state));\n\n    return result;\n}\n\nwindow.history.replaceState = function(state, title, url) {\n    let result = originalReplaceState.apply(this, arguments);\n\n    reroute(mokePopStateEvent(state));\n\n    return result;\n}\n\nexport function callCaptureEvents(eventsArgs) {\n    if(!eventsArgs) {\n        return\n    }\n\n    if(!Array.isArray(eventsArgs)) {\n        eventsArgs = [eventsArgs]\n    }\n\n    let name = eventsArgs[0].history;\n\n    if(!EVENT_POOL[name] || EVENT_POOL[name].length === 0) {\n        return;\n    }\n\n    EVENT_POOL[name].forEach(handler => {\n        handler.apply(null, eventsArgs)\n    })\n}\n```\n\n## Single-spa中还做了哪些优化\n\n比如说应用超时处理等\n\nsingleSpa中对每个应用状态的切换都做了超时处理， 当应用切换超时的时候，可以自定义操作\n\n```js\n\nconst TIMEOUTS = {\n    bootstrap: {\n        milliseconds: 3000,\n        rejectWhenTimeout: false\n    },\n    mount: {\n        milliseconds: 3000,\n        rejectWhenTimeout: false\n    },\n    unmount: {\n        milliseconds: 3000,\n        rejectWhenTimeout: false\n    }\n}\n\nexport function reasonableTime(lifecyclePromise, description, timeout) {\n    return new Promise((resolve, reject) => {\n        let finished = false;\n        lifecyclePromise.then((data) => {\n            finished = true;\n            resolve(data);\n        }).catch(e => {\n            finished = true;\n            reject(e);\n        })\n\n        setTimeout(() => {\n            if(finished) { return };\n            if(timeout.rejectWhenTimeout) {\n                reject(`${description}`);\n            }else {\n                console.log('timeout but waiting');\n            }\n        }, timeout.milliseconds);\n    })\n}\n\nexport function ensureTimeout(timeouts = {}) {\n    return {\n        ...TIMEOUTS,\n        ...timeouts\n    }\n}\n```\n\n## 备注\n\nvue和react切换的区别\nVue 2.x的dom挂载，采取的是 **覆盖Dom挂载** 的方式。例如，组件要挂载到`#app`上，那么它会用组件覆盖掉`#app`元素。\n但是React/Angular不同，它们的挂载方式是在目标挂载元素的内部`添加元素`，而不是直接覆盖掉。 例如组件要挂载到`#app`上，那么他会在`#app`内部挂载组件，`#app`还存在。\n这样就造成了一个问题，当我从 vue子项目 => react项目 => vue子项目时，就会找不到要挂载的dom元素，从而抛出错误,不过可以在vue手动拼`#app`。\n","published":1,"updated":"2024-10-09T10:45:07.382Z","_id":"cm215veu8002i7k9kf91q3afx","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"single-spa主流程解析\"><a href=\"#single-spa主流程解析\" class=\"headerlink\" title=\"single-spa主流程解析\"></a>single-spa主流程解析</h2><p>首先， 要明确两个点：</p>\n<p>第一, single-spa是通过event-loop来控制每个应用之间的状态切换的（invoke函数）</p>\n<p>第二, single-spa是就像一个状态机，通过给应用设置各种状态， 来管理应用</p>\n<p><img src=\"/blog/images/singleSpa/1.png\" alt=\"主流程\"></p>\n<p>接下来， 我们来看一下single-spa框架的主流程是</p>\n<ul>\n<li><p>首先，将路由改变需要切换的app或者用户用户手动调起的app包装后， 统一push到事件队列里面</p>\n</li>\n<li><p>如果容器应用没有启动， 那么加载需要加载的app。加载成功之后调用finish方法， 清空当前的执行栈</p>\n</li>\n<li><p>如果容器已经启动，切换app的时候，卸载不需要的app，加载需要的app，挂载需要的app。 完成之后</p>\n<p>清空当前的执行栈。</p>\n</li>\n<li><p>如果过程中，有路由改变等事件， 需要切换app的时候， 将它放入到下一个执行栈中</p>\n</li>\n</ul>\n<h2 id=\"singleSpa中的状态机\"><a href=\"#singleSpa中的状态机\" class=\"headerlink\" title=\"singleSpa中的状态机\"></a>singleSpa中的状态机</h2><p>我们先来熟悉一下single-spa中应用的各种状态</p>\n<p><img src=\"/blog/images/singleSpa/state.png\" alt=\"各种状态\"></p>\n<ul>\n<li>默认为NOT_LOAD</li>\n<li>LOAD:   开始加载应用</li>\n<li>NOTBOOTSTRAP:  加载成功未启动</li>\n<li>BOOTSTRAPING: 开始挂载&#x2F;启动， 执行bootstrap生命周期， 只执行一次</li>\n<li>NOT_MOUNTED：BOOTSTRAP生命周期函数执行完成(成功)</li>\n<li>MOUNTING: 开始执行mount生命周期函数</li>\n<li>MOUNTED:  app挂载成功， mount生命周期函数执行成功， 可以执行Vue的$mount()或ReactDOM的render()</li>\n<li>UNMOUNTING: unmount生命周期函数执行，执行 Vue的$destory()或ReactDOM的unmountComponentAtNode()。</li>\n<li>SKIP_BECAUSE_BROKEN： 状态改变出错</li>\n<li>LOAD_ERROR： 一般是用户提供的信息有误，导致加载出错</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">NOT_LOADED</span> = <span class=\"string\">&#x27;NOT_LOADED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span> = <span class=\"string\">&#x27;SKIP_BECAUSE_BROKEN&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOAD_ERROR</span> = <span class=\"string\">&#x27;LOAD_ERROR&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOAD_SOURCE_CODE</span> = <span class=\"string\">&#x27;LOAD_SOURCE_CODE&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">NOT_BOOTSTRAP</span> = <span class=\"string\">&#x27;NOT_BOOTSTRAP&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">BOOTSTRAPPING</span> = <span class=\"string\">&#x27;BOOTSTRAPPING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">NOT_MOUNTED</span> = <span class=\"string\">&#x27;NOT_MOUNTED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">MOUNTED</span> = <span class=\"string\">&#x27;MOUNTED&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">MOUNTING</span> = <span class=\"string\">&#x27;MOUNTING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">UNMOUNTING</span> = <span class=\"string\">&#x27;UNMOUNTING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">UPDATING</span> = <span class=\"string\">&#x27;UPDATING&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import &#123; NOT_LOADED, notLoadError, notSkip, isntLoaded, shouldBeActivity &#125; from &#x27;./appsHelper&#x27;;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">notSkip</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">notLoadError</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">LOAD_ERROR</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isntLoaded</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> === <span class=\"variable constant_\">NOT_LOADED</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isLoaded</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">NOT_LOADED</span> &amp;&amp; app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span> &amp;&amp; app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">LOAD_ERROR</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isActive</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> === <span class=\"variable constant_\">MOUNTED</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isntActive</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"title function_\">isActive</span> (app)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">shouldBeActivity</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> app.<span class=\"title function_\">activityWhen</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        app.<span class=\"property\">status</span> = <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">shouldntBeActivity</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !app.<span class=\"title function_\">activityWhen</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        app.<span class=\"property\">status</span> = <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span>;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>需要加载的app</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取需要被加载的app</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 不是LOAD_ERROR，是NOT_LOADED 同时是应该被加载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAppsToLoad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(notSkip).<span class=\"title function_\">filter</span>(notLoadError).<span class=\"title function_\">filter</span>(isntLoaded).<span class=\"title function_\">filter</span>(shouldBeActivity)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取需要可以被挂载的app</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 已经加载过，没有被激活， 同时是应该挂载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAppsTomount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(notSkip).<span class=\"title function_\">filter</span>(isLoaded).<span class=\"title function_\">filter</span>(isntActive).<span class=\"title function_\">filter</span>(shouldBeActivity)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取需要待被挂载的app</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAppsToUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(notSkip).<span class=\"title function_\">filter</span>(isActive).<span class=\"title function_\">filter</span>(shouldntBeActivity)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取当前已经挂载的app</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMountedApps</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">isActive</span>(app)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"整个流程\"><a href=\"#整个流程\" class=\"headerlink\" title=\"整个流程\"></a>整个流程</h2><ul>\n<li><p>首次加载，用户通过registerApplication注册应用, 这里是将所有注册的app收集起来，后面会通过各种状态筛选需要的app。 最后调用invoke函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 注册App</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; appName 要注册的app的名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function: Promise | Object</span>&#125; loadFunction app异步加载函数， 或者app的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function: boolean</span>&#125; activityWhen  判断该app应该何时启动</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; customProps  自定义参数配置</span></span><br><span class=\"line\"><span class=\"comment\"> * return Promise</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">APPS</span> = []</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">registerApplication</span>(<span class=\"params\">appName, loadFunction, activityWhen, customProps = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断参数是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!appName || <span class=\"keyword\">typeof</span> appName !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;appName不可以是一个空字符串&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!loadFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;loadFunction must be a function or object&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> loadFunction !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        loadFunction = <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(loadFunction)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> activityWhen !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;activityWhen must be a function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: appName,</span><br><span class=\"line\">        loadFunction,</span><br><span class=\"line\">        activityWhen,</span><br><span class=\"line\">        customProps,</span><br><span class=\"line\">        <span class=\"attr\">status</span>: <span class=\"variable constant_\">NOT_LOADED</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invoke</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>invoke函数主要就是控制应用的状态, 同时控制当前event-loop的队列。 如果当前event-loop没有处理完成， 那么将需要被操作的app放入到下一次的event-loop中 同时判断容器应用有没有被启动， 如果启动， 那么调用performAppChanges切换应用 如果没有启动， 那么开始加载需要被加载的应用</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认没有进行event-loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> appChanges = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> changesQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 控制应用的状态，同时控制当前event-loop的队列</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pendings 当前事件队列</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; eventArgs 路由切换的参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">invoke</span>(<span class=\"params\">pendings = [], eventArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先检查appChanges有没有在做event-loop， 如果正在做event-loop， 将当前app放入到事件队列里面等待</span></span><br><span class=\"line\">    <span class=\"comment\">// 事件队列不存储app的信息， 所有的app都会放入到APPS的全局状态中，每次先获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(appChangesUnderway) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            changesQueue.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">success</span>: resolve,</span><br><span class=\"line\">                <span class=\"attr\">failure</span>: reject,</span><br><span class=\"line\">                eventArgs</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示当前正在进行event-loop</span></span><br><span class=\"line\">    appChangesUnderway = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里是整个SingleSpa的状态， 判断容器应用是否已启动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">isStarted</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">performAppChanges</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取需要被加载的app</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">loadApps</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>performAppChanges， 切换应用状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 如果应用已经启动，那么卸载不需要的app，加载需要的app，挂载需要的app</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performAppChanges</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先卸载不需要的app， 这里是放到promise中， 开始执行</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> unmountPromise = <span class=\"title function_\">getAppsToUnmount</span>().<span class=\"title function_\">map</span>(toUnmountPromise);</span><br><span class=\"line\">    unmountPromise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(unmountPromise);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// will load app --&gt; NOT_MOUNTED</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> loadApps = <span class=\"title function_\">getAppsToLoad</span>()</span><br><span class=\"line\">    loadApps = loadApps.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先去加载， 加载完成之后调用bootstrap, 然后卸载，然后加载</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">toLoadPromise</span>(app).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">toBootstrapPromise</span>(app)</span><br><span class=\"line\">                .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> unmountPromise)</span><br><span class=\"line\">                .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span>  <span class=\"title function_\">toMountPromise</span>(app));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// will mount app --&gt; NOT_MOUNTED</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mountApps = <span class=\"title function_\">getAppsTomount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 针对load和mount的app做去重， 这里看一下， 为什么要去重</span></span><br><span class=\"line\">    mountApps = mountApps.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> loadApps.<span class=\"title function_\">indexOf</span>(app) === -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mountApps = mountApps.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">toBootstrapPromise</span>(app)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> unmountPromise)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">toMountPromise</span>(app))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 卸载没有问题的时候， 进行挂载新的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unmountPromise.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> allPromises = loadApps.<span class=\"title function_\">concat</span>(mountApps);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(allPromises.<span class=\"title function_\">map</span>(toMountPromise)).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callAllCaptureEvents</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">finish</span>();</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当一个promise状态已经改变的时候， 再次调用的时候不会在改变</span></span><br><span class=\"line\">        pendings.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">failure</span>(e));</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callAllCaptureEvents</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载完应用或者切换应用完成的时候， 调用finish方法清空当前的事件队列， 开始调用下一次事件队列</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">finish</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 路由改变， 或者是调用start方法</span></span><br><span class=\"line\">    <span class=\"comment\">// /home, 正在加载appA的时候， route变为了/index</span></span><br><span class=\"line\">    <span class=\"comment\">// appA加载完成之后， 必须立马加载appB， 将appB放到changesQueue里面，</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnValue = <span class=\"title function_\">getMountedApps</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendings.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        pendings.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">success</span>(returnValue))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前的循环已经完成</span></span><br><span class=\"line\">    appChangesUnderway = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(changesQueue.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// backup就是当前循环中被推到事件队列里的事件， 这些事件交给下一次的invoke处理</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> backup = changesQueue;</span><br><span class=\"line\">        changesQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">invoke</span>(backup);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>singleSpa的主流程大概就是这样。接下来我们分析两个问题</p>\n<ol>\n<li>singleSpa是如何实现不刷新就可以切换多框架的应用的。</li>\n<li>singleSpa中都做了哪些优化</li>\n</ol>\n<h2 id=\"singleSp中的路由管理\"><a href=\"#singleSp中的路由管理\" class=\"headerlink\" title=\"singleSp中的路由管理\"></a>singleSp中的路由管理</h2><p>这里主要介绍一下singleSpa实现不刷新就可以切换多框架的应用的。<br>其实， vue或者react中的hash路由或者history路由，<br>都是基于浏览器的<strong>hashchange</strong>和<strong>popstate</strong>事件来做的(pushState, replaceState)，<br>所以在singleSpa中， 对这几个事件进行了拦截。 当路由改变的时候，<br>优先触发singleSpa的切换应用方法(invoke)，<br>之后在执行Vue或者react等其他应用的路由方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; invoke &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./invoke&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">HIJACK_EVENTS_NAME</span> = <span class=\"regexp\">/^(hashchange|popstate)$/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">EVENT_POOL</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">hashchange</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">popstate</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reroute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">invoke</span>([], <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;hashchange&#x27;</span>, reroute);</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;popstate&#x27;</span>, reroute);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalAddEventListener = <span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalRemoveEventListener = <span class=\"variable language_\">window</span>.<span class=\"property\">removeEventListener</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只针对性的拦截:hashchange&amp;popstate 这两种</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span> = <span class=\"keyword\">function</span>(<span class=\"params\">eventName, handler, </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eventName &amp;&amp; <span class=\"variable constant_\">HIJACK_EVENTS_NAME</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">eventName</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable constant_\">EVENT_POOL</span>[eventName].<span class=\"title function_\">indexOf</span>(handler) === -<span class=\"number\">1</span> &amp;&amp; <span class=\"variable constant_\">EVENT_POOL</span>[eventName].<span class=\"title function_\">push</span>(handler)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        originalAddEventListener.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">removeEventListener</span> = <span class=\"keyword\">function</span>(<span class=\"params\">eventName, handler, </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eventName &amp;&amp; <span class=\"variable constant_\">HIJACK_EVENTS_NAME</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">eventName</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> events = <span class=\"variable constant_\">EVENT_POOL</span>[eventName]</span><br><span class=\"line\">        events.<span class=\"title function_\">indexOf</span>(handler) &gt; -<span class=\"number\">1</span> &amp;&amp; </span><br><span class=\"line\">        (<span class=\"variable constant_\">EVENT_POOL</span>[eventName] = events.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn !== handler))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        originalRemoveEventListener.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">window</span> , <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mokePopStateEvent</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PopStateEvent</span>(<span class=\"string\">&#x27;popstate&#x27;</span>, &#123; state &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalPushState = <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">pushState</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalReplaceState = <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">replaceState</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">pushState</span> = <span class=\"keyword\">function</span>(<span class=\"params\">state, title, url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = originalPushState.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reroute</span>(<span class=\"title function_\">mokePopStateEvent</span>(state));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">replaceState</span> = <span class=\"keyword\">function</span>(<span class=\"params\">state, title, url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = originalReplaceState.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reroute</span>(<span class=\"title function_\">mokePopStateEvent</span>(state));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">callCaptureEvents</span>(<span class=\"params\">eventsArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!eventsArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(eventsArgs)) &#123;</span><br><span class=\"line\">        eventsArgs = [eventsArgs]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = eventsArgs[<span class=\"number\">0</span>].<span class=\"property\">history</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"variable constant_\">EVENT_POOL</span>[name] || <span class=\"variable constant_\">EVENT_POOL</span>[name].<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable constant_\">EVENT_POOL</span>[name].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> &#123;</span><br><span class=\"line\">        handler.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, eventsArgs)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Single-spa中还做了哪些优化\"><a href=\"#Single-spa中还做了哪些优化\" class=\"headerlink\" title=\"Single-spa中还做了哪些优化\"></a>Single-spa中还做了哪些优化</h2><p>比如说应用超时处理等</p>\n<p>singleSpa中对每个应用状态的切换都做了超时处理， 当应用切换超时的时候，可以自定义操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">TIMEOUTS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">bootstrap</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">milliseconds</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        <span class=\"attr\">rejectWhenTimeout</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mount</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">milliseconds</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        <span class=\"attr\">rejectWhenTimeout</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">unmount</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">milliseconds</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        <span class=\"attr\">rejectWhenTimeout</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">reasonableTime</span>(<span class=\"params\">lifecyclePromise, description, timeout</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> finished = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        lifecyclePromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            finished = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            finished = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(finished) &#123; <span class=\"keyword\">return</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timeout.<span class=\"property\">rejectWhenTimeout</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"string\">`<span class=\"subst\">$&#123;description&#125;</span>`</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout but waiting&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, timeout.<span class=\"property\">milliseconds</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">ensureTimeout</span>(<span class=\"params\">timeouts = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...<span class=\"variable constant_\">TIMEOUTS</span>,</span><br><span class=\"line\">        ...timeouts</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>vue和react切换的区别<br>Vue 2.x的dom挂载，采取的是 <strong>覆盖Dom挂载</strong> 的方式。例如，组件要挂载到<code>#app</code>上，那么它会用组件覆盖掉<code>#app</code>元素。<br>但是React&#x2F;Angular不同，它们的挂载方式是在目标挂载元素的内部<code>添加元素</code>，而不是直接覆盖掉。 例如组件要挂载到<code>#app</code>上，那么他会在<code>#app</code>内部挂载组件，<code>#app</code>还存在。<br>这样就造成了一个问题，当我从 vue子项目 &#x3D;&gt; react项目 &#x3D;&gt; vue子项目时，就会找不到要挂载的dom元素，从而抛出错误,不过可以在vue手动拼<code>#app</code>。</p>\n","excerpt":"","more":"<h2 id=\"single-spa主流程解析\"><a href=\"#single-spa主流程解析\" class=\"headerlink\" title=\"single-spa主流程解析\"></a>single-spa主流程解析</h2><p>首先， 要明确两个点：</p>\n<p>第一, single-spa是通过event-loop来控制每个应用之间的状态切换的（invoke函数）</p>\n<p>第二, single-spa是就像一个状态机，通过给应用设置各种状态， 来管理应用</p>\n<p><img src=\"/blog/images/singleSpa/1.png\" alt=\"主流程\"></p>\n<p>接下来， 我们来看一下single-spa框架的主流程是</p>\n<ul>\n<li><p>首先，将路由改变需要切换的app或者用户用户手动调起的app包装后， 统一push到事件队列里面</p>\n</li>\n<li><p>如果容器应用没有启动， 那么加载需要加载的app。加载成功之后调用finish方法， 清空当前的执行栈</p>\n</li>\n<li><p>如果容器已经启动，切换app的时候，卸载不需要的app，加载需要的app，挂载需要的app。 完成之后</p>\n<p>清空当前的执行栈。</p>\n</li>\n<li><p>如果过程中，有路由改变等事件， 需要切换app的时候， 将它放入到下一个执行栈中</p>\n</li>\n</ul>\n<h2 id=\"singleSpa中的状态机\"><a href=\"#singleSpa中的状态机\" class=\"headerlink\" title=\"singleSpa中的状态机\"></a>singleSpa中的状态机</h2><p>我们先来熟悉一下single-spa中应用的各种状态</p>\n<p><img src=\"/blog/images/singleSpa/state.png\" alt=\"各种状态\"></p>\n<ul>\n<li>默认为NOT_LOAD</li>\n<li>LOAD:   开始加载应用</li>\n<li>NOTBOOTSTRAP:  加载成功未启动</li>\n<li>BOOTSTRAPING: 开始挂载&#x2F;启动， 执行bootstrap生命周期， 只执行一次</li>\n<li>NOT_MOUNTED：BOOTSTRAP生命周期函数执行完成(成功)</li>\n<li>MOUNTING: 开始执行mount生命周期函数</li>\n<li>MOUNTED:  app挂载成功， mount生命周期函数执行成功， 可以执行Vue的$mount()或ReactDOM的render()</li>\n<li>UNMOUNTING: unmount生命周期函数执行，执行 Vue的$destory()或ReactDOM的unmountComponentAtNode()。</li>\n<li>SKIP_BECAUSE_BROKEN： 状态改变出错</li>\n<li>LOAD_ERROR： 一般是用户提供的信息有误，导致加载出错</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">NOT_LOADED</span> = <span class=\"string\">&#x27;NOT_LOADED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span> = <span class=\"string\">&#x27;SKIP_BECAUSE_BROKEN&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOAD_ERROR</span> = <span class=\"string\">&#x27;LOAD_ERROR&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOAD_SOURCE_CODE</span> = <span class=\"string\">&#x27;LOAD_SOURCE_CODE&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">NOT_BOOTSTRAP</span> = <span class=\"string\">&#x27;NOT_BOOTSTRAP&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">BOOTSTRAPPING</span> = <span class=\"string\">&#x27;BOOTSTRAPPING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">NOT_MOUNTED</span> = <span class=\"string\">&#x27;NOT_MOUNTED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">MOUNTED</span> = <span class=\"string\">&#x27;MOUNTED&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">MOUNTING</span> = <span class=\"string\">&#x27;MOUNTING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">UNMOUNTING</span> = <span class=\"string\">&#x27;UNMOUNTING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">UPDATING</span> = <span class=\"string\">&#x27;UPDATING&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import &#123; NOT_LOADED, notLoadError, notSkip, isntLoaded, shouldBeActivity &#125; from &#x27;./appsHelper&#x27;;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">notSkip</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">notLoadError</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">LOAD_ERROR</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isntLoaded</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> === <span class=\"variable constant_\">NOT_LOADED</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isLoaded</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">NOT_LOADED</span> &amp;&amp; app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span> &amp;&amp; app.<span class=\"property\">status</span> !== <span class=\"variable constant_\">LOAD_ERROR</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isActive</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"property\">status</span> === <span class=\"variable constant_\">MOUNTED</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isntActive</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"title function_\">isActive</span> (app)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">shouldBeActivity</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> app.<span class=\"title function_\">activityWhen</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        app.<span class=\"property\">status</span> = <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">shouldntBeActivity</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !app.<span class=\"title function_\">activityWhen</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        app.<span class=\"property\">status</span> = <span class=\"variable constant_\">SKIP_BECAUSE_BROKEN</span>;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>需要加载的app</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取需要被加载的app</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 不是LOAD_ERROR，是NOT_LOADED 同时是应该被加载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAppsToLoad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(notSkip).<span class=\"title function_\">filter</span>(notLoadError).<span class=\"title function_\">filter</span>(isntLoaded).<span class=\"title function_\">filter</span>(shouldBeActivity)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取需要可以被挂载的app</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前app 的状态不是SKIP_BECAUSE_BROKEN, 已经加载过，没有被激活， 同时是应该挂载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAppsTomount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(notSkip).<span class=\"title function_\">filter</span>(isLoaded).<span class=\"title function_\">filter</span>(isntActive).<span class=\"title function_\">filter</span>(shouldBeActivity)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取需要待被挂载的app</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAppsToUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(notSkip).<span class=\"title function_\">filter</span>(isActive).<span class=\"title function_\">filter</span>(shouldntBeActivity)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 获取当前已经挂载的app</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMountedApps</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">isActive</span>(app)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"整个流程\"><a href=\"#整个流程\" class=\"headerlink\" title=\"整个流程\"></a>整个流程</h2><ul>\n<li><p>首次加载，用户通过registerApplication注册应用, 这里是将所有注册的app收集起来，后面会通过各种状态筛选需要的app。 最后调用invoke函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 注册App</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; appName 要注册的app的名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function: Promise | Object</span>&#125; loadFunction app异步加载函数， 或者app的内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function: boolean</span>&#125; activityWhen  判断该app应该何时启动</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; customProps  自定义参数配置</span></span><br><span class=\"line\"><span class=\"comment\"> * return Promise</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">APPS</span> = []</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">registerApplication</span>(<span class=\"params\">appName, loadFunction, activityWhen, customProps = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断参数是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!appName || <span class=\"keyword\">typeof</span> appName !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;appName不可以是一个空字符串&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!loadFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;loadFunction must be a function or object&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> loadFunction !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        loadFunction = <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(loadFunction)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> activityWhen !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;activityWhen must be a function&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable constant_\">APPS</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: appName,</span><br><span class=\"line\">        loadFunction,</span><br><span class=\"line\">        activityWhen,</span><br><span class=\"line\">        customProps,</span><br><span class=\"line\">        <span class=\"attr\">status</span>: <span class=\"variable constant_\">NOT_LOADED</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invoke</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>invoke函数主要就是控制应用的状态, 同时控制当前event-loop的队列。 如果当前event-loop没有处理完成， 那么将需要被操作的app放入到下一次的event-loop中 同时判断容器应用有没有被启动， 如果启动， 那么调用performAppChanges切换应用 如果没有启动， 那么开始加载需要被加载的应用</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认没有进行event-loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> appChanges = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> changesQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 控制应用的状态，同时控制当前event-loop的队列</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pendings 当前事件队列</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; eventArgs 路由切换的参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">invoke</span>(<span class=\"params\">pendings = [], eventArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先检查appChanges有没有在做event-loop， 如果正在做event-loop， 将当前app放入到事件队列里面等待</span></span><br><span class=\"line\">    <span class=\"comment\">// 事件队列不存储app的信息， 所有的app都会放入到APPS的全局状态中，每次先获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(appChangesUnderway) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            changesQueue.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">success</span>: resolve,</span><br><span class=\"line\">                <span class=\"attr\">failure</span>: reject,</span><br><span class=\"line\">                eventArgs</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示当前正在进行event-loop</span></span><br><span class=\"line\">    appChangesUnderway = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里是整个SingleSpa的状态， 判断容器应用是否已启动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">isStarted</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">performAppChanges</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取需要被加载的app</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">loadApps</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>performAppChanges， 切换应用状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@function</span> 如果应用已经启动，那么卸载不需要的app，加载需要的app，挂载需要的app</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performAppChanges</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先卸载不需要的app， 这里是放到promise中， 开始执行</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> unmountPromise = <span class=\"title function_\">getAppsToUnmount</span>().<span class=\"title function_\">map</span>(toUnmountPromise);</span><br><span class=\"line\">    unmountPromise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(unmountPromise);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// will load app --&gt; NOT_MOUNTED</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> loadApps = <span class=\"title function_\">getAppsToLoad</span>()</span><br><span class=\"line\">    loadApps = loadApps.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先去加载， 加载完成之后调用bootstrap, 然后卸载，然后加载</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">toLoadPromise</span>(app).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">toBootstrapPromise</span>(app)</span><br><span class=\"line\">                .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> unmountPromise)</span><br><span class=\"line\">                .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span>  <span class=\"title function_\">toMountPromise</span>(app));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// will mount app --&gt; NOT_MOUNTED</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mountApps = <span class=\"title function_\">getAppsTomount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 针对load和mount的app做去重， 这里看一下， 为什么要去重</span></span><br><span class=\"line\">    mountApps = mountApps.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> loadApps.<span class=\"title function_\">indexOf</span>(app) === -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mountApps = mountApps.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">toBootstrapPromise</span>(app)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> unmountPromise)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">toMountPromise</span>(app))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 卸载没有问题的时候， 进行挂载新的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unmountPromise.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> allPromises = loadApps.<span class=\"title function_\">concat</span>(mountApps);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(allPromises.<span class=\"title function_\">map</span>(toMountPromise)).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callAllCaptureEvents</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">finish</span>();</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当一个promise状态已经改变的时候， 再次调用的时候不会在改变</span></span><br><span class=\"line\">        pendings.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">failure</span>(e));</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callAllCaptureEvents</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载完应用或者切换应用完成的时候， 调用finish方法清空当前的事件队列， 开始调用下一次事件队列</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">finish</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 路由改变， 或者是调用start方法</span></span><br><span class=\"line\">    <span class=\"comment\">// /home, 正在加载appA的时候， route变为了/index</span></span><br><span class=\"line\">    <span class=\"comment\">// appA加载完成之后， 必须立马加载appB， 将appB放到changesQueue里面，</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnValue = <span class=\"title function_\">getMountedApps</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendings.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        pendings.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">success</span>(returnValue))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前的循环已经完成</span></span><br><span class=\"line\">    appChangesUnderway = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(changesQueue.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// backup就是当前循环中被推到事件队列里的事件， 这些事件交给下一次的invoke处理</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> backup = changesQueue;</span><br><span class=\"line\">        changesQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">invoke</span>(backup);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>singleSpa的主流程大概就是这样。接下来我们分析两个问题</p>\n<ol>\n<li>singleSpa是如何实现不刷新就可以切换多框架的应用的。</li>\n<li>singleSpa中都做了哪些优化</li>\n</ol>\n<h2 id=\"singleSp中的路由管理\"><a href=\"#singleSp中的路由管理\" class=\"headerlink\" title=\"singleSp中的路由管理\"></a>singleSp中的路由管理</h2><p>这里主要介绍一下singleSpa实现不刷新就可以切换多框架的应用的。<br>其实， vue或者react中的hash路由或者history路由，<br>都是基于浏览器的<strong>hashchange</strong>和<strong>popstate</strong>事件来做的(pushState, replaceState)，<br>所以在singleSpa中， 对这几个事件进行了拦截。 当路由改变的时候，<br>优先触发singleSpa的切换应用方法(invoke)，<br>之后在执行Vue或者react等其他应用的路由方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; invoke &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./invoke&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">HIJACK_EVENTS_NAME</span> = <span class=\"regexp\">/^(hashchange|popstate)$/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">EVENT_POOL</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">hashchange</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">popstate</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reroute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">invoke</span>([], <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;hashchange&#x27;</span>, reroute);</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;popstate&#x27;</span>, reroute);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalAddEventListener = <span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalRemoveEventListener = <span class=\"variable language_\">window</span>.<span class=\"property\">removeEventListener</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只针对性的拦截:hashchange&amp;popstate 这两种</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span> = <span class=\"keyword\">function</span>(<span class=\"params\">eventName, handler, </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eventName &amp;&amp; <span class=\"variable constant_\">HIJACK_EVENTS_NAME</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">eventName</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable constant_\">EVENT_POOL</span>[eventName].<span class=\"title function_\">indexOf</span>(handler) === -<span class=\"number\">1</span> &amp;&amp; <span class=\"variable constant_\">EVENT_POOL</span>[eventName].<span class=\"title function_\">push</span>(handler)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        originalAddEventListener.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">removeEventListener</span> = <span class=\"keyword\">function</span>(<span class=\"params\">eventName, handler, </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eventName &amp;&amp; <span class=\"variable constant_\">HIJACK_EVENTS_NAME</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">eventName</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> events = <span class=\"variable constant_\">EVENT_POOL</span>[eventName]</span><br><span class=\"line\">        events.<span class=\"title function_\">indexOf</span>(handler) &gt; -<span class=\"number\">1</span> &amp;&amp; </span><br><span class=\"line\">        (<span class=\"variable constant_\">EVENT_POOL</span>[eventName] = events.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn !== handler))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        originalRemoveEventListener.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">window</span> , <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mokePopStateEvent</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PopStateEvent</span>(<span class=\"string\">&#x27;popstate&#x27;</span>, &#123; state &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalPushState = <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">pushState</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalReplaceState = <span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">replaceState</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">pushState</span> = <span class=\"keyword\">function</span>(<span class=\"params\">state, title, url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = originalPushState.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reroute</span>(<span class=\"title function_\">mokePopStateEvent</span>(state));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"property\">replaceState</span> = <span class=\"keyword\">function</span>(<span class=\"params\">state, title, url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = originalReplaceState.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reroute</span>(<span class=\"title function_\">mokePopStateEvent</span>(state));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">callCaptureEvents</span>(<span class=\"params\">eventsArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!eventsArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(eventsArgs)) &#123;</span><br><span class=\"line\">        eventsArgs = [eventsArgs]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = eventsArgs[<span class=\"number\">0</span>].<span class=\"property\">history</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"variable constant_\">EVENT_POOL</span>[name] || <span class=\"variable constant_\">EVENT_POOL</span>[name].<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable constant_\">EVENT_POOL</span>[name].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> &#123;</span><br><span class=\"line\">        handler.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, eventsArgs)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Single-spa中还做了哪些优化\"><a href=\"#Single-spa中还做了哪些优化\" class=\"headerlink\" title=\"Single-spa中还做了哪些优化\"></a>Single-spa中还做了哪些优化</h2><p>比如说应用超时处理等</p>\n<p>singleSpa中对每个应用状态的切换都做了超时处理， 当应用切换超时的时候，可以自定义操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">TIMEOUTS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">bootstrap</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">milliseconds</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        <span class=\"attr\">rejectWhenTimeout</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mount</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">milliseconds</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        <span class=\"attr\">rejectWhenTimeout</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">unmount</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">milliseconds</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        <span class=\"attr\">rejectWhenTimeout</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">reasonableTime</span>(<span class=\"params\">lifecyclePromise, description, timeout</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> finished = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        lifecyclePromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            finished = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            finished = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(finished) &#123; <span class=\"keyword\">return</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timeout.<span class=\"property\">rejectWhenTimeout</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"string\">`<span class=\"subst\">$&#123;description&#125;</span>`</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout but waiting&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, timeout.<span class=\"property\">milliseconds</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">ensureTimeout</span>(<span class=\"params\">timeouts = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...<span class=\"variable constant_\">TIMEOUTS</span>,</span><br><span class=\"line\">        ...timeouts</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>vue和react切换的区别<br>Vue 2.x的dom挂载，采取的是 <strong>覆盖Dom挂载</strong> 的方式。例如，组件要挂载到<code>#app</code>上，那么它会用组件覆盖掉<code>#app</code>元素。<br>但是React&#x2F;Angular不同，它们的挂载方式是在目标挂载元素的内部<code>添加元素</code>，而不是直接覆盖掉。 例如组件要挂载到<code>#app</code>上，那么他会在<code>#app</code>内部挂载组件，<code>#app</code>还存在。<br>这样就造成了一个问题，当我从 vue子项目 &#x3D;&gt; react项目 &#x3D;&gt; vue子项目时，就会找不到要挂载的dom元素，从而抛出错误,不过可以在vue手动拼<code>#app</code>。</p>\n"},{"title":"Code Review工具推荐以及使用报告","slug":"Worker/Code Review工具推荐以及使用报告","Keywords":["Code Review","使用报告","工具推荐"],"date":"2018-11-11T16:00:00.000Z","_content":"\n随之团队的扩大，统一编码规范，提高编码质量，变得尤为重要。代码审查作为可以有效提高代码质量的方式之一,有必要在公司推行代码审查制度.\n让团队养成代码审查的习惯,提高代码质量,提前规避不必要的问题. \n\n为了更加高效的代码审核,需要一款代码审查工具.所以才有了这份使用报告.\n\n下面是我在使用中,尝试使用的一些工具.以及一些使用上的评价与总结.\n\n### 1) [CodeStriker](http://codestriker.sourceforge.net/index.html \"best code review tools for programmers \")\n\nCodeStriker免费和开源的web应用程序,可以帮助开发人员基于web的代码审查。开发者canensures问题,评论和决策是记录在一个数据库,并提供一个舒适的工作空间实际执行代码检查。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png?resize=600%2C480)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: CodeStriker 对于一个代码审查工具来说,功能上已经可以基本满足.但是因为开发时间太过久远,已经很长时间没有人在维护了,而且UI比较有历史的味道.\n\n### 2) [RhodeCode](https://rhodecode.com/ \"best code review tools for programmers \")\n\nRhodeCode也是一个很好的工具,回顾你的代码并找出代码中的bug和问题并删除后检查代码。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png)\n\n- 价格: 社区版本免费,企业版本收费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: RhodeCode在使用使用过程中,还是比较优秀的.工具的安装部署使用docker也比较方便.使用上比较顺畅,可以作为使用的备选软件.\n\n### 3) [Code Brag](http://codebrag.com/ \"best code review tools for programmers \")\n\nCodebrag是一个简单的和轻量级的工具,代码审查,让这一过程为您的团队工作。它有助于解决一些问题像非阻塞的代码评审,智能电子邮件通知,内联注释,喜欢得多。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★★\n- 易学程度: ★★★★★\n\n> 总结: Codebrag 是一款开源工具,安装起来不算难.也有一定程度上的社交属性.在使用期间官网在国内打不开,软件的安装资源不是很好获取.\n\n### 4) [Phabricator](http://phabricator.org/ \"best code review tools for programmers \")\n\nPhabricator是一个开源软件和web应用程序包括代码评审,主持GIT / Hg / SVN,发现错误时,浏览源代码和审计等\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★\n- 易学程度: ★\n\n> 总结: Phabricator 是一款非常强大的工具,是facebook做的.安装是在太难,网上的安装使用文档就有140多页.使用的学习成本也需要一定的时间. \n\n### 5) [Codifferous](https://codifferous.com/ \"best code review tools for programmers \")\n\n这是更快的代码评审服务,Codifferous是免费的代码审查工具。Codifferous便于评审代码与您的团队,无论你住在哪里当你工作。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: Codifferous 官网国内打不开,翻墙体验过demo之后,工具比较简单,用起来没有什么问题.也没有太多优点.\n\n### 6) [Getbarkeep](http://getbarkeep.org/ \"best code review tools for programmers \")\n\nBarkeep 是“友好的代码评审系统”——一种快速、有趣的方式检查代码。工程组织可以用它来保持高质量栏。通过它你可以看到提交任何Git存储库,看到差别,写评论,这些评论电邮给你的提交者。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: Barkeep 是一款开源工具,UI简洁,没有太多亮点也没有太多缺点.官网不好打开.资源获取的不是很容易.\n\n### 7) [Crucible](https://www.atlassian.com/software/crucible/overview \"best code review tools for programmers \")\n\nCrucible 是另一个最受欢迎的代码复查工具对于开发人员来说,它提供评审代码,讨论修改,并确定缺陷与坩埚的灵活评估工作流。它的代码评审容易颠覆,CVS,必然等等。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png)\n\n- 价格: 收费\n- UI交互: ★★★★\n- 安装维护 :不需要安装\n- 易学程度: ★★★★\n\n> 总结: 大厂出品的工具,在使用了免费半之后,完全可以满足代码审查的需求.界面也比较漂亮,交互友好.官方在youtube上有出详细的英文使用教程.\n\n\n\n### 8) [Code Review Tool](http://codereviewtool.com/ \"best code review tools for programmers \")\n\nCode Review Tool 允许团队成员评审代码协作和高效的方式通过移除大部分的开销定期正式的代码检查。它提供了所有正式的代码检查的好处,需要大大减少时间和精力而正式的代码检查。它同时支持正式和轻量级代码评审流程。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png)\n\n- 价格: 收费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 这么丑的软件居然是个收费软件.而且还不便宜.\n\n\n### 9) [Malevich](http://malevich.codeplex.com/ \"best code review tools for programmers \")\n\n审查代码马列 Malevich 的确实是很容易的。评论者可以看到原始的和在浏览器中文件的新版本。评论一行代码,他或她简单地点击这条线,并开始打字。提交评论让他们看到请求的代码复查的人,以及所有其他评论者。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 不能审查git仓库的代码\n\n### 10) [SmartBear](http://smartbear.com/product/collaborator/overview/ \"best code review tools for programmers \")\n\nCollaborator 是一个代码审查工具,可以帮助开发、测试和管理团队共同努力,生成高质量的代码。它允许团队同行评审代码、用户故事和测试计划在一个透明的,协作框架——立即使整个团队保持速度对代码所做的更改。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png)\n\n- 价格: 收费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 代码审查绰绰有余,很多大厂都在使用.体验了demo之后感觉是一款非常优秀的工具.\n\n### 11) [Veracode](http://www.veracode.com/security/code-review \"best code review tools for programmers \")\n\nCode review 是一个考试的计算机源代码。它的目的是找到并修复错误引入应用程序在开发阶段,提升软件的整体质量和开发人员的技能。代码评审等各种形式的程序做结对编程,非正式的次数,和正式的检查。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png)\n\n- 价格: 收费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n### 12) [Gerrit](https://code.google.com/p/gerrit/ \"best code review tools for programmers \")\n\nGerrit 是一个基于web的代码评审系统,促进在线代码评审项目使用Git版本控制系统。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 这是google的一款代码审查工具,UI已经是上古风格了.\n\n### 13) [Review Assistant](https://visualstudiogallery.msdn.microsoft.com/9ef817b4-2c6d-4213-8b08-5be48f9d91b9 \"best code review tools for programmers \")\n\nReview assistant 很简单和更好的代码复查工具visual studio。\n\n1)添加你的评论在审查级别,或特定源代码块或行。  \n2)初始化代码与您的团队成员的讨论没有预定的会议。  \n3)标记的评论和缺陷需要固定。  \n4)评论显示在代码编辑器中。  \n5)即时切换检查代码和注释。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png)\n\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 需要结合开发工具,不适用我们现在的状况.\n\n### 14) [Review Board](https://www.reviewboard.org/ \"best code review tools for programmers \")\n\nReview board 是更好的代码复查工具程序员节省时间,金钱和理智。你的代码是syntax-highlighted,更快的阅读。我们将向您展示功能一行,替换文本内改变了什么,等等。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: UI有点复古也有点小清新,使用了一下,功能是够用了的,可以作为备选.\n\n### 15) [Peer Review Plugin](http://trac-hacks.org/wiki/PeerReviewPlugin \"best code review tools for programmers \")\n\n这个插件的目标是消除需要耗费时间代码评审会议通过给开发人员评审代码的能力在自己的时间在一个用户友好的网络环境。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 不能审查git仓库的代码,不考虑使用.\n\n### 16) [Codereview](https://codereview.appspot.com/ \"best code review tools for programmers \")\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 不能审查git仓库的代码,不考虑使用.\n\n### 17) [Code Reviewer](https://codereviewer.org/ \"best code review tools for programmers \")\n\nCodeReviewer 是免费的,简单,易于部署和使用代码审查工具从SmartBear的公司发明了合作者,该行业的第一个商业代码审查工具。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 但是界面已经比较上古,对git支持不是很好\n\n### 18) [Code Analysis Tool](http://www.castsoftware.com/products/code-analysis-tools \"best code review tools for programmers \")\n\nCAST code 把代码分析技术是针对解决两个基本问题。首先,大多数现代IT系统是由成千上万的组件,由多个团队和许多开发人员。测量软件质量在跨多个技术,这些系统需要仔细校准版本和明确的应用程序边界的识别\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png)\n\n- 价格: 收费\n- UI交互: ★★★\n- 安装维护 :★★★\n- 易学程度: ★\n\n> 总结: 工具太过复杂,不适合在公司内部推广\n\n### 19) [jArchitect](http://www.jarchitect.com/ \"best code review tools for programmers \")\n\nJArchitect 简化了管理一个复杂的Java代码库。分析代码结构,可以指定设计规则,做有效的代码审查和主进化通过比较不同版本的代码。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png)\n\n- 价格: 收费\n- UI交互: ★★★\n- 安装维护 :★★★\n- 易学程度: ★\n\n> 总结: 界面比较上古,文档完善,很多大公司在使用.\n\n### 20) [Reviewable](https://reviewable.io/ \"best code review tools for programmers \")\n\nReviewales 是新的代码审查工具,它有助于改善与语法突出显示的代码质量,发现bug /问题,使代码更好,干净的界面,定制代码字体和许多更多。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png)\n\n- 价格: 社区版本免费\n- UI交互: ★★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: 交互比较友好,安装使用docker也不麻烦.社区版本是免费的.可以考虑使用该工具\n\n  \n### 21) Gitlab\n\nGitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,支持codereview.\n\n- 价格: 社区版本免费\n- UI交互: ★★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: 目前公司已经在使用该工具,如果在该工具的基础上进行拓展.是一款不错的代码审查工具.对于团队的学习成本也比较低.比较容易推广.\n\n\n### 21) Upsource\n\nUpsource是jetbrains出品的code review工具。\n\n- 价格: 收费\n- UI交互: ★★★★★\n- 安装维护 :★★★★\n- 易学程度: ★★★★★\n\n> 总结: 是目前发现最好的代码审查工具,基本上满足代码审查平台的所有需求.免费版本只能注册8个用户.\n\n\n\n[参考链接: 20最佳代码审查工具-专门为开发人员准备](http://www.bubuko.com/infodetail-730801.html)\n","source":"_posts/Worker/Code Review工具推荐以及使用报告.md","raw":"---\ntitle: Code Review工具推荐以及使用报告\ntags: \n- Code Review\nslug: cf2c83a\nKeywords: \n  - Code Review\n  - 使用报告\n  - 工具推荐\ndate: 2018-11-12 00:00:00\n---\n\n随之团队的扩大，统一编码规范，提高编码质量，变得尤为重要。代码审查作为可以有效提高代码质量的方式之一,有必要在公司推行代码审查制度.\n让团队养成代码审查的习惯,提高代码质量,提前规避不必要的问题. \n\n为了更加高效的代码审核,需要一款代码审查工具.所以才有了这份使用报告.\n\n下面是我在使用中,尝试使用的一些工具.以及一些使用上的评价与总结.\n\n### 1) [CodeStriker](http://codestriker.sourceforge.net/index.html \"best code review tools for programmers \")\n\nCodeStriker免费和开源的web应用程序,可以帮助开发人员基于web的代码审查。开发者canensures问题,评论和决策是记录在一个数据库,并提供一个舒适的工作空间实际执行代码检查。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png?resize=600%2C480)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: CodeStriker 对于一个代码审查工具来说,功能上已经可以基本满足.但是因为开发时间太过久远,已经很长时间没有人在维护了,而且UI比较有历史的味道.\n\n### 2) [RhodeCode](https://rhodecode.com/ \"best code review tools for programmers \")\n\nRhodeCode也是一个很好的工具,回顾你的代码并找出代码中的bug和问题并删除后检查代码。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png)\n\n- 价格: 社区版本免费,企业版本收费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: RhodeCode在使用使用过程中,还是比较优秀的.工具的安装部署使用docker也比较方便.使用上比较顺畅,可以作为使用的备选软件.\n\n### 3) [Code Brag](http://codebrag.com/ \"best code review tools for programmers \")\n\nCodebrag是一个简单的和轻量级的工具,代码审查,让这一过程为您的团队工作。它有助于解决一些问题像非阻塞的代码评审,智能电子邮件通知,内联注释,喜欢得多。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★★\n- 易学程度: ★★★★★\n\n> 总结: Codebrag 是一款开源工具,安装起来不算难.也有一定程度上的社交属性.在使用期间官网在国内打不开,软件的安装资源不是很好获取.\n\n### 4) [Phabricator](http://phabricator.org/ \"best code review tools for programmers \")\n\nPhabricator是一个开源软件和web应用程序包括代码评审,主持GIT / Hg / SVN,发现错误时,浏览源代码和审计等\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★\n- 易学程度: ★\n\n> 总结: Phabricator 是一款非常强大的工具,是facebook做的.安装是在太难,网上的安装使用文档就有140多页.使用的学习成本也需要一定的时间. \n\n### 5) [Codifferous](https://codifferous.com/ \"best code review tools for programmers \")\n\n这是更快的代码评审服务,Codifferous是免费的代码审查工具。Codifferous便于评审代码与您的团队,无论你住在哪里当你工作。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: Codifferous 官网国内打不开,翻墙体验过demo之后,工具比较简单,用起来没有什么问题.也没有太多优点.\n\n### 6) [Getbarkeep](http://getbarkeep.org/ \"best code review tools for programmers \")\n\nBarkeep 是“友好的代码评审系统”——一种快速、有趣的方式检查代码。工程组织可以用它来保持高质量栏。通过它你可以看到提交任何Git存储库,看到差别,写评论,这些评论电邮给你的提交者。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: Barkeep 是一款开源工具,UI简洁,没有太多亮点也没有太多缺点.官网不好打开.资源获取的不是很容易.\n\n### 7) [Crucible](https://www.atlassian.com/software/crucible/overview \"best code review tools for programmers \")\n\nCrucible 是另一个最受欢迎的代码复查工具对于开发人员来说,它提供评审代码,讨论修改,并确定缺陷与坩埚的灵活评估工作流。它的代码评审容易颠覆,CVS,必然等等。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png)\n\n- 价格: 收费\n- UI交互: ★★★★\n- 安装维护 :不需要安装\n- 易学程度: ★★★★\n\n> 总结: 大厂出品的工具,在使用了免费半之后,完全可以满足代码审查的需求.界面也比较漂亮,交互友好.官方在youtube上有出详细的英文使用教程.\n\n\n\n### 8) [Code Review Tool](http://codereviewtool.com/ \"best code review tools for programmers \")\n\nCode Review Tool 允许团队成员评审代码协作和高效的方式通过移除大部分的开销定期正式的代码检查。它提供了所有正式的代码检查的好处,需要大大减少时间和精力而正式的代码检查。它同时支持正式和轻量级代码评审流程。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png)\n\n- 价格: 收费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 这么丑的软件居然是个收费软件.而且还不便宜.\n\n\n### 9) [Malevich](http://malevich.codeplex.com/ \"best code review tools for programmers \")\n\n审查代码马列 Malevich 的确实是很容易的。评论者可以看到原始的和在浏览器中文件的新版本。评论一行代码,他或她简单地点击这条线,并开始打字。提交评论让他们看到请求的代码复查的人,以及所有其他评论者。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 不能审查git仓库的代码\n\n### 10) [SmartBear](http://smartbear.com/product/collaborator/overview/ \"best code review tools for programmers \")\n\nCollaborator 是一个代码审查工具,可以帮助开发、测试和管理团队共同努力,生成高质量的代码。它允许团队同行评审代码、用户故事和测试计划在一个透明的,协作框架——立即使整个团队保持速度对代码所做的更改。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png)\n\n- 价格: 收费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 代码审查绰绰有余,很多大厂都在使用.体验了demo之后感觉是一款非常优秀的工具.\n\n### 11) [Veracode](http://www.veracode.com/security/code-review \"best code review tools for programmers \")\n\nCode review 是一个考试的计算机源代码。它的目的是找到并修复错误引入应用程序在开发阶段,提升软件的整体质量和开发人员的技能。代码评审等各种形式的程序做结对编程,非正式的次数,和正式的检查。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png)\n\n- 价格: 收费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n### 12) [Gerrit](https://code.google.com/p/gerrit/ \"best code review tools for programmers \")\n\nGerrit 是一个基于web的代码评审系统,促进在线代码评审项目使用Git版本控制系统。\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 这是google的一款代码审查工具,UI已经是上古风格了.\n\n### 13) [Review Assistant](https://visualstudiogallery.msdn.microsoft.com/9ef817b4-2c6d-4213-8b08-5be48f9d91b9 \"best code review tools for programmers \")\n\nReview assistant 很简单和更好的代码复查工具visual studio。\n\n1)添加你的评论在审查级别,或特定源代码块或行。  \n2)初始化代码与您的团队成员的讨论没有预定的会议。  \n3)标记的评论和缺陷需要固定。  \n4)评论显示在代码编辑器中。  \n5)即时切换检查代码和注释。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png)\n\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 需要结合开发工具,不适用我们现在的状况.\n\n### 14) [Review Board](https://www.reviewboard.org/ \"best code review tools for programmers \")\n\nReview board 是更好的代码复查工具程序员节省时间,金钱和理智。你的代码是syntax-highlighted,更快的阅读。我们将向您展示功能一行,替换文本内改变了什么,等等。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: UI有点复古也有点小清新,使用了一下,功能是够用了的,可以作为备选.\n\n### 15) [Peer Review Plugin](http://trac-hacks.org/wiki/PeerReviewPlugin \"best code review tools for programmers \")\n\n这个插件的目标是消除需要耗费时间代码评审会议通过给开发人员评审代码的能力在自己的时间在一个用户友好的网络环境。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png)\n\n- 价格: 免费\n- UI交互: ★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 不能审查git仓库的代码,不考虑使用.\n\n### 16) [Codereview](https://codereview.appspot.com/ \"best code review tools for programmers \")\n\n[![技术分享](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png?resize=600%2C375)](http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 不能审查git仓库的代码,不考虑使用.\n\n### 17) [Code Reviewer](https://codereviewer.org/ \"best code review tools for programmers \")\n\nCodeReviewer 是免费的,简单,易于部署和使用代码审查工具从SmartBear的公司发明了合作者,该行业的第一个商业代码审查工具。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png)\n\n- 价格: 免费\n- UI交互: ★\n- 安装维护 :★★★\n- 易学程度: ★★★★\n\n> 总结: 但是界面已经比较上古,对git支持不是很好\n\n### 18) [Code Analysis Tool](http://www.castsoftware.com/products/code-analysis-tools \"best code review tools for programmers \")\n\nCAST code 把代码分析技术是针对解决两个基本问题。首先,大多数现代IT系统是由成千上万的组件,由多个团队和许多开发人员。测量软件质量在跨多个技术,这些系统需要仔细校准版本和明确的应用程序边界的识别\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png)\n\n- 价格: 收费\n- UI交互: ★★★\n- 安装维护 :★★★\n- 易学程度: ★\n\n> 总结: 工具太过复杂,不适合在公司内部推广\n\n### 19) [jArchitect](http://www.jarchitect.com/ \"best code review tools for programmers \")\n\nJArchitect 简化了管理一个复杂的Java代码库。分析代码结构,可以指定设计规则,做有效的代码审查和主进化通过比较不同版本的代码。\n\n[![技术分享](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png?resize=600%2C375)](http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png)\n\n- 价格: 收费\n- UI交互: ★★★\n- 安装维护 :★★★\n- 易学程度: ★\n\n> 总结: 界面比较上古,文档完善,很多大公司在使用.\n\n### 20) [Reviewable](https://reviewable.io/ \"best code review tools for programmers \")\n\nReviewales 是新的代码审查工具,它有助于改善与语法突出显示的代码质量,发现bug /问题,使代码更好,干净的界面,定制代码字体和许多更多。\n\n[![技术分享](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png?resize=600%2C375)](http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png)\n\n- 价格: 社区版本免费\n- UI交互: ★★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: 交互比较友好,安装使用docker也不麻烦.社区版本是免费的.可以考虑使用该工具\n\n  \n### 21) Gitlab\n\nGitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,支持codereview.\n\n- 价格: 社区版本免费\n- UI交互: ★★★★★\n- 安装维护 :★★★\n- 易学程度: ★★★★★\n\n> 总结: 目前公司已经在使用该工具,如果在该工具的基础上进行拓展.是一款不错的代码审查工具.对于团队的学习成本也比较低.比较容易推广.\n\n\n### 21) Upsource\n\nUpsource是jetbrains出品的code review工具。\n\n- 价格: 收费\n- UI交互: ★★★★★\n- 安装维护 :★★★★\n- 易学程度: ★★★★★\n\n> 总结: 是目前发现最好的代码审查工具,基本上满足代码审查平台的所有需求.免费版本只能注册8个用户.\n\n\n\n[参考链接: 20最佳代码审查工具-专门为开发人员准备](http://www.bubuko.com/infodetail-730801.html)\n","published":1,"updated":"2024-10-09T00:58:24.562Z","_id":"cm215vevb003p7k9k22pz3wrz","comments":1,"layout":"post","photos":[],"content":"<p>随之团队的扩大，统一编码规范，提高编码质量，变得尤为重要。代码审查作为可以有效提高代码质量的方式之一,有必要在公司推行代码审查制度.<br>让团队养成代码审查的习惯,提高代码质量,提前规避不必要的问题. </p>\n<p>为了更加高效的代码审核,需要一款代码审查工具.所以才有了这份使用报告.</p>\n<p>下面是我在使用中,尝试使用的一些工具.以及一些使用上的评价与总结.</p>\n<h3 id=\"1-CodeStriker\"><a href=\"#1-CodeStriker\" class=\"headerlink\" title=\"1) CodeStriker\"></a>1) <a href=\"http://codestriker.sourceforge.net/index.html\" title=\"best code review tools for programmers \">CodeStriker</a></h3><p>CodeStriker免费和开源的web应用程序,可以帮助开发人员基于web的代码审查。开发者canensures问题,评论和决策是记录在一个数据库,并提供一个舒适的工作空间实际执行代码检查。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png?resize=600,480\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: CodeStriker 对于一个代码审查工具来说,功能上已经可以基本满足.但是因为开发时间太过久远,已经很长时间没有人在维护了,而且UI比较有历史的味道.</p>\n</blockquote>\n<h3 id=\"2-RhodeCode\"><a href=\"#2-RhodeCode\" class=\"headerlink\" title=\"2) RhodeCode\"></a>2) <a href=\"https://rhodecode.com/\" title=\"best code review tools for programmers \">RhodeCode</a></h3><p>RhodeCode也是一个很好的工具,回顾你的代码并找出代码中的bug和问题并删除后检查代码。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 社区版本免费,企业版本收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: RhodeCode在使用使用过程中,还是比较优秀的.工具的安装部署使用docker也比较方便.使用上比较顺畅,可以作为使用的备选软件.</p>\n</blockquote>\n<h3 id=\"3-Code-Brag\"><a href=\"#3-Code-Brag\" class=\"headerlink\" title=\"3) Code Brag\"></a>3) <a href=\"http://codebrag.com/\" title=\"best code review tools for programmers \">Code Brag</a></h3><p>Codebrag是一个简单的和轻量级的工具,代码审查,让这一过程为您的团队工作。它有助于解决一些问题像非阻塞的代码评审,智能电子邮件通知,内联注释,喜欢得多。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: Codebrag 是一款开源工具,安装起来不算难.也有一定程度上的社交属性.在使用期间官网在国内打不开,软件的安装资源不是很好获取.</p>\n</blockquote>\n<h3 id=\"4-Phabricator\"><a href=\"#4-Phabricator\" class=\"headerlink\" title=\"4) Phabricator\"></a>4) <a href=\"http://phabricator.org/\" title=\"best code review tools for programmers \">Phabricator</a></h3><p>Phabricator是一个开源软件和web应用程序包括代码评审,主持GIT &#x2F; Hg &#x2F; SVN,发现错误时,浏览源代码和审计等</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★</li>\n<li>易学程度: ★</li>\n</ul>\n<blockquote>\n<p>总结: Phabricator 是一款非常强大的工具,是facebook做的.安装是在太难,网上的安装使用文档就有140多页.使用的学习成本也需要一定的时间. </p>\n</blockquote>\n<h3 id=\"5-Codifferous\"><a href=\"#5-Codifferous\" class=\"headerlink\" title=\"5) Codifferous\"></a>5) <a href=\"https://codifferous.com/\" title=\"best code review tools for programmers \">Codifferous</a></h3><p>这是更快的代码评审服务,Codifferous是免费的代码审查工具。Codifferous便于评审代码与您的团队,无论你住在哪里当你工作。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: Codifferous 官网国内打不开,翻墙体验过demo之后,工具比较简单,用起来没有什么问题.也没有太多优点.</p>\n</blockquote>\n<h3 id=\"6-Getbarkeep\"><a href=\"#6-Getbarkeep\" class=\"headerlink\" title=\"6) Getbarkeep\"></a>6) <a href=\"http://getbarkeep.org/\" title=\"best code review tools for programmers \">Getbarkeep</a></h3><p>Barkeep 是“友好的代码评审系统”——一种快速、有趣的方式检查代码。工程组织可以用它来保持高质量栏。通过它你可以看到提交任何Git存储库,看到差别,写评论,这些评论电邮给你的提交者。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: Barkeep 是一款开源工具,UI简洁,没有太多亮点也没有太多缺点.官网不好打开.资源获取的不是很容易.</p>\n</blockquote>\n<h3 id=\"7-Crucible\"><a href=\"#7-Crucible\" class=\"headerlink\" title=\"7) Crucible\"></a>7) <a href=\"https://www.atlassian.com/software/crucible/overview\" title=\"best code review tools for programmers \">Crucible</a></h3><p>Crucible 是另一个最受欢迎的代码复查工具对于开发人员来说,它提供评审代码,讨论修改,并确定缺陷与坩埚的灵活评估工作流。它的代码评审容易颠覆,CVS,必然等等。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :不需要安装</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 大厂出品的工具,在使用了免费半之后,完全可以满足代码审查的需求.界面也比较漂亮,交互友好.官方在youtube上有出详细的英文使用教程.</p>\n</blockquote>\n<h3 id=\"8-Code-Review-Tool\"><a href=\"#8-Code-Review-Tool\" class=\"headerlink\" title=\"8) Code Review Tool\"></a>8) <a href=\"http://codereviewtool.com/\" title=\"best code review tools for programmers \">Code Review Tool</a></h3><p>Code Review Tool 允许团队成员评审代码协作和高效的方式通过移除大部分的开销定期正式的代码检查。它提供了所有正式的代码检查的好处,需要大大减少时间和精力而正式的代码检查。它同时支持正式和轻量级代码评审流程。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 这么丑的软件居然是个收费软件.而且还不便宜.</p>\n</blockquote>\n<h3 id=\"9-Malevich\"><a href=\"#9-Malevich\" class=\"headerlink\" title=\"9) Malevich\"></a>9) <a href=\"http://malevich.codeplex.com/\" title=\"best code review tools for programmers \">Malevich</a></h3><p>审查代码马列 Malevich 的确实是很容易的。评论者可以看到原始的和在浏览器中文件的新版本。评论一行代码,他或她简单地点击这条线,并开始打字。提交评论让他们看到请求的代码复查的人,以及所有其他评论者。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 不能审查git仓库的代码</p>\n</blockquote>\n<h3 id=\"10-SmartBear\"><a href=\"#10-SmartBear\" class=\"headerlink\" title=\"10) SmartBear\"></a>10) <a href=\"http://smartbear.com/product/collaborator/overview/\" title=\"best code review tools for programmers \">SmartBear</a></h3><p>Collaborator 是一个代码审查工具,可以帮助开发、测试和管理团队共同努力,生成高质量的代码。它允许团队同行评审代码、用户故事和测试计划在一个透明的,协作框架——立即使整个团队保持速度对代码所做的更改。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 代码审查绰绰有余,很多大厂都在使用.体验了demo之后感觉是一款非常优秀的工具.</p>\n</blockquote>\n<h3 id=\"11-Veracode\"><a href=\"#11-Veracode\" class=\"headerlink\" title=\"11) Veracode\"></a>11) <a href=\"http://www.veracode.com/security/code-review\" title=\"best code review tools for programmers \">Veracode</a></h3><p>Code review 是一个考试的计算机源代码。它的目的是找到并修复错误引入应用程序在开发阶段,提升软件的整体质量和开发人员的技能。代码评审等各种形式的程序做结对编程,非正式的次数,和正式的检查。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<h3 id=\"12-Gerrit\"><a href=\"#12-Gerrit\" class=\"headerlink\" title=\"12) Gerrit\"></a>12) <a href=\"https://code.google.com/p/gerrit/\" title=\"best code review tools for programmers \">Gerrit</a></h3><p>Gerrit 是一个基于web的代码评审系统,促进在线代码评审项目使用Git版本控制系统。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 这是google的一款代码审查工具,UI已经是上古风格了.</p>\n</blockquote>\n<h3 id=\"13-Review-Assistant\"><a href=\"#13-Review-Assistant\" class=\"headerlink\" title=\"13) Review Assistant\"></a>13) <a href=\"https://visualstudiogallery.msdn.microsoft.com/9ef817b4-2c6d-4213-8b08-5be48f9d91b9\" title=\"best code review tools for programmers \">Review Assistant</a></h3><p>Review assistant 很简单和更好的代码复查工具visual studio。</p>\n<p>1)添加你的评论在审查级别,或特定源代码块或行。<br>2)初始化代码与您的团队成员的讨论没有预定的会议。<br>3)标记的评论和缺陷需要固定。<br>4)评论显示在代码编辑器中。<br>5)即时切换检查代码和注释。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 需要结合开发工具,不适用我们现在的状况.</p>\n</blockquote>\n<h3 id=\"14-Review-Board\"><a href=\"#14-Review-Board\" class=\"headerlink\" title=\"14) Review Board\"></a>14) <a href=\"https://www.reviewboard.org/\" title=\"best code review tools for programmers \">Review Board</a></h3><p>Review board 是更好的代码复查工具程序员节省时间,金钱和理智。你的代码是syntax-highlighted,更快的阅读。我们将向您展示功能一行,替换文本内改变了什么,等等。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: UI有点复古也有点小清新,使用了一下,功能是够用了的,可以作为备选.</p>\n</blockquote>\n<h3 id=\"15-Peer-Review-Plugin\"><a href=\"#15-Peer-Review-Plugin\" class=\"headerlink\" title=\"15) Peer Review Plugin\"></a>15) <a href=\"http://trac-hacks.org/wiki/PeerReviewPlugin\" title=\"best code review tools for programmers \">Peer Review Plugin</a></h3><p>这个插件的目标是消除需要耗费时间代码评审会议通过给开发人员评审代码的能力在自己的时间在一个用户友好的网络环境。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 不能审查git仓库的代码,不考虑使用.</p>\n</blockquote>\n<h3 id=\"16-Codereview\"><a href=\"#16-Codereview\" class=\"headerlink\" title=\"16) Codereview\"></a>16) <a href=\"https://codereview.appspot.com/\" title=\"best code review tools for programmers \">Codereview</a></h3><p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 不能审查git仓库的代码,不考虑使用.</p>\n</blockquote>\n<h3 id=\"17-Code-Reviewer\"><a href=\"#17-Code-Reviewer\" class=\"headerlink\" title=\"17) Code Reviewer\"></a>17) <a href=\"https://codereviewer.org/\" title=\"best code review tools for programmers \">Code Reviewer</a></h3><p>CodeReviewer 是免费的,简单,易于部署和使用代码审查工具从SmartBear的公司发明了合作者,该行业的第一个商业代码审查工具。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 但是界面已经比较上古,对git支持不是很好</p>\n</blockquote>\n<h3 id=\"18-Code-Analysis-Tool\"><a href=\"#18-Code-Analysis-Tool\" class=\"headerlink\" title=\"18) Code Analysis Tool\"></a>18) <a href=\"http://www.castsoftware.com/products/code-analysis-tools\" title=\"best code review tools for programmers \">Code Analysis Tool</a></h3><p>CAST code 把代码分析技术是针对解决两个基本问题。首先,大多数现代IT系统是由成千上万的组件,由多个团队和许多开发人员。测量软件质量在跨多个技术,这些系统需要仔细校准版本和明确的应用程序边界的识别</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★</li>\n</ul>\n<blockquote>\n<p>总结: 工具太过复杂,不适合在公司内部推广</p>\n</blockquote>\n<h3 id=\"19-jArchitect\"><a href=\"#19-jArchitect\" class=\"headerlink\" title=\"19) jArchitect\"></a>19) <a href=\"http://www.jarchitect.com/\" title=\"best code review tools for programmers \">jArchitect</a></h3><p>JArchitect 简化了管理一个复杂的Java代码库。分析代码结构,可以指定设计规则,做有效的代码审查和主进化通过比较不同版本的代码。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★</li>\n</ul>\n<blockquote>\n<p>总结: 界面比较上古,文档完善,很多大公司在使用.</p>\n</blockquote>\n<h3 id=\"20-Reviewable\"><a href=\"#20-Reviewable\" class=\"headerlink\" title=\"20) Reviewable\"></a>20) <a href=\"https://reviewable.io/\" title=\"best code review tools for programmers \">Reviewable</a></h3><p>Reviewales 是新的代码审查工具,它有助于改善与语法突出显示的代码质量,发现bug &#x2F;问题,使代码更好,干净的界面,定制代码字体和许多更多。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 社区版本免费</li>\n<li>UI交互: ★★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 交互比较友好,安装使用docker也不麻烦.社区版本是免费的.可以考虑使用该工具</p>\n</blockquote>\n<h3 id=\"21-Gitlab\"><a href=\"#21-Gitlab\" class=\"headerlink\" title=\"21) Gitlab\"></a>21) Gitlab</h3><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,支持codereview.</p>\n<ul>\n<li>价格: 社区版本免费</li>\n<li>UI交互: ★★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 目前公司已经在使用该工具,如果在该工具的基础上进行拓展.是一款不错的代码审查工具.对于团队的学习成本也比较低.比较容易推广.</p>\n</blockquote>\n<h3 id=\"21-Upsource\"><a href=\"#21-Upsource\" class=\"headerlink\" title=\"21) Upsource\"></a>21) Upsource</h3><p>Upsource是jetbrains出品的code review工具。</p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★★</li>\n<li>安装维护 :★★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 是目前发现最好的代码审查工具,基本上满足代码审查平台的所有需求.免费版本只能注册8个用户.</p>\n</blockquote>\n<p><a href=\"http://www.bubuko.com/infodetail-730801.html\">参考链接: 20最佳代码审查工具-专门为开发人员准备</a></p>\n","excerpt":"","more":"<p>随之团队的扩大，统一编码规范，提高编码质量，变得尤为重要。代码审查作为可以有效提高代码质量的方式之一,有必要在公司推行代码审查制度.<br>让团队养成代码审查的习惯,提高代码质量,提前规避不必要的问题. </p>\n<p>为了更加高效的代码审核,需要一款代码审查工具.所以才有了这份使用报告.</p>\n<p>下面是我在使用中,尝试使用的一些工具.以及一些使用上的评价与总结.</p>\n<h3 id=\"1-CodeStriker\"><a href=\"#1-CodeStriker\" class=\"headerlink\" title=\"1) CodeStriker\"></a>1) <a href=\"http://codestriker.sourceforge.net/index.html\" title=\"best code review tools for programmers \">CodeStriker</a></h3><p>CodeStriker免费和开源的web应用程序,可以帮助开发人员基于web的代码审查。开发者canensures问题,评论和决策是记录在一个数据库,并提供一个舒适的工作空间实际执行代码检查。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codestriker-e1427936836285.png?resize=600,480\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: CodeStriker 对于一个代码审查工具来说,功能上已经可以基本满足.但是因为开发时间太过久远,已经很长时间没有人在维护了,而且UI比较有历史的味道.</p>\n</blockquote>\n<h3 id=\"2-RhodeCode\"><a href=\"#2-RhodeCode\" class=\"headerlink\" title=\"2) RhodeCode\"></a>2) <a href=\"https://rhodecode.com/\" title=\"best code review tools for programmers \">RhodeCode</a></h3><p>RhodeCode也是一个很好的工具,回顾你的代码并找出代码中的bug和问题并删除后检查代码。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/rhodecode-e1427936979546.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 社区版本免费,企业版本收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: RhodeCode在使用使用过程中,还是比较优秀的.工具的安装部署使用docker也比较方便.使用上比较顺畅,可以作为使用的备选软件.</p>\n</blockquote>\n<h3 id=\"3-Code-Brag\"><a href=\"#3-Code-Brag\" class=\"headerlink\" title=\"3) Code Brag\"></a>3) <a href=\"http://codebrag.com/\" title=\"best code review tools for programmers \">Code Brag</a></h3><p>Codebrag是一个简单的和轻量级的工具,代码审查,让这一过程为您的团队工作。它有助于解决一些问题像非阻塞的代码评审,智能电子邮件通知,内联注释,喜欢得多。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/codeberg-e1427937091542.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: Codebrag 是一款开源工具,安装起来不算难.也有一定程度上的社交属性.在使用期间官网在国内打不开,软件的安装资源不是很好获取.</p>\n</blockquote>\n<h3 id=\"4-Phabricator\"><a href=\"#4-Phabricator\" class=\"headerlink\" title=\"4) Phabricator\"></a>4) <a href=\"http://phabricator.org/\" title=\"best code review tools for programmers \">Phabricator</a></h3><p>Phabricator是一个开源软件和web应用程序包括代码评审,主持GIT &#x2F; Hg &#x2F; SVN,发现错误时,浏览源代码和审计等</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/pfabricator1-e1427937361221.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★</li>\n<li>易学程度: ★</li>\n</ul>\n<blockquote>\n<p>总结: Phabricator 是一款非常强大的工具,是facebook做的.安装是在太难,网上的安装使用文档就有140多页.使用的学习成本也需要一定的时间. </p>\n</blockquote>\n<h3 id=\"5-Codifferous\"><a href=\"#5-Codifferous\" class=\"headerlink\" title=\"5) Codifferous\"></a>5) <a href=\"https://codifferous.com/\" title=\"best code review tools for programmers \">Codifferous</a></h3><p>这是更快的代码评审服务,Codifferous是免费的代码审查工具。Codifferous便于评审代码与您的团队,无论你住在哪里当你工作。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codifferous-e1427937449256.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: Codifferous 官网国内打不开,翻墙体验过demo之后,工具比较简单,用起来没有什么问题.也没有太多优点.</p>\n</blockquote>\n<h3 id=\"6-Getbarkeep\"><a href=\"#6-Getbarkeep\" class=\"headerlink\" title=\"6) Getbarkeep\"></a>6) <a href=\"http://getbarkeep.org/\" title=\"best code review tools for programmers \">Getbarkeep</a></h3><p>Barkeep 是“友好的代码评审系统”——一种快速、有趣的方式检查代码。工程组织可以用它来保持高质量栏。通过它你可以看到提交任何Git存储库,看到差别,写评论,这些评论电邮给你的提交者。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/getbarkeep-e1427937557909.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: Barkeep 是一款开源工具,UI简洁,没有太多亮点也没有太多缺点.官网不好打开.资源获取的不是很容易.</p>\n</blockquote>\n<h3 id=\"7-Crucible\"><a href=\"#7-Crucible\" class=\"headerlink\" title=\"7) Crucible\"></a>7) <a href=\"https://www.atlassian.com/software/crucible/overview\" title=\"best code review tools for programmers \">Crucible</a></h3><p>Crucible 是另一个最受欢迎的代码复查工具对于开发人员来说,它提供评审代码,讨论修改,并确定缺陷与坩埚的灵活评估工作流。它的代码评审容易颠覆,CVS,必然等等。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/crucible-e1427937724181.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :不需要安装</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 大厂出品的工具,在使用了免费半之后,完全可以满足代码审查的需求.界面也比较漂亮,交互友好.官方在youtube上有出详细的英文使用教程.</p>\n</blockquote>\n<h3 id=\"8-Code-Review-Tool\"><a href=\"#8-Code-Review-Tool\" class=\"headerlink\" title=\"8) Code Review Tool\"></a>8) <a href=\"http://codereviewtool.com/\" title=\"best code review tools for programmers \">Code Review Tool</a></h3><p>Code Review Tool 允许团队成员评审代码协作和高效的方式通过移除大部分的开销定期正式的代码检查。它提供了所有正式的代码检查的好处,需要大大减少时间和精力而正式的代码检查。它同时支持正式和轻量级代码评审流程。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviewtool-e1427937802564.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 这么丑的软件居然是个收费软件.而且还不便宜.</p>\n</blockquote>\n<h3 id=\"9-Malevich\"><a href=\"#9-Malevich\" class=\"headerlink\" title=\"9) Malevich\"></a>9) <a href=\"http://malevich.codeplex.com/\" title=\"best code review tools for programmers \">Malevich</a></h3><p>审查代码马列 Malevich 的确实是很容易的。评论者可以看到原始的和在浏览器中文件的新版本。评论一行代码,他或她简单地点击这条线,并开始打字。提交评论让他们看到请求的代码复查的人,以及所有其他评论者。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/malevich-e1427937918164.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 不能审查git仓库的代码</p>\n</blockquote>\n<h3 id=\"10-SmartBear\"><a href=\"#10-SmartBear\" class=\"headerlink\" title=\"10) SmartBear\"></a>10) <a href=\"http://smartbear.com/product/collaborator/overview/\" title=\"best code review tools for programmers \">SmartBear</a></h3><p>Collaborator 是一个代码审查工具,可以帮助开发、测试和管理团队共同努力,生成高质量的代码。它允许团队同行评审代码、用户故事和测试计划在一个透明的,协作框架——立即使整个团队保持速度对代码所做的更改。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/smartbear-e1427938021424.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 代码审查绰绰有余,很多大厂都在使用.体验了demo之后感觉是一款非常优秀的工具.</p>\n</blockquote>\n<h3 id=\"11-Veracode\"><a href=\"#11-Veracode\" class=\"headerlink\" title=\"11) Veracode\"></a>11) <a href=\"http://www.veracode.com/security/code-review\" title=\"best code review tools for programmers \">Veracode</a></h3><p>Code review 是一个考试的计算机源代码。它的目的是找到并修复错误引入应用程序在开发阶段,提升软件的整体质量和开发人员的技能。代码评审等各种形式的程序做结对编程,非正式的次数,和正式的检查。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/veracode-e1427938137259.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<h3 id=\"12-Gerrit\"><a href=\"#12-Gerrit\" class=\"headerlink\" title=\"12) Gerrit\"></a>12) <a href=\"https://code.google.com/p/gerrit/\" title=\"best code review tools for programmers \">Gerrit</a></h3><p>Gerrit 是一个基于web的代码评审系统,促进在线代码评审项目使用Git版本控制系统。</p>\n<p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/gerrit-e1427938383133.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 这是google的一款代码审查工具,UI已经是上古风格了.</p>\n</blockquote>\n<h3 id=\"13-Review-Assistant\"><a href=\"#13-Review-Assistant\" class=\"headerlink\" title=\"13) Review Assistant\"></a>13) <a href=\"https://visualstudiogallery.msdn.microsoft.com/9ef817b4-2c6d-4213-8b08-5be48f9d91b9\" title=\"best code review tools for programmers \">Review Assistant</a></h3><p>Review assistant 很简单和更好的代码复查工具visual studio。</p>\n<p>1)添加你的评论在审查级别,或特定源代码块或行。<br>2)初始化代码与您的团队成员的讨论没有预定的会议。<br>3)标记的评论和缺陷需要固定。<br>4)评论显示在代码编辑器中。<br>5)即时切换检查代码和注释。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/review-assistant-e1427938511235.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 需要结合开发工具,不适用我们现在的状况.</p>\n</blockquote>\n<h3 id=\"14-Review-Board\"><a href=\"#14-Review-Board\" class=\"headerlink\" title=\"14) Review Board\"></a>14) <a href=\"https://www.reviewboard.org/\" title=\"best code review tools for programmers \">Review Board</a></h3><p>Review board 是更好的代码复查工具程序员节省时间,金钱和理智。你的代码是syntax-highlighted,更快的阅读。我们将向您展示功能一行,替换文本内改变了什么,等等。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/reviewboard-e1427938611206.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: UI有点复古也有点小清新,使用了一下,功能是够用了的,可以作为备选.</p>\n</blockquote>\n<h3 id=\"15-Peer-Review-Plugin\"><a href=\"#15-Peer-Review-Plugin\" class=\"headerlink\" title=\"15) Peer Review Plugin\"></a>15) <a href=\"http://trac-hacks.org/wiki/PeerReviewPlugin\" title=\"best code review tools for programmers \">Peer Review Plugin</a></h3><p>这个插件的目标是消除需要耗费时间代码评审会议通过给开发人员评审代码的能力在自己的时间在一个用户友好的网络环境。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/peerreviewplugin-e1427938775883.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 不能审查git仓库的代码,不考虑使用.</p>\n</blockquote>\n<h3 id=\"16-Codereview\"><a href=\"#16-Codereview\" class=\"headerlink\" title=\"16) Codereview\"></a>16) <a href=\"https://codereview.appspot.com/\" title=\"best code review tools for programmers \">Codereview</a></h3><p><a href=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png\"><img src=\"http://i0.wp.com/devzum.com/wp-content/uploads/2015/04/coderreview-e1427938967801.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 不能审查git仓库的代码,不考虑使用.</p>\n</blockquote>\n<h3 id=\"17-Code-Reviewer\"><a href=\"#17-Code-Reviewer\" class=\"headerlink\" title=\"17) Code Reviewer\"></a>17) <a href=\"https://codereviewer.org/\" title=\"best code review tools for programmers \">Code Reviewer</a></h3><p>CodeReviewer 是免费的,简单,易于部署和使用代码审查工具从SmartBear的公司发明了合作者,该行业的第一个商业代码审查工具。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/codereviwer-e1427939124157.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 免费</li>\n<li>UI交互: ★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 但是界面已经比较上古,对git支持不是很好</p>\n</blockquote>\n<h3 id=\"18-Code-Analysis-Tool\"><a href=\"#18-Code-Analysis-Tool\" class=\"headerlink\" title=\"18) Code Analysis Tool\"></a>18) <a href=\"http://www.castsoftware.com/products/code-analysis-tools\" title=\"best code review tools for programmers \">Code Analysis Tool</a></h3><p>CAST code 把代码分析技术是针对解决两个基本问题。首先,大多数现代IT系统是由成千上万的组件,由多个团队和许多开发人员。测量软件质量在跨多个技术,这些系统需要仔细校准版本和明确的应用程序边界的识别</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/code-tool-e1427939448703.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★</li>\n</ul>\n<blockquote>\n<p>总结: 工具太过复杂,不适合在公司内部推广</p>\n</blockquote>\n<h3 id=\"19-jArchitect\"><a href=\"#19-jArchitect\" class=\"headerlink\" title=\"19) jArchitect\"></a>19) <a href=\"http://www.jarchitect.com/\" title=\"best code review tools for programmers \">jArchitect</a></h3><p>JArchitect 简化了管理一个复杂的Java代码库。分析代码结构,可以指定设计规则,做有效的代码审查和主进化通过比较不同版本的代码。</p>\n<p><a href=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png\"><img src=\"http://i1.wp.com/devzum.com/wp-content/uploads/2015/04/jarcitect-e1427939616591.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★</li>\n</ul>\n<blockquote>\n<p>总结: 界面比较上古,文档完善,很多大公司在使用.</p>\n</blockquote>\n<h3 id=\"20-Reviewable\"><a href=\"#20-Reviewable\" class=\"headerlink\" title=\"20) Reviewable\"></a>20) <a href=\"https://reviewable.io/\" title=\"best code review tools for programmers \">Reviewable</a></h3><p>Reviewales 是新的代码审查工具,它有助于改善与语法突出显示的代码质量,发现bug &#x2F;问题,使代码更好,干净的界面,定制代码字体和许多更多。</p>\n<p><a href=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png\"><img src=\"http://i2.wp.com/devzum.com/wp-content/uploads/2015/04/reviewable-e1427939794960.png?resize=600,375\" alt=\"技术分享\"></a></p>\n<ul>\n<li>价格: 社区版本免费</li>\n<li>UI交互: ★★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 交互比较友好,安装使用docker也不麻烦.社区版本是免费的.可以考虑使用该工具</p>\n</blockquote>\n<h3 id=\"21-Gitlab\"><a href=\"#21-Gitlab\" class=\"headerlink\" title=\"21) Gitlab\"></a>21) Gitlab</h3><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,支持codereview.</p>\n<ul>\n<li>价格: 社区版本免费</li>\n<li>UI交互: ★★★★★</li>\n<li>安装维护 :★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 目前公司已经在使用该工具,如果在该工具的基础上进行拓展.是一款不错的代码审查工具.对于团队的学习成本也比较低.比较容易推广.</p>\n</blockquote>\n<h3 id=\"21-Upsource\"><a href=\"#21-Upsource\" class=\"headerlink\" title=\"21) Upsource\"></a>21) Upsource</h3><p>Upsource是jetbrains出品的code review工具。</p>\n<ul>\n<li>价格: 收费</li>\n<li>UI交互: ★★★★★</li>\n<li>安装维护 :★★★★</li>\n<li>易学程度: ★★★★★</li>\n</ul>\n<blockquote>\n<p>总结: 是目前发现最好的代码审查工具,基本上满足代码审查平台的所有需求.免费版本只能注册8个用户.</p>\n</blockquote>\n<p><a href=\"http://www.bubuko.com/infodetail-730801.html\">参考链接: 20最佳代码审查工具-专门为开发人员准备</a></p>\n"},{"title":"使用husky提升Code Review的效率","slug":"Worker/使用husky提升Code Review的效率","date":"2018-12-03T16:00:00.000Z","_content":"\n在code review的时候,代码风格是其中审查的指标之一.在审查代码风格其实是有一定工作量的.\n\n为了减少代码审查的工作量,我们何不把代码风格在提交代码之前就规范掉?\n\n这样我们就可以在代码审查中节约出很多时间,来做更多的其他更有意义的事情.\n\n# git hooks\n在git中提供了hook,就是在触发`代码提交`,`push`等一系列操作的时候,提供了触发其他程序的钩子.\n\n如何操作,本文不多赘述.\n\n有兴趣的同学可以查看文档: https://git-scm.com/docs/githooks\n\n# husky\n\n如果看过githooks的文档,是不是觉得会有一点繁琐?\n\n这里介绍一个工具 `husky` 可以解决你的问题.\n\n### 安装\n\n``` bash\nnpm install husky --save-dev\n```\n\n然后修改 package.json，增加配置：\n\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"eslint .\"\n    }\n  },\n}\n```\n如果你只是局部安装了 `eslint`,请使用以下配置\n\n```json\n{\n    \"lint-staged\": {\n    \"src/**/*.js\": [\n      \"node_modules/.bin/eslint\"\n    ]\n  },\n}\n```\n\n\n最后尝试 Git 提交，你就会很快收到反馈：\n\n```bash\ngit commit -m \"this is a commit\"\n```\n\n这样,我们就可以在代码提交之前验证一下我们的代码lint是否通过.\n\n对于一些以前从来没有用过eslint的项目来说.突然引入这种工具.\n\n你可能面临的是把所有文件都按照eslint都格式化一遍.那不是疯了吗?\n\n\n# lint-staged\n这里再安利一个工具,可以实现 eslint只检查本次提交的文件.\n这样我们就可以做到渐进式的改善我们的代码质量.\n\n### 安装\n\n```bash\nnpm install lint-staged --save-dev\n```\n### 修改 package.json 配置：\n\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"src/**/*.js\": \"eslint\"\n  }\n}\n```\n\n## 在lint-staged执行前执行更多的自定义命令\n\n这一点让我非常的喜欢,为我们提供了更多的自由度.\n\n### 修改 package.json 配置：\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"src/**/*.js\": [\"eslint --fix\", \"git add\"]\n  }\n}\n```\n\n完美,一切都看起来是那么的美好~","source":"_posts/Worker/使用husky提升Code Review的效率.md","raw":"---\ntitle: 使用husky提升Code Review的效率\ntags: [Code Review]\nslug: i9t0x2tvleo\ndate: 2018-12-04 00:00:00\n---\n\n在code review的时候,代码风格是其中审查的指标之一.在审查代码风格其实是有一定工作量的.\n\n为了减少代码审查的工作量,我们何不把代码风格在提交代码之前就规范掉?\n\n这样我们就可以在代码审查中节约出很多时间,来做更多的其他更有意义的事情.\n\n# git hooks\n在git中提供了hook,就是在触发`代码提交`,`push`等一系列操作的时候,提供了触发其他程序的钩子.\n\n如何操作,本文不多赘述.\n\n有兴趣的同学可以查看文档: https://git-scm.com/docs/githooks\n\n# husky\n\n如果看过githooks的文档,是不是觉得会有一点繁琐?\n\n这里介绍一个工具 `husky` 可以解决你的问题.\n\n### 安装\n\n``` bash\nnpm install husky --save-dev\n```\n\n然后修改 package.json，增加配置：\n\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"eslint .\"\n    }\n  },\n}\n```\n如果你只是局部安装了 `eslint`,请使用以下配置\n\n```json\n{\n    \"lint-staged\": {\n    \"src/**/*.js\": [\n      \"node_modules/.bin/eslint\"\n    ]\n  },\n}\n```\n\n\n最后尝试 Git 提交，你就会很快收到反馈：\n\n```bash\ngit commit -m \"this is a commit\"\n```\n\n这样,我们就可以在代码提交之前验证一下我们的代码lint是否通过.\n\n对于一些以前从来没有用过eslint的项目来说.突然引入这种工具.\n\n你可能面临的是把所有文件都按照eslint都格式化一遍.那不是疯了吗?\n\n\n# lint-staged\n这里再安利一个工具,可以实现 eslint只检查本次提交的文件.\n这样我们就可以做到渐进式的改善我们的代码质量.\n\n### 安装\n\n```bash\nnpm install lint-staged --save-dev\n```\n### 修改 package.json 配置：\n\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"src/**/*.js\": \"eslint\"\n  }\n}\n```\n\n## 在lint-staged执行前执行更多的自定义命令\n\n这一点让我非常的喜欢,为我们提供了更多的自由度.\n\n### 修改 package.json 配置：\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"src/**/*.js\": [\"eslint --fix\", \"git add\"]\n  }\n}\n```\n\n完美,一切都看起来是那么的美好~","published":1,"updated":"2024-10-09T00:58:24.563Z","_id":"cm215vevc003q7k9k1y7v4inf","comments":1,"layout":"post","photos":[],"content":"<p>在code review的时候,代码风格是其中审查的指标之一.在审查代码风格其实是有一定工作量的.</p>\n<p>为了减少代码审查的工作量,我们何不把代码风格在提交代码之前就规范掉?</p>\n<p>这样我们就可以在代码审查中节约出很多时间,来做更多的其他更有意义的事情.</p>\n<h1 id=\"git-hooks\"><a href=\"#git-hooks\" class=\"headerlink\" title=\"git hooks\"></a>git hooks</h1><p>在git中提供了hook,就是在触发<code>代码提交</code>,<code>push</code>等一系列操作的时候,提供了触发其他程序的钩子.</p>\n<p>如何操作,本文不多赘述.</p>\n<p>有兴趣的同学可以查看文档: <a href=\"https://git-scm.com/docs/githooks\">https://git-scm.com/docs/githooks</a></p>\n<h1 id=\"husky\"><a href=\"#husky\" class=\"headerlink\" title=\"husky\"></a>husky</h1><p>如果看过githooks的文档,是不是觉得会有一点繁琐?</p>\n<p>这里介绍一个工具 <code>husky</code> 可以解决你的问题.</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install husky --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 package.json，增加配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint .&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果你只是局部安装了 <code>eslint</code>,请使用以下配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;src/**/*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules/.bin/eslint&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>最后尝试 Git 提交，你就会很快收到反馈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;this is a commit&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样,我们就可以在代码提交之前验证一下我们的代码lint是否通过.</p>\n<p>对于一些以前从来没有用过eslint的项目来说.突然引入这种工具.</p>\n<p>你可能面临的是把所有文件都按照eslint都格式化一遍.那不是疯了吗?</p>\n<h1 id=\"lint-staged\"><a href=\"#lint-staged\" class=\"headerlink\" title=\"lint-staged\"></a>lint-staged</h1><p>这里再安利一个工具,可以实现 eslint只检查本次提交的文件.<br>这样我们就可以做到渐进式的改善我们的代码质量.</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lint-staged --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-package-json-配置：\"><a href=\"#修改-package-json-配置：\" class=\"headerlink\" title=\"修改 package.json 配置：\"></a>修改 package.json 配置：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lint-staged&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;src/**/*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在lint-staged执行前执行更多的自定义命令\"><a href=\"#在lint-staged执行前执行更多的自定义命令\" class=\"headerlink\" title=\"在lint-staged执行前执行更多的自定义命令\"></a>在lint-staged执行前执行更多的自定义命令</h2><p>这一点让我非常的喜欢,为我们提供了更多的自由度.</p>\n<h3 id=\"修改-package-json-配置：-1\"><a href=\"#修改-package-json-配置：-1\" class=\"headerlink\" title=\"修改 package.json 配置：\"></a>修改 package.json 配置：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;precommit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lint-staged&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;src/**/*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;eslint --fix&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;git add&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完美,一切都看起来是那么的美好~</p>\n","excerpt":"","more":"<p>在code review的时候,代码风格是其中审查的指标之一.在审查代码风格其实是有一定工作量的.</p>\n<p>为了减少代码审查的工作量,我们何不把代码风格在提交代码之前就规范掉?</p>\n<p>这样我们就可以在代码审查中节约出很多时间,来做更多的其他更有意义的事情.</p>\n<h1 id=\"git-hooks\"><a href=\"#git-hooks\" class=\"headerlink\" title=\"git hooks\"></a>git hooks</h1><p>在git中提供了hook,就是在触发<code>代码提交</code>,<code>push</code>等一系列操作的时候,提供了触发其他程序的钩子.</p>\n<p>如何操作,本文不多赘述.</p>\n<p>有兴趣的同学可以查看文档: <a href=\"https://git-scm.com/docs/githooks\">https://git-scm.com/docs/githooks</a></p>\n<h1 id=\"husky\"><a href=\"#husky\" class=\"headerlink\" title=\"husky\"></a>husky</h1><p>如果看过githooks的文档,是不是觉得会有一点繁琐?</p>\n<p>这里介绍一个工具 <code>husky</code> 可以解决你的问题.</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install husky --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 package.json，增加配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint .&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果你只是局部安装了 <code>eslint</code>,请使用以下配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;src/**/*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules/.bin/eslint&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>最后尝试 Git 提交，你就会很快收到反馈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;this is a commit&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样,我们就可以在代码提交之前验证一下我们的代码lint是否通过.</p>\n<p>对于一些以前从来没有用过eslint的项目来说.突然引入这种工具.</p>\n<p>你可能面临的是把所有文件都按照eslint都格式化一遍.那不是疯了吗?</p>\n<h1 id=\"lint-staged\"><a href=\"#lint-staged\" class=\"headerlink\" title=\"lint-staged\"></a>lint-staged</h1><p>这里再安利一个工具,可以实现 eslint只检查本次提交的文件.<br>这样我们就可以做到渐进式的改善我们的代码质量.</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lint-staged --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-package-json-配置：\"><a href=\"#修改-package-json-配置：\" class=\"headerlink\" title=\"修改 package.json 配置：\"></a>修改 package.json 配置：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lint-staged&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;src/**/*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在lint-staged执行前执行更多的自定义命令\"><a href=\"#在lint-staged执行前执行更多的自定义命令\" class=\"headerlink\" title=\"在lint-staged执行前执行更多的自定义命令\"></a>在lint-staged执行前执行更多的自定义命令</h2><p>这一点让我非常的喜欢,为我们提供了更多的自由度.</p>\n<h3 id=\"修改-package-json-配置：-1\"><a href=\"#修改-package-json-配置：-1\" class=\"headerlink\" title=\"修改 package.json 配置：\"></a>修改 package.json 配置：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;precommit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lint-staged&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;src/**/*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;eslint --fix&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;git add&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完美,一切都看起来是那么的美好~</p>\n"},{"title":"如何通过 Code Review 帮助团队提升代码质量","slug":"Worker/如何通过 Code Review 帮助团队提升代码质量","date":"2018-11-07T16:00:00.000Z","_content":"# 代码审查解决方案\n最近在推进公司的代码审查.\n经过几天的研究之后,整理出一些问题与解决方案.\n\n## 当前面临的问题\n\n* 没有一个好的工具方便代码审查\n* 没有一个好的代码标准代码审查\n* 没有一个流程强制执行代码审查\n* 没有一个固定职责的人来代码审查\n* 代码审查之后的修改跟踪问题\n* 代码审查者与代码修复者鼓励机制\n* 跨团队\b资源调配的时候,容易造成过多的代码\n\n# 解决方案\n\n## 加入Merge Request工作流\n在Gitlab上做代码审查,我们需要在我们现有的git工作流上加入Merge Request.\n\n## 工作方式\n\nMerge Request可以和功能分支工作流、Gitflow工作流或Forking工作流一起使用。过程是这样的：\n\n- 开发者在本地仓库中新建一个专门的分支开发功能。\n- 开发者push分支修改到公开的Git仓库中。\n- 开发者通过Git发起一个Merge Request。\n- 团队的其它成员代码审查，讨论并修改。\n- 项目维护者合并功能到官方仓库中并关闭Merge Request。\n\n\n## 结合到我们现有工作流当中\n我们现在代码管理的工作流叫: Gitflow工作流\n\nGitflow工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。\n\n在Gitflow工作流中使用Merge Request让开发者在发布分支或是维护分支上工作时，可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。\n\nGitflow工作流中Merge Request的使用过程：当一个功能、发布或是热修复分支需要Review时，开发者简单发起一个Merge Request，团队的其它成员会通过Bitbucket收到通知。\n\n新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。Merge Request可能用做所有合并的正式管理。\n\n\n\n# 审查流程\n```flow\n开始=>start: 代码作者通过git 克隆代码到本地\n结束=>end: 结束代码审查\n修改代码=>operation: 修改代码并且提交\npr=>operation: 发起 Merge Request\n通知=>operation: gitlab 通知相关审核人员\n审核=>operation: 审核人员开始审核代码\n关闭=>operation: 关闭Merge Request\n合并=>operation: 合并代码\n代码审核中=>condition: 是否过审\n\n开始->修改代码->pr->通知->审核->代码审核中\n关闭->合并->结束\n代码审核中(yes)->关闭\n代码审核中(no)->修改代码\n```\n\n\n# 结合GitLab做代码审查\n\n## 项目角色介绍\n\n| 角色 | 描述 |\n| ------ | ------ | \n| Owner | Git 系统管理员 |\n| Master | Git 项目开发人员 |\n| Reporter | Git 项目测试人员 |\n| Guest | 访客 |\n\n\n\n## 角色权限\n\n![](https://img-blog.csdn.net/20171124111537924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFzdGVyX3lhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n我们可以看到Master跟 Owner才有权利把代码合并到受保护的分支上,对于Master角色的分配需要谨慎.\n\n## 锁定受保护分支\n\n- bugfix_*\n- develop_*\n- release_*\n- master\n\n## 多人 Review\n- 提交 Merge Request 后，被指派人可通过 @你想要通知单人 邀请一个或2. 多个额外的 Reviewer （它们会收到邮件通知）\n- 被邀请的 Reviewer 看过代码后， 可回复 顶 或+1表示通过，反之给出修改建议。\n- 升级GitLab 版本,在最新版本中,GitLab已经支持群组审查,当前版本还是单人审查.\n\n\n# 代码审查效率\b问题\n为了避免我们在提交代码之后,一个Merge Request很多天都没有人审查,\n我们应该有相应措施:\n\n将审查任务分派给不同的人\n审查者给出反馈的最迟时间\n标识某个审查已经完成\n指定负责人合并已经完成审查的代码\n\n\n# 什么样的项目什么时候适合代码审查?\n至少有5名开发人员\n有新的小伙伴加入团队时\n团队中有些成员对于当前所使用的技术栈还不太熟悉时\n该版本有其他团队成员协助开发的时候\n团队还在探索最佳实践的时候\n\n\n# 代码审查清单\n代码审查我们都在做什么?\n我们需要审查点在哪里?\n\n下面列出一些清单,提供大家在代码审核中作为参考点.\n\n## 常规项\n代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。\n所有的代码是否简单易懂？\n代码符合你所遵循的编程规范么？这通常包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。\n是否存在多余的或是重复的代码？\n代码是否尽可能的模块化了？\n是否有可以被替换的全局变量？\n是否有被注释掉的代码？\n循环是否设置了长度和正确的终止条件？\n是否有可以被库函数替代的代码？\n是否有可以删除的日志或调试代码？\n\n## 安全\n所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？\n在哪里使用了第三方工具，返回的错误是否被捕获？\n输出的值是否进行了检查并且编码？\n无效的参数值是否能够处理？\n\n## 文档\n是否有注释，并且描述了代码的意图？\n所有的函数都有注释吗？\n对非常规行为和边界情况处理是否有描述？\n第三方库的使用和函数是否有文档？\n数据结构和计量单位是否进行了解释？\n是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如‘TODO’？\n\n## 测试\n代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。\n是否存在测试，它们是否可以被理解？比如，至少达到你满意的代码覆盖(code coverage)。\n单元测试是否真正的测试了代码是否可以完成预期的功能？\n是否检查了数组的“越界“错误？\n是否有可以被已经存在的API所替代的测试代码？","source":"_posts/Worker/如何通过 Code Review 帮助团队提升代码质量.md","raw":"---\ntitle: 如何通过 Code Review 帮助团队提升代码质量\ntags:\n  - Code Review\nslug: bbaf6d07\ndate: 2018-11-08 00:00:00\n---\n# 代码审查解决方案\n最近在推进公司的代码审查.\n经过几天的研究之后,整理出一些问题与解决方案.\n\n## 当前面临的问题\n\n* 没有一个好的工具方便代码审查\n* 没有一个好的代码标准代码审查\n* 没有一个流程强制执行代码审查\n* 没有一个固定职责的人来代码审查\n* 代码审查之后的修改跟踪问题\n* 代码审查者与代码修复者鼓励机制\n* 跨团队\b资源调配的时候,容易造成过多的代码\n\n# 解决方案\n\n## 加入Merge Request工作流\n在Gitlab上做代码审查,我们需要在我们现有的git工作流上加入Merge Request.\n\n## 工作方式\n\nMerge Request可以和功能分支工作流、Gitflow工作流或Forking工作流一起使用。过程是这样的：\n\n- 开发者在本地仓库中新建一个专门的分支开发功能。\n- 开发者push分支修改到公开的Git仓库中。\n- 开发者通过Git发起一个Merge Request。\n- 团队的其它成员代码审查，讨论并修改。\n- 项目维护者合并功能到官方仓库中并关闭Merge Request。\n\n\n## 结合到我们现有工作流当中\n我们现在代码管理的工作流叫: Gitflow工作流\n\nGitflow工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。\n\n在Gitflow工作流中使用Merge Request让开发者在发布分支或是维护分支上工作时，可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。\n\nGitflow工作流中Merge Request的使用过程：当一个功能、发布或是热修复分支需要Review时，开发者简单发起一个Merge Request，团队的其它成员会通过Bitbucket收到通知。\n\n新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。Merge Request可能用做所有合并的正式管理。\n\n\n\n# 审查流程\n```flow\n开始=>start: 代码作者通过git 克隆代码到本地\n结束=>end: 结束代码审查\n修改代码=>operation: 修改代码并且提交\npr=>operation: 发起 Merge Request\n通知=>operation: gitlab 通知相关审核人员\n审核=>operation: 审核人员开始审核代码\n关闭=>operation: 关闭Merge Request\n合并=>operation: 合并代码\n代码审核中=>condition: 是否过审\n\n开始->修改代码->pr->通知->审核->代码审核中\n关闭->合并->结束\n代码审核中(yes)->关闭\n代码审核中(no)->修改代码\n```\n\n\n# 结合GitLab做代码审查\n\n## 项目角色介绍\n\n| 角色 | 描述 |\n| ------ | ------ | \n| Owner | Git 系统管理员 |\n| Master | Git 项目开发人员 |\n| Reporter | Git 项目测试人员 |\n| Guest | 访客 |\n\n\n\n## 角色权限\n\n![](https://img-blog.csdn.net/20171124111537924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFzdGVyX3lhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n我们可以看到Master跟 Owner才有权利把代码合并到受保护的分支上,对于Master角色的分配需要谨慎.\n\n## 锁定受保护分支\n\n- bugfix_*\n- develop_*\n- release_*\n- master\n\n## 多人 Review\n- 提交 Merge Request 后，被指派人可通过 @你想要通知单人 邀请一个或2. 多个额外的 Reviewer （它们会收到邮件通知）\n- 被邀请的 Reviewer 看过代码后， 可回复 顶 或+1表示通过，反之给出修改建议。\n- 升级GitLab 版本,在最新版本中,GitLab已经支持群组审查,当前版本还是单人审查.\n\n\n# 代码审查效率\b问题\n为了避免我们在提交代码之后,一个Merge Request很多天都没有人审查,\n我们应该有相应措施:\n\n将审查任务分派给不同的人\n审查者给出反馈的最迟时间\n标识某个审查已经完成\n指定负责人合并已经完成审查的代码\n\n\n# 什么样的项目什么时候适合代码审查?\n至少有5名开发人员\n有新的小伙伴加入团队时\n团队中有些成员对于当前所使用的技术栈还不太熟悉时\n该版本有其他团队成员协助开发的时候\n团队还在探索最佳实践的时候\n\n\n# 代码审查清单\n代码审查我们都在做什么?\n我们需要审查点在哪里?\n\n下面列出一些清单,提供大家在代码审核中作为参考点.\n\n## 常规项\n代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。\n所有的代码是否简单易懂？\n代码符合你所遵循的编程规范么？这通常包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。\n是否存在多余的或是重复的代码？\n代码是否尽可能的模块化了？\n是否有可以被替换的全局变量？\n是否有被注释掉的代码？\n循环是否设置了长度和正确的终止条件？\n是否有可以被库函数替代的代码？\n是否有可以删除的日志或调试代码？\n\n## 安全\n所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？\n在哪里使用了第三方工具，返回的错误是否被捕获？\n输出的值是否进行了检查并且编码？\n无效的参数值是否能够处理？\n\n## 文档\n是否有注释，并且描述了代码的意图？\n所有的函数都有注释吗？\n对非常规行为和边界情况处理是否有描述？\n第三方库的使用和函数是否有文档？\n数据结构和计量单位是否进行了解释？\n是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如‘TODO’？\n\n## 测试\n代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。\n是否存在测试，它们是否可以被理解？比如，至少达到你满意的代码覆盖(code coverage)。\n单元测试是否真正的测试了代码是否可以完成预期的功能？\n是否检查了数组的“越界“错误？\n是否有可以被已经存在的API所替代的测试代码？","published":1,"updated":"2024-10-09T00:58:24.563Z","_id":"cm215veve003v7k9kg8the2rz","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"代码审查解决方案\"><a href=\"#代码审查解决方案\" class=\"headerlink\" title=\"代码审查解决方案\"></a>代码审查解决方案</h1><p>最近在推进公司的代码审查.<br>经过几天的研究之后,整理出一些问题与解决方案.</p>\n<h2 id=\"当前面临的问题\"><a href=\"#当前面临的问题\" class=\"headerlink\" title=\"当前面临的问题\"></a>当前面临的问题</h2><ul>\n<li>没有一个好的工具方便代码审查</li>\n<li>没有一个好的代码标准代码审查</li>\n<li>没有一个流程强制执行代码审查</li>\n<li>没有一个固定职责的人来代码审查</li>\n<li>代码审查之后的修改跟踪问题</li>\n<li>代码审查者与代码修复者鼓励机制</li>\n<li>跨团队\b资源调配的时候,容易造成过多的代码</li>\n</ul>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"加入Merge-Request工作流\"><a href=\"#加入Merge-Request工作流\" class=\"headerlink\" title=\"加入Merge Request工作流\"></a>加入Merge Request工作流</h2><p>在Gitlab上做代码审查,我们需要在我们现有的git工作流上加入Merge Request.</p>\n<h2 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h2><p>Merge Request可以和功能分支工作流、Gitflow工作流或Forking工作流一起使用。过程是这样的：</p>\n<ul>\n<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>\n<li>开发者push分支修改到公开的Git仓库中。</li>\n<li>开发者通过Git发起一个Merge Request。</li>\n<li>团队的其它成员代码审查，讨论并修改。</li>\n<li>项目维护者合并功能到官方仓库中并关闭Merge Request。</li>\n</ul>\n<h2 id=\"结合到我们现有工作流当中\"><a href=\"#结合到我们现有工作流当中\" class=\"headerlink\" title=\"结合到我们现有工作流当中\"></a>结合到我们现有工作流当中</h2><p>我们现在代码管理的工作流叫: Gitflow工作流</p>\n<p>Gitflow工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。</p>\n<p>在Gitflow工作流中使用Merge Request让开发者在发布分支或是维护分支上工作时，可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。</p>\n<p>Gitflow工作流中Merge Request的使用过程：当一个功能、发布或是热修复分支需要Review时，开发者简单发起一个Merge Request，团队的其它成员会通过Bitbucket收到通知。</p>\n<p>新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。Merge Request可能用做所有合并的正式管理。</p>\n<h1 id=\"审查流程\"><a href=\"#审查流程\" class=\"headerlink\" title=\"审查流程\"></a>审查流程</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始=&gt;start: 代码作者通过git 克隆代码到本地</span><br><span class=\"line\">结束=&gt;end: 结束代码审查</span><br><span class=\"line\">修改代码=&gt;operation: 修改代码并且提交</span><br><span class=\"line\">pr=&gt;operation: 发起 Merge Request</span><br><span class=\"line\">通知=&gt;operation: gitlab 通知相关审核人员</span><br><span class=\"line\">审核=&gt;operation: 审核人员开始审核代码</span><br><span class=\"line\">关闭=&gt;operation: 关闭Merge Request</span><br><span class=\"line\">合并=&gt;operation: 合并代码</span><br><span class=\"line\">代码审核中=&gt;condition: 是否过审</span><br><span class=\"line\"></span><br><span class=\"line\">开始-&gt;修改代码-&gt;pr-&gt;通知-&gt;审核-&gt;代码审核中</span><br><span class=\"line\">关闭-&gt;合并-&gt;结束</span><br><span class=\"line\">代码审核中(yes)-&gt;关闭</span><br><span class=\"line\">代码审核中(no)-&gt;修改代码</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"结合GitLab做代码审查\"><a href=\"#结合GitLab做代码审查\" class=\"headerlink\" title=\"结合GitLab做代码审查\"></a>结合GitLab做代码审查</h1><h2 id=\"项目角色介绍\"><a href=\"#项目角色介绍\" class=\"headerlink\" title=\"项目角色介绍\"></a>项目角色介绍</h2><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Owner</td>\n<td>Git 系统管理员</td>\n</tr>\n<tr>\n<td>Master</td>\n<td>Git 项目开发人员</td>\n</tr>\n<tr>\n<td>Reporter</td>\n<td>Git 项目测试人员</td>\n</tr>\n<tr>\n<td>Guest</td>\n<td>访客</td>\n</tr>\n</tbody></table>\n<h2 id=\"角色权限\"><a href=\"#角色权限\" class=\"headerlink\" title=\"角色权限\"></a>角色权限</h2><p><img src=\"https://img-blog.csdn.net/20171124111537924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFzdGVyX3lhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<p>我们可以看到Master跟 Owner才有权利把代码合并到受保护的分支上,对于Master角色的分配需要谨慎.</p>\n<h2 id=\"锁定受保护分支\"><a href=\"#锁定受保护分支\" class=\"headerlink\" title=\"锁定受保护分支\"></a>锁定受保护分支</h2><ul>\n<li>bugfix_*</li>\n<li>develop_*</li>\n<li>release_*</li>\n<li>master</li>\n</ul>\n<h2 id=\"多人-Review\"><a href=\"#多人-Review\" class=\"headerlink\" title=\"多人 Review\"></a>多人 Review</h2><ul>\n<li>提交 Merge Request 后，被指派人可通过 @你想要通知单人 邀请一个或2. 多个额外的 Reviewer （它们会收到邮件通知）</li>\n<li>被邀请的 Reviewer 看过代码后， 可回复 顶 或+1表示通过，反之给出修改建议。</li>\n<li>升级GitLab 版本,在最新版本中,GitLab已经支持群组审查,当前版本还是单人审查.</li>\n</ul>\n<h1 id=\"代码审查效率问题\"><a href=\"#代码审查效率问题\" class=\"headerlink\" title=\"代码审查效率\b问题\"></a>代码审查效率\b问题</h1><p>为了避免我们在提交代码之后,一个Merge Request很多天都没有人审查,<br>我们应该有相应措施:</p>\n<p>将审查任务分派给不同的人<br>审查者给出反馈的最迟时间<br>标识某个审查已经完成<br>指定负责人合并已经完成审查的代码</p>\n<h1 id=\"什么样的项目什么时候适合代码审查\"><a href=\"#什么样的项目什么时候适合代码审查\" class=\"headerlink\" title=\"什么样的项目什么时候适合代码审查?\"></a>什么样的项目什么时候适合代码审查?</h1><p>至少有5名开发人员<br>有新的小伙伴加入团队时<br>团队中有些成员对于当前所使用的技术栈还不太熟悉时<br>该版本有其他团队成员协助开发的时候<br>团队还在探索最佳实践的时候</p>\n<h1 id=\"代码审查清单\"><a href=\"#代码审查清单\" class=\"headerlink\" title=\"代码审查清单\"></a>代码审查清单</h1><p>代码审查我们都在做什么?<br>我们需要审查点在哪里?</p>\n<p>下面列出一些清单,提供大家在代码审核中作为参考点.</p>\n<h2 id=\"常规项\"><a href=\"#常规项\" class=\"headerlink\" title=\"常规项\"></a>常规项</h2><p>代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。<br>所有的代码是否简单易懂？<br>代码符合你所遵循的编程规范么？这通常包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。<br>是否存在多余的或是重复的代码？<br>代码是否尽可能的模块化了？<br>是否有可以被替换的全局变量？<br>是否有被注释掉的代码？<br>循环是否设置了长度和正确的终止条件？<br>是否有可以被库函数替代的代码？<br>是否有可以删除的日志或调试代码？</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？<br>在哪里使用了第三方工具，返回的错误是否被捕获？<br>输出的值是否进行了检查并且编码？<br>无效的参数值是否能够处理？</p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p>是否有注释，并且描述了代码的意图？<br>所有的函数都有注释吗？<br>对非常规行为和边界情况处理是否有描述？<br>第三方库的使用和函数是否有文档？<br>数据结构和计量单位是否进行了解释？<br>是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如‘TODO’？</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。<br>是否存在测试，它们是否可以被理解？比如，至少达到你满意的代码覆盖(code coverage)。<br>单元测试是否真正的测试了代码是否可以完成预期的功能？<br>是否检查了数组的“越界“错误？<br>是否有可以被已经存在的API所替代的测试代码？</p>\n","excerpt":"","more":"<h1 id=\"代码审查解决方案\"><a href=\"#代码审查解决方案\" class=\"headerlink\" title=\"代码审查解决方案\"></a>代码审查解决方案</h1><p>最近在推进公司的代码审查.<br>经过几天的研究之后,整理出一些问题与解决方案.</p>\n<h2 id=\"当前面临的问题\"><a href=\"#当前面临的问题\" class=\"headerlink\" title=\"当前面临的问题\"></a>当前面临的问题</h2><ul>\n<li>没有一个好的工具方便代码审查</li>\n<li>没有一个好的代码标准代码审查</li>\n<li>没有一个流程强制执行代码审查</li>\n<li>没有一个固定职责的人来代码审查</li>\n<li>代码审查之后的修改跟踪问题</li>\n<li>代码审查者与代码修复者鼓励机制</li>\n<li>跨团队\b资源调配的时候,容易造成过多的代码</li>\n</ul>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"加入Merge-Request工作流\"><a href=\"#加入Merge-Request工作流\" class=\"headerlink\" title=\"加入Merge Request工作流\"></a>加入Merge Request工作流</h2><p>在Gitlab上做代码审查,我们需要在我们现有的git工作流上加入Merge Request.</p>\n<h2 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h2><p>Merge Request可以和功能分支工作流、Gitflow工作流或Forking工作流一起使用。过程是这样的：</p>\n<ul>\n<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>\n<li>开发者push分支修改到公开的Git仓库中。</li>\n<li>开发者通过Git发起一个Merge Request。</li>\n<li>团队的其它成员代码审查，讨论并修改。</li>\n<li>项目维护者合并功能到官方仓库中并关闭Merge Request。</li>\n</ul>\n<h2 id=\"结合到我们现有工作流当中\"><a href=\"#结合到我们现有工作流当中\" class=\"headerlink\" title=\"结合到我们现有工作流当中\"></a>结合到我们现有工作流当中</h2><p>我们现在代码管理的工作流叫: Gitflow工作流</p>\n<p>Gitflow工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。</p>\n<p>在Gitflow工作流中使用Merge Request让开发者在发布分支或是维护分支上工作时，可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。</p>\n<p>Gitflow工作流中Merge Request的使用过程：当一个功能、发布或是热修复分支需要Review时，开发者简单发起一个Merge Request，团队的其它成员会通过Bitbucket收到通知。</p>\n<p>新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。Merge Request可能用做所有合并的正式管理。</p>\n<h1 id=\"审查流程\"><a href=\"#审查流程\" class=\"headerlink\" title=\"审查流程\"></a>审查流程</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始=&gt;start: 代码作者通过git 克隆代码到本地</span><br><span class=\"line\">结束=&gt;end: 结束代码审查</span><br><span class=\"line\">修改代码=&gt;operation: 修改代码并且提交</span><br><span class=\"line\">pr=&gt;operation: 发起 Merge Request</span><br><span class=\"line\">通知=&gt;operation: gitlab 通知相关审核人员</span><br><span class=\"line\">审核=&gt;operation: 审核人员开始审核代码</span><br><span class=\"line\">关闭=&gt;operation: 关闭Merge Request</span><br><span class=\"line\">合并=&gt;operation: 合并代码</span><br><span class=\"line\">代码审核中=&gt;condition: 是否过审</span><br><span class=\"line\"></span><br><span class=\"line\">开始-&gt;修改代码-&gt;pr-&gt;通知-&gt;审核-&gt;代码审核中</span><br><span class=\"line\">关闭-&gt;合并-&gt;结束</span><br><span class=\"line\">代码审核中(yes)-&gt;关闭</span><br><span class=\"line\">代码审核中(no)-&gt;修改代码</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"结合GitLab做代码审查\"><a href=\"#结合GitLab做代码审查\" class=\"headerlink\" title=\"结合GitLab做代码审查\"></a>结合GitLab做代码审查</h1><h2 id=\"项目角色介绍\"><a href=\"#项目角色介绍\" class=\"headerlink\" title=\"项目角色介绍\"></a>项目角色介绍</h2><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Owner</td>\n<td>Git 系统管理员</td>\n</tr>\n<tr>\n<td>Master</td>\n<td>Git 项目开发人员</td>\n</tr>\n<tr>\n<td>Reporter</td>\n<td>Git 项目测试人员</td>\n</tr>\n<tr>\n<td>Guest</td>\n<td>访客</td>\n</tr>\n</tbody></table>\n<h2 id=\"角色权限\"><a href=\"#角色权限\" class=\"headerlink\" title=\"角色权限\"></a>角色权限</h2><p><img src=\"https://img-blog.csdn.net/20171124111537924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFzdGVyX3lhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<p>我们可以看到Master跟 Owner才有权利把代码合并到受保护的分支上,对于Master角色的分配需要谨慎.</p>\n<h2 id=\"锁定受保护分支\"><a href=\"#锁定受保护分支\" class=\"headerlink\" title=\"锁定受保护分支\"></a>锁定受保护分支</h2><ul>\n<li>bugfix_*</li>\n<li>develop_*</li>\n<li>release_*</li>\n<li>master</li>\n</ul>\n<h2 id=\"多人-Review\"><a href=\"#多人-Review\" class=\"headerlink\" title=\"多人 Review\"></a>多人 Review</h2><ul>\n<li>提交 Merge Request 后，被指派人可通过 @你想要通知单人 邀请一个或2. 多个额外的 Reviewer （它们会收到邮件通知）</li>\n<li>被邀请的 Reviewer 看过代码后， 可回复 顶 或+1表示通过，反之给出修改建议。</li>\n<li>升级GitLab 版本,在最新版本中,GitLab已经支持群组审查,当前版本还是单人审查.</li>\n</ul>\n<h1 id=\"代码审查效率问题\"><a href=\"#代码审查效率问题\" class=\"headerlink\" title=\"代码审查效率\b问题\"></a>代码审查效率\b问题</h1><p>为了避免我们在提交代码之后,一个Merge Request很多天都没有人审查,<br>我们应该有相应措施:</p>\n<p>将审查任务分派给不同的人<br>审查者给出反馈的最迟时间<br>标识某个审查已经完成<br>指定负责人合并已经完成审查的代码</p>\n<h1 id=\"什么样的项目什么时候适合代码审查\"><a href=\"#什么样的项目什么时候适合代码审查\" class=\"headerlink\" title=\"什么样的项目什么时候适合代码审查?\"></a>什么样的项目什么时候适合代码审查?</h1><p>至少有5名开发人员<br>有新的小伙伴加入团队时<br>团队中有些成员对于当前所使用的技术栈还不太熟悉时<br>该版本有其他团队成员协助开发的时候<br>团队还在探索最佳实践的时候</p>\n<h1 id=\"代码审查清单\"><a href=\"#代码审查清单\" class=\"headerlink\" title=\"代码审查清单\"></a>代码审查清单</h1><p>代码审查我们都在做什么?<br>我们需要审查点在哪里?</p>\n<p>下面列出一些清单,提供大家在代码审核中作为参考点.</p>\n<h2 id=\"常规项\"><a href=\"#常规项\" class=\"headerlink\" title=\"常规项\"></a>常规项</h2><p>代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。<br>所有的代码是否简单易懂？<br>代码符合你所遵循的编程规范么？这通常包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。<br>是否存在多余的或是重复的代码？<br>代码是否尽可能的模块化了？<br>是否有可以被替换的全局变量？<br>是否有被注释掉的代码？<br>循环是否设置了长度和正确的终止条件？<br>是否有可以被库函数替代的代码？<br>是否有可以删除的日志或调试代码？</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？<br>在哪里使用了第三方工具，返回的错误是否被捕获？<br>输出的值是否进行了检查并且编码？<br>无效的参数值是否能够处理？</p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p>是否有注释，并且描述了代码的意图？<br>所有的函数都有注释吗？<br>对非常规行为和边界情况处理是否有描述？<br>第三方库的使用和函数是否有文档？<br>数据结构和计量单位是否进行了解释？<br>是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如‘TODO’？</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。<br>是否存在测试，它们是否可以被理解？比如，至少达到你满意的代码覆盖(code coverage)。<br>单元测试是否真正的测试了代码是否可以完成预期的功能？<br>是否检查了数组的“越界“错误？<br>是否有可以被已经存在的API所替代的测试代码？</p>\n"},{"title":"让团队保持Code Review习惯的三大法宝","slug":"Worker/让团队保持Code Review习惯的三大法宝","date":"2018-11-30T06:00:00.000Z","_content":"\n之前跟大家聊过代码审查,想要在团队中保持团队代码审查习惯,是相当困难的.\n我们必须要有合理的流程,工具与制度的支持,才能基本保证我们代码审查效率与质量.\n\n\n# 流程支持:Gitflow\n\n之前有介绍Gitflow的工作流.\n\n大致如下:\n\n- 开发者在本地仓库中新建一个专门的分支开发功能。\n- 开发者push分支修改到公开的Git仓库中。\n- 开发者通过Git发起一个Merge Request。\n- 团队的其它成员代码审查，讨论并修改。\n- 项目维护者合并功能到官方仓库中并关闭Merge Request。\n\n\n# 工具支持\n\n## 强制使用eslint\n强制使用eslint,在代码未提交之前,是用husky等工具做强制eslint.\n保证提交之后的代码,必须先过一遍eslint.\n\n## 规范提交代码的类型\n我们自己内部开发了一款简单的命令行工具,可以在我们提交代码的时候,\b定义本次提交的类型.\b\n\n方便我们后续在代码审查的时候,更加容易的理解修改的内容.\n\n### 类型如下\n\n- bug修复\n- 新特性\n- 样式修复\n- 代码重构\n- 测试代码\n- 代码回滚\n- bug修复\n- 文档更新\n- 临时提交\n\n### 命令行使用方式\n```\n? What do you want to do? 代码提交\n? 请选择Git提交类型？ (Use arrow keys)\n❯ * fixed    : bug修复\n  * feature  : 新特性\n  * style    : 样式修复\n  * refactor : 代码重构\n  * test     : 测试代码\n  * revert   : 代码回滚\n  * doc      : 文档更新\n(Move up and down to reveal more choices)\n```\n\n## Code Climate\nCode Climate是一款代码测试工具,它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaScript, CSS, Golang, Python 等。\n\n你可以将他集成到GitLab-CI或者Travis CI中,\b当代码提交后,会自动给出\b评估报告,以及修改建议.\n\n## gitlab与钉钉\n在我现在的公司中,我在gitlab的基础上做了二次开发,当有代码审查任务的时候,可以使用邮件或者钉钉通知到相关人员.\n\n如果以后钉钉DING任务开放api,我们甚至可以使用钉钉来完成我们一切的代码审查任务的管理.\n\n> 人工的代码审查\b应该在所有持续集成的工作跑完之后才进行.\n这样可以大大的减少我们审查的工作量而且还保证了一定程度的代码质量.\n\n\n# 公司的支持\n从公司层面上,也应该有相应的措施鼓励代码审查的工作.\n\n- 鼓励员工帮助别人审核代码，甚至可以做到效绩评估中。\n- 制定统一的编程规范和代码风格，特别是在那些有争议的地方，可减少很多程序员偏好带来的矛盾。\n\n\n> 这是我最近对代码审查的一些所思所想","source":"_posts/Worker/让团队保持Code Review习惯的三大法宝.md","raw":"---\ntitle: 让团队保持Code Review习惯的三大法宝\ntags: [Code Review]\nslug: 1479pecm0mbo\ndate: 2018-11-30 14:00:00\n---\n\n之前跟大家聊过代码审查,想要在团队中保持团队代码审查习惯,是相当困难的.\n我们必须要有合理的流程,工具与制度的支持,才能基本保证我们代码审查效率与质量.\n\n\n# 流程支持:Gitflow\n\n之前有介绍Gitflow的工作流.\n\n大致如下:\n\n- 开发者在本地仓库中新建一个专门的分支开发功能。\n- 开发者push分支修改到公开的Git仓库中。\n- 开发者通过Git发起一个Merge Request。\n- 团队的其它成员代码审查，讨论并修改。\n- 项目维护者合并功能到官方仓库中并关闭Merge Request。\n\n\n# 工具支持\n\n## 强制使用eslint\n强制使用eslint,在代码未提交之前,是用husky等工具做强制eslint.\n保证提交之后的代码,必须先过一遍eslint.\n\n## 规范提交代码的类型\n我们自己内部开发了一款简单的命令行工具,可以在我们提交代码的时候,\b定义本次提交的类型.\b\n\n方便我们后续在代码审查的时候,更加容易的理解修改的内容.\n\n### 类型如下\n\n- bug修复\n- 新特性\n- 样式修复\n- 代码重构\n- 测试代码\n- 代码回滚\n- bug修复\n- 文档更新\n- 临时提交\n\n### 命令行使用方式\n```\n? What do you want to do? 代码提交\n? 请选择Git提交类型？ (Use arrow keys)\n❯ * fixed    : bug修复\n  * feature  : 新特性\n  * style    : 样式修复\n  * refactor : 代码重构\n  * test     : 测试代码\n  * revert   : 代码回滚\n  * doc      : 文档更新\n(Move up and down to reveal more choices)\n```\n\n## Code Climate\nCode Climate是一款代码测试工具,它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaScript, CSS, Golang, Python 等。\n\n你可以将他集成到GitLab-CI或者Travis CI中,\b当代码提交后,会自动给出\b评估报告,以及修改建议.\n\n## gitlab与钉钉\n在我现在的公司中,我在gitlab的基础上做了二次开发,当有代码审查任务的时候,可以使用邮件或者钉钉通知到相关人员.\n\n如果以后钉钉DING任务开放api,我们甚至可以使用钉钉来完成我们一切的代码审查任务的管理.\n\n> 人工的代码审查\b应该在所有持续集成的工作跑完之后才进行.\n这样可以大大的减少我们审查的工作量而且还保证了一定程度的代码质量.\n\n\n# 公司的支持\n从公司层面上,也应该有相应的措施鼓励代码审查的工作.\n\n- 鼓励员工帮助别人审核代码，甚至可以做到效绩评估中。\n- 制定统一的编程规范和代码风格，特别是在那些有争议的地方，可减少很多程序员偏好带来的矛盾。\n\n\n> 这是我最近对代码审查的一些所思所想","published":1,"updated":"2024-10-09T00:58:24.564Z","_id":"cm215vevf003w7k9k6zne37v9","comments":1,"layout":"post","photos":[],"content":"<p>之前跟大家聊过代码审查,想要在团队中保持团队代码审查习惯,是相当困难的.<br>我们必须要有合理的流程,工具与制度的支持,才能基本保证我们代码审查效率与质量.</p>\n<h1 id=\"流程支持-Gitflow\"><a href=\"#流程支持-Gitflow\" class=\"headerlink\" title=\"流程支持:Gitflow\"></a>流程支持:Gitflow</h1><p>之前有介绍Gitflow的工作流.</p>\n<p>大致如下:</p>\n<ul>\n<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>\n<li>开发者push分支修改到公开的Git仓库中。</li>\n<li>开发者通过Git发起一个Merge Request。</li>\n<li>团队的其它成员代码审查，讨论并修改。</li>\n<li>项目维护者合并功能到官方仓库中并关闭Merge Request。</li>\n</ul>\n<h1 id=\"工具支持\"><a href=\"#工具支持\" class=\"headerlink\" title=\"工具支持\"></a>工具支持</h1><h2 id=\"强制使用eslint\"><a href=\"#强制使用eslint\" class=\"headerlink\" title=\"强制使用eslint\"></a>强制使用eslint</h2><p>强制使用eslint,在代码未提交之前,是用husky等工具做强制eslint.<br>保证提交之后的代码,必须先过一遍eslint.</p>\n<h2 id=\"规范提交代码的类型\"><a href=\"#规范提交代码的类型\" class=\"headerlink\" title=\"规范提交代码的类型\"></a>规范提交代码的类型</h2><p>我们自己内部开发了一款简单的命令行工具,可以在我们提交代码的时候,\b定义本次提交的类型.\b</p>\n<p>方便我们后续在代码审查的时候,更加容易的理解修改的内容.</p>\n<h3 id=\"类型如下\"><a href=\"#类型如下\" class=\"headerlink\" title=\"类型如下\"></a>类型如下</h3><ul>\n<li>bug修复</li>\n<li>新特性</li>\n<li>样式修复</li>\n<li>代码重构</li>\n<li>测试代码</li>\n<li>代码回滚</li>\n<li>bug修复</li>\n<li>文档更新</li>\n<li>临时提交</li>\n</ul>\n<h3 id=\"命令行使用方式\"><a href=\"#命令行使用方式\" class=\"headerlink\" title=\"命令行使用方式\"></a>命令行使用方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? What do you want to do? 代码提交</span><br><span class=\"line\">? 请选择Git提交类型？ (Use arrow keys)</span><br><span class=\"line\">❯ * fixed    : bug修复</span><br><span class=\"line\">  * feature  : 新特性</span><br><span class=\"line\">  * style    : 样式修复</span><br><span class=\"line\">  * refactor : 代码重构</span><br><span class=\"line\">  * test     : 测试代码</span><br><span class=\"line\">  * revert   : 代码回滚</span><br><span class=\"line\">  * doc      : 文档更新</span><br><span class=\"line\">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Code-Climate\"><a href=\"#Code-Climate\" class=\"headerlink\" title=\"Code Climate\"></a>Code Climate</h2><p>Code Climate是一款代码测试工具,它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaScript, CSS, Golang, Python 等。</p>\n<p>你可以将他集成到GitLab-CI或者Travis CI中,\b当代码提交后,会自动给出\b评估报告,以及修改建议.</p>\n<h2 id=\"gitlab与钉钉\"><a href=\"#gitlab与钉钉\" class=\"headerlink\" title=\"gitlab与钉钉\"></a>gitlab与钉钉</h2><p>在我现在的公司中,我在gitlab的基础上做了二次开发,当有代码审查任务的时候,可以使用邮件或者钉钉通知到相关人员.</p>\n<p>如果以后钉钉DING任务开放api,我们甚至可以使用钉钉来完成我们一切的代码审查任务的管理.</p>\n<blockquote>\n<p>人工的代码审查\b应该在所有持续集成的工作跑完之后才进行.<br>这样可以大大的减少我们审查的工作量而且还保证了一定程度的代码质量.</p>\n</blockquote>\n<h1 id=\"公司的支持\"><a href=\"#公司的支持\" class=\"headerlink\" title=\"公司的支持\"></a>公司的支持</h1><p>从公司层面上,也应该有相应的措施鼓励代码审查的工作.</p>\n<ul>\n<li>鼓励员工帮助别人审核代码，甚至可以做到效绩评估中。</li>\n<li>制定统一的编程规范和代码风格，特别是在那些有争议的地方，可减少很多程序员偏好带来的矛盾。</li>\n</ul>\n<blockquote>\n<p>这是我最近对代码审查的一些所思所想</p>\n</blockquote>\n","excerpt":"","more":"<p>之前跟大家聊过代码审查,想要在团队中保持团队代码审查习惯,是相当困难的.<br>我们必须要有合理的流程,工具与制度的支持,才能基本保证我们代码审查效率与质量.</p>\n<h1 id=\"流程支持-Gitflow\"><a href=\"#流程支持-Gitflow\" class=\"headerlink\" title=\"流程支持:Gitflow\"></a>流程支持:Gitflow</h1><p>之前有介绍Gitflow的工作流.</p>\n<p>大致如下:</p>\n<ul>\n<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>\n<li>开发者push分支修改到公开的Git仓库中。</li>\n<li>开发者通过Git发起一个Merge Request。</li>\n<li>团队的其它成员代码审查，讨论并修改。</li>\n<li>项目维护者合并功能到官方仓库中并关闭Merge Request。</li>\n</ul>\n<h1 id=\"工具支持\"><a href=\"#工具支持\" class=\"headerlink\" title=\"工具支持\"></a>工具支持</h1><h2 id=\"强制使用eslint\"><a href=\"#强制使用eslint\" class=\"headerlink\" title=\"强制使用eslint\"></a>强制使用eslint</h2><p>强制使用eslint,在代码未提交之前,是用husky等工具做强制eslint.<br>保证提交之后的代码,必须先过一遍eslint.</p>\n<h2 id=\"规范提交代码的类型\"><a href=\"#规范提交代码的类型\" class=\"headerlink\" title=\"规范提交代码的类型\"></a>规范提交代码的类型</h2><p>我们自己内部开发了一款简单的命令行工具,可以在我们提交代码的时候,\b定义本次提交的类型.\b</p>\n<p>方便我们后续在代码审查的时候,更加容易的理解修改的内容.</p>\n<h3 id=\"类型如下\"><a href=\"#类型如下\" class=\"headerlink\" title=\"类型如下\"></a>类型如下</h3><ul>\n<li>bug修复</li>\n<li>新特性</li>\n<li>样式修复</li>\n<li>代码重构</li>\n<li>测试代码</li>\n<li>代码回滚</li>\n<li>bug修复</li>\n<li>文档更新</li>\n<li>临时提交</li>\n</ul>\n<h3 id=\"命令行使用方式\"><a href=\"#命令行使用方式\" class=\"headerlink\" title=\"命令行使用方式\"></a>命令行使用方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? What do you want to do? 代码提交</span><br><span class=\"line\">? 请选择Git提交类型？ (Use arrow keys)</span><br><span class=\"line\">❯ * fixed    : bug修复</span><br><span class=\"line\">  * feature  : 新特性</span><br><span class=\"line\">  * style    : 样式修复</span><br><span class=\"line\">  * refactor : 代码重构</span><br><span class=\"line\">  * test     : 测试代码</span><br><span class=\"line\">  * revert   : 代码回滚</span><br><span class=\"line\">  * doc      : 文档更新</span><br><span class=\"line\">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Code-Climate\"><a href=\"#Code-Climate\" class=\"headerlink\" title=\"Code Climate\"></a>Code Climate</h2><p>Code Climate是一款代码测试工具,它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaScript, CSS, Golang, Python 等。</p>\n<p>你可以将他集成到GitLab-CI或者Travis CI中,\b当代码提交后,会自动给出\b评估报告,以及修改建议.</p>\n<h2 id=\"gitlab与钉钉\"><a href=\"#gitlab与钉钉\" class=\"headerlink\" title=\"gitlab与钉钉\"></a>gitlab与钉钉</h2><p>在我现在的公司中,我在gitlab的基础上做了二次开发,当有代码审查任务的时候,可以使用邮件或者钉钉通知到相关人员.</p>\n<p>如果以后钉钉DING任务开放api,我们甚至可以使用钉钉来完成我们一切的代码审查任务的管理.</p>\n<blockquote>\n<p>人工的代码审查\b应该在所有持续集成的工作跑完之后才进行.<br>这样可以大大的减少我们审查的工作量而且还保证了一定程度的代码质量.</p>\n</blockquote>\n<h1 id=\"公司的支持\"><a href=\"#公司的支持\" class=\"headerlink\" title=\"公司的支持\"></a>公司的支持</h1><p>从公司层面上,也应该有相应的措施鼓励代码审查的工作.</p>\n<ul>\n<li>鼓励员工帮助别人审核代码，甚至可以做到效绩评估中。</li>\n<li>制定统一的编程规范和代码风格，特别是在那些有争议的地方，可减少很多程序员偏好带来的矛盾。</li>\n</ul>\n<blockquote>\n<p>这是我最近对代码审查的一些所思所想</p>\n</blockquote>\n"},{"title":"模块联邦 远程载入","slug":"MicroFrontend/module-federation","keywords":"微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA","date":"2024-06-15T11:25:25.000Z","_content":"\n# 前言\n当项目A需要共享项目B的某一个组件，并需要保证后续的迭代中，两边保持一致。这个时候有两种做法：\n\nCV 大法，将项目B的组件完整复制到项目A\n将该组件独立，发布到内部npm，通过npm加载组件\n\nCV 大法比独立组件更快，不需要将组件从项目B独立出来，发布npm，但不能及时同步代码。\n当两个项目都使用了Webpack5，通过联邦模块只需要几行配置就可以实现在项目A同步项目B的组件。\n\n## 一.什么是联邦模块（Module Federation）\n\n> 联邦模块是webpack5提供的一个新特性，它是通过webpack原生提供的 `ModuleFederationPlugin` 插件来实现的。\n> 联邦模块主要是用来解决多个应用之间代码共享的问题，可以让我们的更加优雅的实现跨应用的代码共享\n\n联邦模块出现的动机通常认为是为了解决微前端全栈中不能在多个子应用间共享资源的问题，但联邦模块出现后又并不仅仅局限于微前端。\n模块联邦允许多个`webpack`构建一起工作。从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。使`JavaScript`应用得以在客户端或服务器上动态运行或者动态加载另一个`bundle.js`或者`build`之后生成的代码，且共享依赖。\n\n通过 `Module Federation`实现的代码共享是双向的，但每种情况都有降级方案。`Module federated`可以总是加载自己的依赖，但在下载前会去尝试使用消费者的依赖。更少的代码冗余，依赖共享就像一个单一的`Webpack`构建。\n\n## 二.如何用联邦模块实现跨应用的代码共享\n\n### <u>动态导入远程模块</u>\n\n> 当远程项目不能固定写在webpack配置中时，可以通过动态导入的方式使用联邦模块\n\n动态导入和静态导入的区别在于，需要自己实现js加载和容器连接\n\n```ts\n// host\n// 加载js标签\nfunction loadScript(src){\n  return new Promise((res, rej) =>{\n      const srcirpt = document.createElement('script')\n      script.src = src;\n      script.onload = res;\n      script.onfaild = rej\n      document.body.appendChild(script);\n  })\n}\n\n// 连接容器\nfunction loadComponent(scope, module) {\n    return async () => {\n      // 初始化共享作用域（shared scope）用提供的已知此构建和所有远程的模块填充它\n      await __webpack_init_sharing__('default');\n      const container = window[scope]; // 或从其他地方获取容器\n      // 初始化容器 它可能提供共享模块\n      await container.init(__webpack_share_scopes__.default);\n      const factory = await window[scope].get(module);\n      const Module = factory();\n      return Module;\n    };\n}\n\n// 加载远程模块的入口文件并并连接\nloadScript('http://localhost:3001/remote-entry.js').then(() => {\n  loadComponent('app', 'button').then(module => {\n      console.log(module)\n  });    \n})\n\n// remote\nmodule.exports = {\n  plugins: [new ModuleFederationPlugin({\n      name: \"app\",\n      filename: 'remote-entry.js',\n      exposes: {\n          \"button\": \"./src/button.js\"\n      },\n  })]\n}\n```\n\n[动态导入远程模块demo地址](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FBxiaoyao%2Fdynamic-remotes)\n\n### <u>静态导入远程模块</u>\n\n```ts\n// host\nmodule.exports = {\n  plugins: [new ModuleFederationPlugin({\n      name: \"host\",\n      remotes: {\n          \"app\": \"app@http://localhost:3001/remote-entry.js\"\n      },\n      shared: {\n          react: {\n              eager: true\n          }\n      }\n  })]\n}\n\n// remote\nmodule.exports = {\n  plugins: [new ModuleFederationPlugin({\n      name: \"app\",\n      filename: 'remote-entry.js',\n      exposes: {\n          \"button\": \"./src/button.js\"\n      },\n      shared: ['react']\n  })]\n}\n```\n\n[静态导入远程模块demo地址](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FBxiaoyao%2Fstatic-remotes)\n\n### <u>联邦模块的三个主要功能</u>\n\n- remotes 用来声明会引用哪些远程文件，以及从哪里来导入远程资源\n\n```ts\n// 在此项配置中，会从远程的 http://localhost:3000/app-entry.js 读取文件来加载 app 模块\nnew ModuleFederationPlugin({\n    name: \"template\",\n    remotes: {\n        app: \"http://localhost:3000/app-entry.js\"\n    }\n})\n```\n\n- exposes 用来声明会提供哪些资源供远程使用\n\n```ts\n// 此项配置会相当于建立一个新的entry入口从 ./src/button.js 文件开始进行打包生产新的资源\n// Tips: \n//   从这个entry打包的资源不会与webpack主入口的资源共享内容。即两个入口都引用了react的话，react会在两个项目中分别存在\nnew ModuleFederationPlugin({\n    name: \"template\",\n    exposes: {\n        button: \"./src/button.js\"\n    }\n})\n```\n\n- shared\n\n```ts\n// 什么哪些模块会在主项目和远程项目中共享\n// - 例如：当主项目提供了react的话，远程项目则会直接使用主项目的react模块，而不会再次从远程加载（远程项目的react会单独打包）\n// - 主项目的shared集合需要包含远程项目的shared\n// - eager: 是否立即加载模块而不是异步加载。如果在主项目的入口文件中依赖了这个模块就必须设置eager，否则报错\n// - singleton: 是否确保使用单例模式\nnew ModuleFederationPlugin({\n    name: \"template\",\n    shared: {\n        react: {\n            eager: true\n        }\n    }\n})\n```\n\n如果想看更多关于联邦模块的案例，可以访问[官方仓库](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmodule-federation%2Fmodule-federation-examples)。\n\n## 三.联邦模块的原理分析\n\n联邦模块是通过webpack原生提供的`ModuleFederationPlugin`插件来实现的，它有两个主要概念：Host（消费其他 Remote）和Remote（被 Host 消费）。每个项目可以是Host也可以是Remote，也可以两个都是。\n\n- 作为Host需要配置remote列表和shared模块。\n- 作为Remote需要配置项目名（name），打包方式（library），打包后的文件名（filename），提供的模块（exposes），和Host共享的模块（shared）。\n\n### <u>webpack打包原理</u>\n\n联邦模块是基于webpack做的优化，所以在深入联邦模块之前我们首先得知道webpack是怎么做的打包工作。\n\n通过阅读webpack打包结果可以了解到，webpack每次打包都会将资源全部包裹在一个立即执行函数里面，这样虽然避免了全局环境的污染，但也使得外部不能访问内部模块。\n\n在这个立即执行函数里面，webpack使用 `__webpack_modules__` 对象保存所有的模块代码，然后用内部定义的__webpack_require__ 方法从 `__webpack_modules__` 中加载模块。并且在异步加载和文件拆分两种情况下向全局暴露一个 webpackChunk 数组用于沟通多个webpack资源，这个数组通过被webpack重写push方法，会在其他资源向webpackChunk 数组中新增内容时同步添加到 `__webpack_modules__`  中从而实现模块整合。\n\n联邦模块就是基于这个机制，修改了 `__webpack_require__`  的部分实现，在require的时候从远程加载资源，然后合并到`__webpack_modules__` 中。\n\n**Tips：**\n\n- webpackChunk 可以通过 output.chunkLoadingGlobal 配置修改\n\n### webpack构建资源\n\nJS的模块化机制有许多的标准，不过在webpack中全部统一转化为自己实现的`__webpack_require__`\n\n### webpack单文件结构\n\n在webpack单文件结构中，所有模块的源码都存储在 `__webpack_modules__` 对象中，然后都统一使用内部定义的 `__webpack_require__` 方法来加载模块。\n\n在这种情况下，外部完全无法访问内部的运行资源\n\n```ts\n(() => {\n    var __webpack_modules__ = {\n        './src/other.js': () => {\n\t\t\t// ...\n        } \n    }\n    \n    var __webpack_module_cache__ = {} // 模块导出结果的缓存\n    \n    function __webpack_require__() {  // 内部模块导入方法\n    \t// .....\n    } \n    // .....\n    \n    \n    // 入口文件内容\n    (() => {\n        __webpack_require__('./src/other.js')\n    })()\n})()\n```\n\n### webpack多文件结构\n\n在多文件结构中，存在两个地方存储模块源码，一个是内部的 `__webpack_modules__` 对象，另一个是全局的 `webpackChunk` 数组。\n\nwebpackChunk 数组其实是起一个桥梁作用，用于将其他文件中的模块加载到入口文件的 `__webpack_modules__` 对象中，而这是通过重写 webpackChunk数组的push方法实现的。\n\n```ts\n// index.js\n(() => {\n    var __webpack_modules__ = {\n        './src/other.js': () => {\n\t\t\t// 源码\n        } \n    }\n    \n    var __webpack_module_cache__ = {} // 模块导出结果的缓存\n    \n    function __webpack_require__() {} // 内部模块导入方法\n    \n    // 向全局暴露出一个对象\n    self[\"webpackChunk\"].push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n    // 入口文件内容\n    (() => {\n        __webpack_require__('./src/other.js')\n    })()\n})()\n```\n\n```ts\n// ./src/other2.js\n(self[\"webpackChunk\"] = self[\"webpackChunk\"] || []).push([\n  [\"src_other2_js\"],\n  {\n    \"./src/other2.js\": () => {\n      console.log(\"in other2.js\");\n    }\n  }\n]);\n```\n\n### <u>ModuleFederationPlugin 的用法</u>\n\n```ts\nnew ModuleFederationPlugin({\n  name: \"app1\",\n  library: { type: \"var\", name: \"app1\" },\n  filename: \"remoteEntry.js\",\n  remotes: {\n    app2: 'app2',\n    app3: 'app3',\n  },\n  remoteType: 'var',\n  exposes: {\n    antd: './src/antd',\n    button: './src/button',\n  },\n  shared: ['react', 'react-dom'],\n  shareScope: 'default'\n})\n```\n\n配置属性：\n\n- name: 必须，唯一 ID，作为输出的模块名（容器），使用的时通过 name/{name}/name/{expose} 的方式使用；\n- library: 可选，打包方式，默认{ type: \"var\", name: options.name }，其中这里的 name 为作为 umd 的 name，是挂载在全局下的变量名；\n- filename: 可选，打包后的文件名；\n- remotes: 可选，表示当前应用是一个 Host，可以引用 Remote 中 expose 的模块；\n- remoteType: 可选，默认var，(\"var\"|\"module\"| \"assign\"|\"this\"|\"window\"|\"self\"|\"global\"|\"commonjs\"|\"commonjs2\"| \"commonjs-module\"|\"amd\"|\"amd-require\"|\"umd\"|\"umd2\"|\"jsonp\"|\"system\"|\"promise\"|\"import\"|\"script\")，远程容器的外部类型；\n- exposes:可选，表示当前应用是一个 Remote，exposes 内的模块可以被其他的 Host 引用，引用方式为 import(name/{name}/name/{expose})；\n- shared: 可选，主要是用来避免项目出现多个公共依赖，若是配置了这个属性，webpack在加载的时候会先判断本地应用是否存在对应的包，若是不存在，则加载远程应用的依赖包；\n- shareScope，可选，用于所有共享模块的共享作用域名称\n\n```ts\n// 公共依赖shared的配置项\nShared = string[] | {\n  [string]: {\n    eager?: boolean; // 是否立即加载模块而不是异步加载\n    import?: false | SharedItem; // 应该提供给共享作用域的模块。如果在共享范围中没有发现共享模块或版本无效，还充当回退模块。默认为属性名\n    packageName?: string; // 设置包名称以查找所需的版本。只有当包名不能根据请求自动确定时，才需要这样做（如要禁用自动推断，请将requiredVersion设置为false）。\n    requiredVersion?: false | string; // 共享范围内模块的版本要求\n    shareKey?: string; // 用这个名称在共享范围中查找模块\n    shareScope?: string; // 共享范围名称\n    singleton?: boolean; // 是否在共享作用域中只允许共享模块的一个版本 (单例模式).\n    strictVersion?: boolean; // 如果版本无效则不接受共享模块(默认为true，如果本地回退模块可用且共享模块不是一个单例，否则为false，如果没有指定所需的版本则无效)\n    version?: false | string; // 所提供模块的版本，将替换较低的匹配版本\n  }[]\n}\n```\n\n**Tips：**\n\n- 在使用 Module Federation 的时候一定要记得，将公共依赖配置到 shared 中。另外，一定要两个项目同时配置 shared ，否则会报错\n- 入口文件index.js本身应该没有什么逻辑，将逻辑放在bootstrap.js中，index.js去动态加载bootstrap.js。如果将逻辑直接放到index.js里，会报错，如果是公共依赖配置shared报错，可以配eager参数来解决。主要原因是如果直接在index.js执行逻辑，会依赖Remote暴露的js，此时remote.js还没有加载，就会有问题。\n\n### <u>ModuleFederationPlugin 的原理</u>\n\n`ModuleFederationPlugin`主要做了三件事：\n\n- 如何共享依赖：使用 SharePlugin\n- 如何公开模块：使用 ContainerPlugin\n- 如何引用模块：使用 ContainerReferencePlugin\n\n### SharePlugin\n\n该插件使公共依赖可共享\n\n### ContainerPlugin\n\n该插件为指定的公开模块创建entry。entry.js执行后会在window上挂一下对象，该对象有两个方法，get和init。get方法用来获取模块。init方法用来初始化容器，它可以提供共享模块。\n\n```ts\n// entry.js\nvar remote;remote = (() => {\n    // ...\n})()\n```\n\n```ts\n// remote对象里的get和init方法\nvar get = (module, getScope) => {\n\t__webpack_require__.R = getScope;\n\tgetScope = (\n\t\t__webpack_require__.o(moduleMap, module)\n\t\t\t? moduleMap[module]()\n\t\t\t: Promise.resolve().then(() => {\n\t\t\t\tthrow new Error('Module \"' + module + '\" does not exist in container.');\n\t\t\t})\n\t);\n\t__webpack_require__.R = undefined;\n\treturn getScope;\n};\nvar init = (shareScope, initScope) => {\n\tif (!__webpack_require__.S) return;\n\tvar oldScope = __webpack_require__.S[\"default\"];\n\tvar name = \"default\"\n\tif(oldScope && oldScope !== shareScope) throw new Error(\"Container initialization failed as it has already been initialized with a different share scope\");\n\t__webpack_require__.S[name] = shareScope;\n\treturn __webpack_require__.I(name, initScope);\n};\n\n// This exports getters to disallow modifications\n__webpack_require__.d(exports, {\n\tget: () => get,\n\tinit: () => init\n});\n```\n\n\n在使用Remote的模块时候，通过init将自身shared写入Remote中，再通过get获取Remote中expose的组件，而作为Remote时，判断Host中是否有可用的共享依赖，若有，则加载Host的这部分依赖，若无，则加载自身依赖。\n\n### ContainerReferencePlugin\n\n该插件将特定的引用添加到作为外部资源（externals）的容器中，并允许从这些容器中导入远程模块。在导入时会调用容器使用者提供的remote进行重载。\n\n> 通过remotes定义的模块，也会在 __webpack_modules__ 中声明但不会有具体实现，这就和异步导入类似。\n> webpack5中新增了__webpack_require__.e 方法，对通过次方法导入的模块执行一下三个函数，并且全部成功才返回。\n> - __webpack_require__.f.consumes 用来判断和消费shared模块，如果当前环境下已经有这个模块就不向远程请求\n> - __webpack_require__.f.remotes 用来连接容器\n> - __webpack_require__.f.j 用来加载JS\n\n\n四.使用场景\n\n1. 适用于新建专门的组件应用服务来管理全部组件和应用，其余业务层只须要根据本身业务所需载入对应的组件和功能模块便可\n\n2. 模块管理统一管理，代码质量高，搭建速度快。适用于矩阵app，或者可视化页面搭建等场景\n\n参考文章\n\n[webpack 5 官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Fconcepts%2Fmodule-federation%2F)\n\n[Webpack5 跨应用代码共享 - Module Federation](https://link.juejin.cn/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000024449390)\n\n[尝试webpack5 Module Federation](https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F141390589)\n\n[探索 webpack5 新特性 Module federation 引发的javascript共享模块变革](https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fyingyangxing%2Farticle%2Fdetails%2F109653116)\n\n[三大应用场景调研，Webpack 新功能 Module Federation 深入解析](https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F755252)","source":"_posts/MicroFrontend/module-federation.md","raw":"---\ntitle: 模块联邦 远程载入\ntags: [微前端,MicroFrontend,前端全栈]\nslug: ea539f7c\nkeywords: 微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA\ndate: 2024-06-15 19:25:25\n---\n\n# 前言\n当项目A需要共享项目B的某一个组件，并需要保证后续的迭代中，两边保持一致。这个时候有两种做法：\n\nCV 大法，将项目B的组件完整复制到项目A\n将该组件独立，发布到内部npm，通过npm加载组件\n\nCV 大法比独立组件更快，不需要将组件从项目B独立出来，发布npm，但不能及时同步代码。\n当两个项目都使用了Webpack5，通过联邦模块只需要几行配置就可以实现在项目A同步项目B的组件。\n\n## 一.什么是联邦模块（Module Federation）\n\n> 联邦模块是webpack5提供的一个新特性，它是通过webpack原生提供的 `ModuleFederationPlugin` 插件来实现的。\n> 联邦模块主要是用来解决多个应用之间代码共享的问题，可以让我们的更加优雅的实现跨应用的代码共享\n\n联邦模块出现的动机通常认为是为了解决微前端全栈中不能在多个子应用间共享资源的问题，但联邦模块出现后又并不仅仅局限于微前端。\n模块联邦允许多个`webpack`构建一起工作。从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。使`JavaScript`应用得以在客户端或服务器上动态运行或者动态加载另一个`bundle.js`或者`build`之后生成的代码，且共享依赖。\n\n通过 `Module Federation`实现的代码共享是双向的，但每种情况都有降级方案。`Module federated`可以总是加载自己的依赖，但在下载前会去尝试使用消费者的依赖。更少的代码冗余，依赖共享就像一个单一的`Webpack`构建。\n\n## 二.如何用联邦模块实现跨应用的代码共享\n\n### <u>动态导入远程模块</u>\n\n> 当远程项目不能固定写在webpack配置中时，可以通过动态导入的方式使用联邦模块\n\n动态导入和静态导入的区别在于，需要自己实现js加载和容器连接\n\n```ts\n// host\n// 加载js标签\nfunction loadScript(src){\n  return new Promise((res, rej) =>{\n      const srcirpt = document.createElement('script')\n      script.src = src;\n      script.onload = res;\n      script.onfaild = rej\n      document.body.appendChild(script);\n  })\n}\n\n// 连接容器\nfunction loadComponent(scope, module) {\n    return async () => {\n      // 初始化共享作用域（shared scope）用提供的已知此构建和所有远程的模块填充它\n      await __webpack_init_sharing__('default');\n      const container = window[scope]; // 或从其他地方获取容器\n      // 初始化容器 它可能提供共享模块\n      await container.init(__webpack_share_scopes__.default);\n      const factory = await window[scope].get(module);\n      const Module = factory();\n      return Module;\n    };\n}\n\n// 加载远程模块的入口文件并并连接\nloadScript('http://localhost:3001/remote-entry.js').then(() => {\n  loadComponent('app', 'button').then(module => {\n      console.log(module)\n  });    \n})\n\n// remote\nmodule.exports = {\n  plugins: [new ModuleFederationPlugin({\n      name: \"app\",\n      filename: 'remote-entry.js',\n      exposes: {\n          \"button\": \"./src/button.js\"\n      },\n  })]\n}\n```\n\n[动态导入远程模块demo地址](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FBxiaoyao%2Fdynamic-remotes)\n\n### <u>静态导入远程模块</u>\n\n```ts\n// host\nmodule.exports = {\n  plugins: [new ModuleFederationPlugin({\n      name: \"host\",\n      remotes: {\n          \"app\": \"app@http://localhost:3001/remote-entry.js\"\n      },\n      shared: {\n          react: {\n              eager: true\n          }\n      }\n  })]\n}\n\n// remote\nmodule.exports = {\n  plugins: [new ModuleFederationPlugin({\n      name: \"app\",\n      filename: 'remote-entry.js',\n      exposes: {\n          \"button\": \"./src/button.js\"\n      },\n      shared: ['react']\n  })]\n}\n```\n\n[静态导入远程模块demo地址](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FBxiaoyao%2Fstatic-remotes)\n\n### <u>联邦模块的三个主要功能</u>\n\n- remotes 用来声明会引用哪些远程文件，以及从哪里来导入远程资源\n\n```ts\n// 在此项配置中，会从远程的 http://localhost:3000/app-entry.js 读取文件来加载 app 模块\nnew ModuleFederationPlugin({\n    name: \"template\",\n    remotes: {\n        app: \"http://localhost:3000/app-entry.js\"\n    }\n})\n```\n\n- exposes 用来声明会提供哪些资源供远程使用\n\n```ts\n// 此项配置会相当于建立一个新的entry入口从 ./src/button.js 文件开始进行打包生产新的资源\n// Tips: \n//   从这个entry打包的资源不会与webpack主入口的资源共享内容。即两个入口都引用了react的话，react会在两个项目中分别存在\nnew ModuleFederationPlugin({\n    name: \"template\",\n    exposes: {\n        button: \"./src/button.js\"\n    }\n})\n```\n\n- shared\n\n```ts\n// 什么哪些模块会在主项目和远程项目中共享\n// - 例如：当主项目提供了react的话，远程项目则会直接使用主项目的react模块，而不会再次从远程加载（远程项目的react会单独打包）\n// - 主项目的shared集合需要包含远程项目的shared\n// - eager: 是否立即加载模块而不是异步加载。如果在主项目的入口文件中依赖了这个模块就必须设置eager，否则报错\n// - singleton: 是否确保使用单例模式\nnew ModuleFederationPlugin({\n    name: \"template\",\n    shared: {\n        react: {\n            eager: true\n        }\n    }\n})\n```\n\n如果想看更多关于联邦模块的案例，可以访问[官方仓库](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmodule-federation%2Fmodule-federation-examples)。\n\n## 三.联邦模块的原理分析\n\n联邦模块是通过webpack原生提供的`ModuleFederationPlugin`插件来实现的，它有两个主要概念：Host（消费其他 Remote）和Remote（被 Host 消费）。每个项目可以是Host也可以是Remote，也可以两个都是。\n\n- 作为Host需要配置remote列表和shared模块。\n- 作为Remote需要配置项目名（name），打包方式（library），打包后的文件名（filename），提供的模块（exposes），和Host共享的模块（shared）。\n\n### <u>webpack打包原理</u>\n\n联邦模块是基于webpack做的优化，所以在深入联邦模块之前我们首先得知道webpack是怎么做的打包工作。\n\n通过阅读webpack打包结果可以了解到，webpack每次打包都会将资源全部包裹在一个立即执行函数里面，这样虽然避免了全局环境的污染，但也使得外部不能访问内部模块。\n\n在这个立即执行函数里面，webpack使用 `__webpack_modules__` 对象保存所有的模块代码，然后用内部定义的__webpack_require__ 方法从 `__webpack_modules__` 中加载模块。并且在异步加载和文件拆分两种情况下向全局暴露一个 webpackChunk 数组用于沟通多个webpack资源，这个数组通过被webpack重写push方法，会在其他资源向webpackChunk 数组中新增内容时同步添加到 `__webpack_modules__`  中从而实现模块整合。\n\n联邦模块就是基于这个机制，修改了 `__webpack_require__`  的部分实现，在require的时候从远程加载资源，然后合并到`__webpack_modules__` 中。\n\n**Tips：**\n\n- webpackChunk 可以通过 output.chunkLoadingGlobal 配置修改\n\n### webpack构建资源\n\nJS的模块化机制有许多的标准，不过在webpack中全部统一转化为自己实现的`__webpack_require__`\n\n### webpack单文件结构\n\n在webpack单文件结构中，所有模块的源码都存储在 `__webpack_modules__` 对象中，然后都统一使用内部定义的 `__webpack_require__` 方法来加载模块。\n\n在这种情况下，外部完全无法访问内部的运行资源\n\n```ts\n(() => {\n    var __webpack_modules__ = {\n        './src/other.js': () => {\n\t\t\t// ...\n        } \n    }\n    \n    var __webpack_module_cache__ = {} // 模块导出结果的缓存\n    \n    function __webpack_require__() {  // 内部模块导入方法\n    \t// .....\n    } \n    // .....\n    \n    \n    // 入口文件内容\n    (() => {\n        __webpack_require__('./src/other.js')\n    })()\n})()\n```\n\n### webpack多文件结构\n\n在多文件结构中，存在两个地方存储模块源码，一个是内部的 `__webpack_modules__` 对象，另一个是全局的 `webpackChunk` 数组。\n\nwebpackChunk 数组其实是起一个桥梁作用，用于将其他文件中的模块加载到入口文件的 `__webpack_modules__` 对象中，而这是通过重写 webpackChunk数组的push方法实现的。\n\n```ts\n// index.js\n(() => {\n    var __webpack_modules__ = {\n        './src/other.js': () => {\n\t\t\t// 源码\n        } \n    }\n    \n    var __webpack_module_cache__ = {} // 模块导出结果的缓存\n    \n    function __webpack_require__() {} // 内部模块导入方法\n    \n    // 向全局暴露出一个对象\n    self[\"webpackChunk\"].push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n    // 入口文件内容\n    (() => {\n        __webpack_require__('./src/other.js')\n    })()\n})()\n```\n\n```ts\n// ./src/other2.js\n(self[\"webpackChunk\"] = self[\"webpackChunk\"] || []).push([\n  [\"src_other2_js\"],\n  {\n    \"./src/other2.js\": () => {\n      console.log(\"in other2.js\");\n    }\n  }\n]);\n```\n\n### <u>ModuleFederationPlugin 的用法</u>\n\n```ts\nnew ModuleFederationPlugin({\n  name: \"app1\",\n  library: { type: \"var\", name: \"app1\" },\n  filename: \"remoteEntry.js\",\n  remotes: {\n    app2: 'app2',\n    app3: 'app3',\n  },\n  remoteType: 'var',\n  exposes: {\n    antd: './src/antd',\n    button: './src/button',\n  },\n  shared: ['react', 'react-dom'],\n  shareScope: 'default'\n})\n```\n\n配置属性：\n\n- name: 必须，唯一 ID，作为输出的模块名（容器），使用的时通过 name/{name}/name/{expose} 的方式使用；\n- library: 可选，打包方式，默认{ type: \"var\", name: options.name }，其中这里的 name 为作为 umd 的 name，是挂载在全局下的变量名；\n- filename: 可选，打包后的文件名；\n- remotes: 可选，表示当前应用是一个 Host，可以引用 Remote 中 expose 的模块；\n- remoteType: 可选，默认var，(\"var\"|\"module\"| \"assign\"|\"this\"|\"window\"|\"self\"|\"global\"|\"commonjs\"|\"commonjs2\"| \"commonjs-module\"|\"amd\"|\"amd-require\"|\"umd\"|\"umd2\"|\"jsonp\"|\"system\"|\"promise\"|\"import\"|\"script\")，远程容器的外部类型；\n- exposes:可选，表示当前应用是一个 Remote，exposes 内的模块可以被其他的 Host 引用，引用方式为 import(name/{name}/name/{expose})；\n- shared: 可选，主要是用来避免项目出现多个公共依赖，若是配置了这个属性，webpack在加载的时候会先判断本地应用是否存在对应的包，若是不存在，则加载远程应用的依赖包；\n- shareScope，可选，用于所有共享模块的共享作用域名称\n\n```ts\n// 公共依赖shared的配置项\nShared = string[] | {\n  [string]: {\n    eager?: boolean; // 是否立即加载模块而不是异步加载\n    import?: false | SharedItem; // 应该提供给共享作用域的模块。如果在共享范围中没有发现共享模块或版本无效，还充当回退模块。默认为属性名\n    packageName?: string; // 设置包名称以查找所需的版本。只有当包名不能根据请求自动确定时，才需要这样做（如要禁用自动推断，请将requiredVersion设置为false）。\n    requiredVersion?: false | string; // 共享范围内模块的版本要求\n    shareKey?: string; // 用这个名称在共享范围中查找模块\n    shareScope?: string; // 共享范围名称\n    singleton?: boolean; // 是否在共享作用域中只允许共享模块的一个版本 (单例模式).\n    strictVersion?: boolean; // 如果版本无效则不接受共享模块(默认为true，如果本地回退模块可用且共享模块不是一个单例，否则为false，如果没有指定所需的版本则无效)\n    version?: false | string; // 所提供模块的版本，将替换较低的匹配版本\n  }[]\n}\n```\n\n**Tips：**\n\n- 在使用 Module Federation 的时候一定要记得，将公共依赖配置到 shared 中。另外，一定要两个项目同时配置 shared ，否则会报错\n- 入口文件index.js本身应该没有什么逻辑，将逻辑放在bootstrap.js中，index.js去动态加载bootstrap.js。如果将逻辑直接放到index.js里，会报错，如果是公共依赖配置shared报错，可以配eager参数来解决。主要原因是如果直接在index.js执行逻辑，会依赖Remote暴露的js，此时remote.js还没有加载，就会有问题。\n\n### <u>ModuleFederationPlugin 的原理</u>\n\n`ModuleFederationPlugin`主要做了三件事：\n\n- 如何共享依赖：使用 SharePlugin\n- 如何公开模块：使用 ContainerPlugin\n- 如何引用模块：使用 ContainerReferencePlugin\n\n### SharePlugin\n\n该插件使公共依赖可共享\n\n### ContainerPlugin\n\n该插件为指定的公开模块创建entry。entry.js执行后会在window上挂一下对象，该对象有两个方法，get和init。get方法用来获取模块。init方法用来初始化容器，它可以提供共享模块。\n\n```ts\n// entry.js\nvar remote;remote = (() => {\n    // ...\n})()\n```\n\n```ts\n// remote对象里的get和init方法\nvar get = (module, getScope) => {\n\t__webpack_require__.R = getScope;\n\tgetScope = (\n\t\t__webpack_require__.o(moduleMap, module)\n\t\t\t? moduleMap[module]()\n\t\t\t: Promise.resolve().then(() => {\n\t\t\t\tthrow new Error('Module \"' + module + '\" does not exist in container.');\n\t\t\t})\n\t);\n\t__webpack_require__.R = undefined;\n\treturn getScope;\n};\nvar init = (shareScope, initScope) => {\n\tif (!__webpack_require__.S) return;\n\tvar oldScope = __webpack_require__.S[\"default\"];\n\tvar name = \"default\"\n\tif(oldScope && oldScope !== shareScope) throw new Error(\"Container initialization failed as it has already been initialized with a different share scope\");\n\t__webpack_require__.S[name] = shareScope;\n\treturn __webpack_require__.I(name, initScope);\n};\n\n// This exports getters to disallow modifications\n__webpack_require__.d(exports, {\n\tget: () => get,\n\tinit: () => init\n});\n```\n\n\n在使用Remote的模块时候，通过init将自身shared写入Remote中，再通过get获取Remote中expose的组件，而作为Remote时，判断Host中是否有可用的共享依赖，若有，则加载Host的这部分依赖，若无，则加载自身依赖。\n\n### ContainerReferencePlugin\n\n该插件将特定的引用添加到作为外部资源（externals）的容器中，并允许从这些容器中导入远程模块。在导入时会调用容器使用者提供的remote进行重载。\n\n> 通过remotes定义的模块，也会在 __webpack_modules__ 中声明但不会有具体实现，这就和异步导入类似。\n> webpack5中新增了__webpack_require__.e 方法，对通过次方法导入的模块执行一下三个函数，并且全部成功才返回。\n> - __webpack_require__.f.consumes 用来判断和消费shared模块，如果当前环境下已经有这个模块就不向远程请求\n> - __webpack_require__.f.remotes 用来连接容器\n> - __webpack_require__.f.j 用来加载JS\n\n\n四.使用场景\n\n1. 适用于新建专门的组件应用服务来管理全部组件和应用，其余业务层只须要根据本身业务所需载入对应的组件和功能模块便可\n\n2. 模块管理统一管理，代码质量高，搭建速度快。适用于矩阵app，或者可视化页面搭建等场景\n\n参考文章\n\n[webpack 5 官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Fconcepts%2Fmodule-federation%2F)\n\n[Webpack5 跨应用代码共享 - Module Federation](https://link.juejin.cn/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000024449390)\n\n[尝试webpack5 Module Federation](https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F141390589)\n\n[探索 webpack5 新特性 Module federation 引发的javascript共享模块变革](https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fyingyangxing%2Farticle%2Fdetails%2F109653116)\n\n[三大应用场景调研，Webpack 新功能 Module Federation 深入解析](https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F755252)","published":1,"updated":"2024-10-09T10:45:07.383Z","_id":"cm217cg1o0006x99k0ref0awg","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>当项目A需要共享项目B的某一个组件，并需要保证后续的迭代中，两边保持一致。这个时候有两种做法：</p>\n<p>CV 大法，将项目B的组件完整复制到项目A<br>将该组件独立，发布到内部npm，通过npm加载组件</p>\n<p>CV 大法比独立组件更快，不需要将组件从项目B独立出来，发布npm，但不能及时同步代码。<br>当两个项目都使用了Webpack5，通过联邦模块只需要几行配置就可以实现在项目A同步项目B的组件。</p>\n<h2 id=\"一-什么是联邦模块（Module-Federation）\"><a href=\"#一-什么是联邦模块（Module-Federation）\" class=\"headerlink\" title=\"一.什么是联邦模块（Module Federation）\"></a>一.什么是联邦模块（Module Federation）</h2><blockquote>\n<p>联邦模块是webpack5提供的一个新特性，它是通过webpack原生提供的 <code>ModuleFederationPlugin</code> 插件来实现的。<br>联邦模块主要是用来解决多个应用之间代码共享的问题，可以让我们的更加优雅的实现跨应用的代码共享</p>\n</blockquote>\n<p>联邦模块出现的动机通常认为是为了解决微前端全栈中不能在多个子应用间共享资源的问题，但联邦模块出现后又并不仅仅局限于微前端。<br>模块联邦允许多个<code>webpack</code>构建一起工作。从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。使<code>JavaScript</code>应用得以在客户端或服务器上动态运行或者动态加载另一个<code>bundle.js</code>或者<code>build</code>之后生成的代码，且共享依赖。</p>\n<p>通过 <code>Module Federation</code>实现的代码共享是双向的，但每种情况都有降级方案。<code>Module federated</code>可以总是加载自己的依赖，但在下载前会去尝试使用消费者的依赖。更少的代码冗余，依赖共享就像一个单一的<code>Webpack</code>构建。</p>\n<h2 id=\"二-如何用联邦模块实现跨应用的代码共享\"><a href=\"#二-如何用联邦模块实现跨应用的代码共享\" class=\"headerlink\" title=\"二.如何用联邦模块实现跨应用的代码共享\"></a>二.如何用联邦模块实现跨应用的代码共享</h2><h3 id=\"动态导入远程模块\"><a href=\"#动态导入远程模块\" class=\"headerlink\" title=\"动态导入远程模块\"></a><u>动态导入远程模块</u></h3><blockquote>\n<p>当远程项目不能固定写在webpack配置中时，可以通过动态导入的方式使用联邦模块</p>\n</blockquote>\n<p>动态导入和静态导入的区别在于，需要自己实现js加载和容器连接</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// host</span></span><br><span class=\"line\"><span class=\"comment\">// 加载js标签</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadScript</span>(<span class=\"params\">src</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> srcirpt = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">      script.<span class=\"property\">src</span> = src;</span><br><span class=\"line\">      script.<span class=\"property\">onload</span> = res;</span><br><span class=\"line\">      script.<span class=\"property\">onfaild</span> = rej</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接容器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadComponent</span>(<span class=\"params\">scope, <span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化共享作用域（shared scope）用提供的已知此构建和所有远程的模块填充它</span></span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title function_\">__webpack_init_sharing__</span>(<span class=\"string\">&#x27;default&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> container = <span class=\"variable language_\">window</span>[scope]; <span class=\"comment\">// 或从其他地方获取容器</span></span><br><span class=\"line\">      <span class=\"comment\">// 初始化容器 它可能提供共享模块</span></span><br><span class=\"line\">      <span class=\"keyword\">await</span> container.<span class=\"title function_\">init</span>(__webpack_share_scopes__.<span class=\"property\">default</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> factory = <span class=\"keyword\">await</span> <span class=\"variable language_\">window</span>[scope].<span class=\"title function_\">get</span>(<span class=\"variable language_\">module</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title class_\">Module</span> = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Module</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载远程模块的入口文件并并连接</span></span><br><span class=\"line\"><span class=\"title function_\">loadScript</span>(<span class=\"string\">&#x27;http://localhost:3001/remote-entry.js&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">loadComponent</span>(<span class=\"string\">&#x27;app&#x27;</span>, <span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>)</span><br><span class=\"line\">  &#125;);    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// remote</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;remote-entry.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;button&quot;</span>: <span class=\"string\">&quot;./src/button.js&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/Bxiaoyao/dynamic-remotes\">动态导入远程模块demo地址</a></p>\n<h3 id=\"静态导入远程模块\"><a href=\"#静态导入远程模块\" class=\"headerlink\" title=\"静态导入远程模块\"></a><u>静态导入远程模块</u></h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// host</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;app&quot;</span>: <span class=\"string\">&quot;app@http://localhost:3001/remote-entry.js&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">react</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">eager</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// remote</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;remote-entry.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;button&quot;</span>: <span class=\"string\">&quot;./src/button.js&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">shared</span>: [<span class=\"string\">&#x27;react&#x27;</span>]</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/Bxiaoyao/static-remotes\">静态导入远程模块demo地址</a></p>\n<h3 id=\"联邦模块的三个主要功能\"><a href=\"#联邦模块的三个主要功能\" class=\"headerlink\" title=\"联邦模块的三个主要功能\"></a><u>联邦模块的三个主要功能</u></h3><ul>\n<li>remotes 用来声明会引用哪些远程文件，以及从哪里来导入远程资源</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在此项配置中，会从远程的 http://localhost:3000/app-entry.js 读取文件来加载 app 模块</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;template&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">&quot;http://localhost:3000/app-entry.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>exposes 用来声明会提供哪些资源供远程使用</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此项配置会相当于建立一个新的entry入口从 ./src/button.js 文件开始进行打包生产新的资源</span></span><br><span class=\"line\"><span class=\"comment\">// Tips: </span></span><br><span class=\"line\"><span class=\"comment\">//   从这个entry打包的资源不会与webpack主入口的资源共享内容。即两个入口都引用了react的话，react会在两个项目中分别存在</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;template&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">button</span>: <span class=\"string\">&quot;./src/button.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>shared</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 什么哪些模块会在主项目和远程项目中共享</span></span><br><span class=\"line\"><span class=\"comment\">// - 例如：当主项目提供了react的话，远程项目则会直接使用主项目的react模块，而不会再次从远程加载（远程项目的react会单独打包）</span></span><br><span class=\"line\"><span class=\"comment\">// - 主项目的shared集合需要包含远程项目的shared</span></span><br><span class=\"line\"><span class=\"comment\">// - eager: 是否立即加载模块而不是异步加载。如果在主项目的入口文件中依赖了这个模块就必须设置eager，否则报错</span></span><br><span class=\"line\"><span class=\"comment\">// - singleton: 是否确保使用单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;template&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">react</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">eager</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果想看更多关于联邦模块的案例，可以访问<a href=\"https://link.juejin.cn/?target=https://github.com/module-federation/module-federation-examples\">官方仓库</a>。</p>\n<h2 id=\"三-联邦模块的原理分析\"><a href=\"#三-联邦模块的原理分析\" class=\"headerlink\" title=\"三.联邦模块的原理分析\"></a>三.联邦模块的原理分析</h2><p>联邦模块是通过webpack原生提供的<code>ModuleFederationPlugin</code>插件来实现的，它有两个主要概念：Host（消费其他 Remote）和Remote（被 Host 消费）。每个项目可以是Host也可以是Remote，也可以两个都是。</p>\n<ul>\n<li>作为Host需要配置remote列表和shared模块。</li>\n<li>作为Remote需要配置项目名（name），打包方式（library），打包后的文件名（filename），提供的模块（exposes），和Host共享的模块（shared）。</li>\n</ul>\n<h3 id=\"webpack打包原理\"><a href=\"#webpack打包原理\" class=\"headerlink\" title=\"webpack打包原理\"></a><u>webpack打包原理</u></h3><p>联邦模块是基于webpack做的优化，所以在深入联邦模块之前我们首先得知道webpack是怎么做的打包工作。</p>\n<p>通过阅读webpack打包结果可以了解到，webpack每次打包都会将资源全部包裹在一个立即执行函数里面，这样虽然避免了全局环境的污染，但也使得外部不能访问内部模块。</p>\n<p>在这个立即执行函数里面，webpack使用 <code>__webpack_modules__</code> 对象保存所有的模块代码，然后用内部定义的__webpack_require__ 方法从 <code>__webpack_modules__</code> 中加载模块。并且在异步加载和文件拆分两种情况下向全局暴露一个 webpackChunk 数组用于沟通多个webpack资源，这个数组通过被webpack重写push方法，会在其他资源向webpackChunk 数组中新增内容时同步添加到 <code>__webpack_modules__</code>  中从而实现模块整合。</p>\n<p>联邦模块就是基于这个机制，修改了 <code>__webpack_require__</code>  的部分实现，在require的时候从远程加载资源，然后合并到<code>__webpack_modules__</code> 中。</p>\n<p><strong>Tips：</strong></p>\n<ul>\n<li>webpackChunk 可以通过 output.chunkLoadingGlobal 配置修改</li>\n</ul>\n<h3 id=\"webpack构建资源\"><a href=\"#webpack构建资源\" class=\"headerlink\" title=\"webpack构建资源\"></a>webpack构建资源</h3><p>JS的模块化机制有许多的标准，不过在webpack中全部统一转化为自己实现的<code>__webpack_require__</code></p>\n<h3 id=\"webpack单文件结构\"><a href=\"#webpack单文件结构\" class=\"headerlink\" title=\"webpack单文件结构\"></a>webpack单文件结构</h3><p>在webpack单文件结构中，所有模块的源码都存储在 <code>__webpack_modules__</code> 对象中，然后都统一使用内部定义的 <code>__webpack_require__</code> 方法来加载模块。</p>\n<p>在这种情况下，外部完全无法访问内部的运行资源</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_modules__ = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;./src/other.js&#x27;</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125; <span class=\"comment\">// 模块导出结果的缓存</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\"></span>) &#123;  <span class=\"comment\">// 内部模块导入方法</span></span><br><span class=\"line\">    \t<span class=\"comment\">// .....</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// .....</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 入口文件内容</span></span><br><span class=\"line\">    (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"string\">&#x27;./src/other.js&#x27;</span>)</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack多文件结构\"><a href=\"#webpack多文件结构\" class=\"headerlink\" title=\"webpack多文件结构\"></a>webpack多文件结构</h3><p>在多文件结构中，存在两个地方存储模块源码，一个是内部的 <code>__webpack_modules__</code> 对象，另一个是全局的 <code>webpackChunk</code> 数组。</p>\n<p>webpackChunk 数组其实是起一个桥梁作用，用于将其他文件中的模块加载到入口文件的 <code>__webpack_modules__</code> 对象中，而这是通过重写 webpackChunk数组的push方法实现的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_modules__ = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;./src/other.js&#x27;</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 源码</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125; <span class=\"comment\">// 模块导出结果的缓存</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\"></span>) &#123;&#125; <span class=\"comment\">// 内部模块导入方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 向全局暴露出一个对象</span></span><br><span class=\"line\">    self[<span class=\"string\">&quot;webpackChunk&quot;</span>].<span class=\"property\">push</span> = webpackJsonpCallback.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, chunkLoadingGlobal.<span class=\"property\">push</span>.<span class=\"title function_\">bind</span>(chunkLoadingGlobal));</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件内容</span></span><br><span class=\"line\">    (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"string\">&#x27;./src/other.js&#x27;</span>)</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./src/other2.js</span></span><br><span class=\"line\">(self[<span class=\"string\">&quot;webpackChunk&quot;</span>] = self[<span class=\"string\">&quot;webpackChunk&quot;</span>] || []).<span class=\"title function_\">push</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;src_other2_js&quot;</span>],</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;./src/other2.js&quot;</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;in other2.js&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ModuleFederationPlugin-的用法\"><a href=\"#ModuleFederationPlugin-的用法\" class=\"headerlink\" title=\"ModuleFederationPlugin 的用法\"></a><u>ModuleFederationPlugin 的用法</u></h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;app1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">library</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;var&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;app1&quot;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&quot;remoteEntry.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">app2</span>: <span class=\"string\">&#x27;app2&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">app3</span>: <span class=\"string\">&#x27;app3&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">remoteType</span>: <span class=\"string\">&#x27;var&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">antd</span>: <span class=\"string\">&#x27;./src/antd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">button</span>: <span class=\"string\">&#x27;./src/button&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">shared</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">shareScope</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>配置属性：</p>\n<ul>\n<li>name: 必须，唯一 ID，作为输出的模块名（容器），使用的时通过 name&#x2F;{name}&#x2F;name&#x2F;{expose} 的方式使用；</li>\n<li>library: 可选，打包方式，默认{ type: “var”, name: options.name }，其中这里的 name 为作为 umd 的 name，是挂载在全局下的变量名；</li>\n<li>filename: 可选，打包后的文件名；</li>\n<li>remotes: 可选，表示当前应用是一个 Host，可以引用 Remote 中 expose 的模块；</li>\n<li>remoteType: 可选，默认var，(“var”|”module”| “assign”|”this”|”window”|”self”|”global”|”commonjs”|”commonjs2”| “commonjs-module”|”amd”|”amd-require”|”umd”|”umd2”|”jsonp”|”system”|”promise”|”import”|”script”)，远程容器的外部类型；</li>\n<li>exposes:可选，表示当前应用是一个 Remote，exposes 内的模块可以被其他的 Host 引用，引用方式为 import(name&#x2F;{name}&#x2F;name&#x2F;{expose})；</li>\n<li>shared: 可选，主要是用来避免项目出现多个公共依赖，若是配置了这个属性，webpack在加载的时候会先判断本地应用是否存在对应的包，若是不存在，则加载远程应用的依赖包；</li>\n<li>shareScope，可选，用于所有共享模块的共享作用域名称</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 公共依赖shared的配置项</span></span><br><span class=\"line\"><span class=\"title class_\">Shared</span> = <span class=\"built_in\">string</span>[] | &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">string</span>]: &#123;</span><br><span class=\"line\">    eager?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// 是否立即加载模块而不是异步加载</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span>?: <span class=\"literal\">false</span> | <span class=\"title class_\">SharedItem</span>; <span class=\"comment\">// 应该提供给共享作用域的模块。如果在共享范围中没有发现共享模块或版本无效，还充当回退模块。默认为属性名</span></span><br><span class=\"line\">    packageName?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 设置包名称以查找所需的版本。只有当包名不能根据请求自动确定时，才需要这样做（如要禁用自动推断，请将requiredVersion设置为false）。</span></span><br><span class=\"line\">    requiredVersion?: <span class=\"literal\">false</span> | <span class=\"built_in\">string</span>; <span class=\"comment\">// 共享范围内模块的版本要求</span></span><br><span class=\"line\">    shareKey?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 用这个名称在共享范围中查找模块</span></span><br><span class=\"line\">    shareScope?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 共享范围名称</span></span><br><span class=\"line\">    singleton?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// 是否在共享作用域中只允许共享模块的一个版本 (单例模式).</span></span><br><span class=\"line\">    strictVersion?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// 如果版本无效则不接受共享模块(默认为true，如果本地回退模块可用且共享模块不是一个单例，否则为false，如果没有指定所需的版本则无效)</span></span><br><span class=\"line\">    version?: <span class=\"literal\">false</span> | <span class=\"built_in\">string</span>; <span class=\"comment\">// 所提供模块的版本，将替换较低的匹配版本</span></span><br><span class=\"line\">  &#125;[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tips：</strong></p>\n<ul>\n<li>在使用 Module Federation 的时候一定要记得，将公共依赖配置到 shared 中。另外，一定要两个项目同时配置 shared ，否则会报错</li>\n<li>入口文件index.js本身应该没有什么逻辑，将逻辑放在bootstrap.js中，index.js去动态加载bootstrap.js。如果将逻辑直接放到index.js里，会报错，如果是公共依赖配置shared报错，可以配eager参数来解决。主要原因是如果直接在index.js执行逻辑，会依赖Remote暴露的js，此时remote.js还没有加载，就会有问题。</li>\n</ul>\n<h3 id=\"ModuleFederationPlugin-的原理\"><a href=\"#ModuleFederationPlugin-的原理\" class=\"headerlink\" title=\"ModuleFederationPlugin 的原理\"></a><u>ModuleFederationPlugin 的原理</u></h3><p><code>ModuleFederationPlugin</code>主要做了三件事：</p>\n<ul>\n<li>如何共享依赖：使用 SharePlugin</li>\n<li>如何公开模块：使用 ContainerPlugin</li>\n<li>如何引用模块：使用 ContainerReferencePlugin</li>\n</ul>\n<h3 id=\"SharePlugin\"><a href=\"#SharePlugin\" class=\"headerlink\" title=\"SharePlugin\"></a>SharePlugin</h3><p>该插件使公共依赖可共享</p>\n<h3 id=\"ContainerPlugin\"><a href=\"#ContainerPlugin\" class=\"headerlink\" title=\"ContainerPlugin\"></a>ContainerPlugin</h3><p>该插件为指定的公开模块创建entry。entry.js执行后会在window上挂一下对象，该对象有两个方法，get和init。get方法用来获取模块。init方法用来初始化容器，它可以提供共享模块。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> remote;remote = (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// remote对象里的get和init方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">get</span> = (<span class=\"params\"><span class=\"variable language_\">module</span>, getScope</span>) =&gt; &#123;</span><br><span class=\"line\">\t__webpack_require__.<span class=\"property\">R</span> = getScope;</span><br><span class=\"line\">\tgetScope = (</span><br><span class=\"line\">\t\t__webpack_require__.<span class=\"title function_\">o</span>(moduleMap, <span class=\"variable language_\">module</span>)</span><br><span class=\"line\">\t\t\t? moduleMap[<span class=\"variable language_\">module</span>]()</span><br><span class=\"line\">\t\t\t: <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Module &quot;&#x27;</span> + <span class=\"variable language_\">module</span> + <span class=\"string\">&#x27;&quot; does not exist in container.&#x27;</span>);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t__webpack_require__.<span class=\"property\">R</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getScope;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">init</span> = (<span class=\"params\">shareScope, initScope</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!__webpack_require__.<span class=\"property\">S</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> oldScope = __webpack_require__.<span class=\"property\">S</span>[<span class=\"string\">&quot;default&quot;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(oldScope &amp;&amp; oldScope !== shareScope) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Container initialization failed as it has already been initialized with a different share scope&quot;</span>);</span><br><span class=\"line\">\t__webpack_require__.<span class=\"property\">S</span>[name] = shareScope;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __webpack_require__.<span class=\"title function_\">I</span>(name, initScope);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This exports getters to disallow modifications</span></span><br><span class=\"line\">__webpack_require__.<span class=\"title function_\">d</span>(<span class=\"built_in\">exports</span>, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> get,</span><br><span class=\"line\">\t<span class=\"attr\">init</span>: <span class=\"function\">() =&gt;</span> init</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>在使用Remote的模块时候，通过init将自身shared写入Remote中，再通过get获取Remote中expose的组件，而作为Remote时，判断Host中是否有可用的共享依赖，若有，则加载Host的这部分依赖，若无，则加载自身依赖。</p>\n<h3 id=\"ContainerReferencePlugin\"><a href=\"#ContainerReferencePlugin\" class=\"headerlink\" title=\"ContainerReferencePlugin\"></a>ContainerReferencePlugin</h3><p>该插件将特定的引用添加到作为外部资源（externals）的容器中，并允许从这些容器中导入远程模块。在导入时会调用容器使用者提供的remote进行重载。</p>\n<blockquote>\n<p>通过remotes定义的模块，也会在 <strong>webpack_modules</strong> 中声明但不会有具体实现，这就和异步导入类似。<br>webpack5中新增了__webpack_require__.e 方法，对通过次方法导入的模块执行一下三个函数，并且全部成功才返回。</p>\n<ul>\n<li><strong>webpack_require</strong>.f.consumes 用来判断和消费shared模块，如果当前环境下已经有这个模块就不向远程请求</li>\n<li><strong>webpack_require</strong>.f.remotes 用来连接容器</li>\n<li><strong>webpack_require</strong>.f.j 用来加载JS</li>\n</ul>\n</blockquote>\n<p>四.使用场景</p>\n<ol>\n<li><p>适用于新建专门的组件应用服务来管理全部组件和应用，其余业务层只须要根据本身业务所需载入对应的组件和功能模块便可</p>\n</li>\n<li><p>模块管理统一管理，代码质量高，搭建速度快。适用于矩阵app，或者可视化页面搭建等场景</p>\n</li>\n</ol>\n<p>参考文章</p>\n<p><a href=\"https://link.juejin.cn/?target=https://webpack.docschina.org/concepts/module-federation/\">webpack 5 官方文档</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://segmentfault.com/a/1190000024449390\">Webpack5 跨应用代码共享 - Module Federation</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/141390589\">尝试webpack5 Module Federation</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://blog.csdn.net/yingyangxing/article/details/109653116\">探索 webpack5 新特性 Module federation 引发的javascript共享模块变革</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://developer.aliyun.com/article/755252\">三大应用场景调研，Webpack 新功能 Module Federation 深入解析</a></p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>当项目A需要共享项目B的某一个组件，并需要保证后续的迭代中，两边保持一致。这个时候有两种做法：</p>\n<p>CV 大法，将项目B的组件完整复制到项目A<br>将该组件独立，发布到内部npm，通过npm加载组件</p>\n<p>CV 大法比独立组件更快，不需要将组件从项目B独立出来，发布npm，但不能及时同步代码。<br>当两个项目都使用了Webpack5，通过联邦模块只需要几行配置就可以实现在项目A同步项目B的组件。</p>\n<h2 id=\"一-什么是联邦模块（Module-Federation）\"><a href=\"#一-什么是联邦模块（Module-Federation）\" class=\"headerlink\" title=\"一.什么是联邦模块（Module Federation）\"></a>一.什么是联邦模块（Module Federation）</h2><blockquote>\n<p>联邦模块是webpack5提供的一个新特性，它是通过webpack原生提供的 <code>ModuleFederationPlugin</code> 插件来实现的。<br>联邦模块主要是用来解决多个应用之间代码共享的问题，可以让我们的更加优雅的实现跨应用的代码共享</p>\n</blockquote>\n<p>联邦模块出现的动机通常认为是为了解决微前端全栈中不能在多个子应用间共享资源的问题，但联邦模块出现后又并不仅仅局限于微前端。<br>模块联邦允许多个<code>webpack</code>构建一起工作。从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。使<code>JavaScript</code>应用得以在客户端或服务器上动态运行或者动态加载另一个<code>bundle.js</code>或者<code>build</code>之后生成的代码，且共享依赖。</p>\n<p>通过 <code>Module Federation</code>实现的代码共享是双向的，但每种情况都有降级方案。<code>Module federated</code>可以总是加载自己的依赖，但在下载前会去尝试使用消费者的依赖。更少的代码冗余，依赖共享就像一个单一的<code>Webpack</code>构建。</p>\n<h2 id=\"二-如何用联邦模块实现跨应用的代码共享\"><a href=\"#二-如何用联邦模块实现跨应用的代码共享\" class=\"headerlink\" title=\"二.如何用联邦模块实现跨应用的代码共享\"></a>二.如何用联邦模块实现跨应用的代码共享</h2><h3 id=\"动态导入远程模块\"><a href=\"#动态导入远程模块\" class=\"headerlink\" title=\"动态导入远程模块\"></a><u>动态导入远程模块</u></h3><blockquote>\n<p>当远程项目不能固定写在webpack配置中时，可以通过动态导入的方式使用联邦模块</p>\n</blockquote>\n<p>动态导入和静态导入的区别在于，需要自己实现js加载和容器连接</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// host</span></span><br><span class=\"line\"><span class=\"comment\">// 加载js标签</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadScript</span>(<span class=\"params\">src</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> srcirpt = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">      script.<span class=\"property\">src</span> = src;</span><br><span class=\"line\">      script.<span class=\"property\">onload</span> = res;</span><br><span class=\"line\">      script.<span class=\"property\">onfaild</span> = rej</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接容器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadComponent</span>(<span class=\"params\">scope, <span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化共享作用域（shared scope）用提供的已知此构建和所有远程的模块填充它</span></span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title function_\">__webpack_init_sharing__</span>(<span class=\"string\">&#x27;default&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> container = <span class=\"variable language_\">window</span>[scope]; <span class=\"comment\">// 或从其他地方获取容器</span></span><br><span class=\"line\">      <span class=\"comment\">// 初始化容器 它可能提供共享模块</span></span><br><span class=\"line\">      <span class=\"keyword\">await</span> container.<span class=\"title function_\">init</span>(__webpack_share_scopes__.<span class=\"property\">default</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> factory = <span class=\"keyword\">await</span> <span class=\"variable language_\">window</span>[scope].<span class=\"title function_\">get</span>(<span class=\"variable language_\">module</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title class_\">Module</span> = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Module</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载远程模块的入口文件并并连接</span></span><br><span class=\"line\"><span class=\"title function_\">loadScript</span>(<span class=\"string\">&#x27;http://localhost:3001/remote-entry.js&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">loadComponent</span>(<span class=\"string\">&#x27;app&#x27;</span>, <span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>)</span><br><span class=\"line\">  &#125;);    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// remote</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;remote-entry.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;button&quot;</span>: <span class=\"string\">&quot;./src/button.js&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/Bxiaoyao/dynamic-remotes\">动态导入远程模块demo地址</a></p>\n<h3 id=\"静态导入远程模块\"><a href=\"#静态导入远程模块\" class=\"headerlink\" title=\"静态导入远程模块\"></a><u>静态导入远程模块</u></h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// host</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;app&quot;</span>: <span class=\"string\">&quot;app@http://localhost:3001/remote-entry.js&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">react</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">eager</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// remote</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;remote-entry.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;button&quot;</span>: <span class=\"string\">&quot;./src/button.js&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">shared</span>: [<span class=\"string\">&#x27;react&#x27;</span>]</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/Bxiaoyao/static-remotes\">静态导入远程模块demo地址</a></p>\n<h3 id=\"联邦模块的三个主要功能\"><a href=\"#联邦模块的三个主要功能\" class=\"headerlink\" title=\"联邦模块的三个主要功能\"></a><u>联邦模块的三个主要功能</u></h3><ul>\n<li>remotes 用来声明会引用哪些远程文件，以及从哪里来导入远程资源</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在此项配置中，会从远程的 http://localhost:3000/app-entry.js 读取文件来加载 app 模块</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;template&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">&quot;http://localhost:3000/app-entry.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>exposes 用来声明会提供哪些资源供远程使用</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此项配置会相当于建立一个新的entry入口从 ./src/button.js 文件开始进行打包生产新的资源</span></span><br><span class=\"line\"><span class=\"comment\">// Tips: </span></span><br><span class=\"line\"><span class=\"comment\">//   从这个entry打包的资源不会与webpack主入口的资源共享内容。即两个入口都引用了react的话，react会在两个项目中分别存在</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;template&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">button</span>: <span class=\"string\">&quot;./src/button.js&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>shared</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 什么哪些模块会在主项目和远程项目中共享</span></span><br><span class=\"line\"><span class=\"comment\">// - 例如：当主项目提供了react的话，远程项目则会直接使用主项目的react模块，而不会再次从远程加载（远程项目的react会单独打包）</span></span><br><span class=\"line\"><span class=\"comment\">// - 主项目的shared集合需要包含远程项目的shared</span></span><br><span class=\"line\"><span class=\"comment\">// - eager: 是否立即加载模块而不是异步加载。如果在主项目的入口文件中依赖了这个模块就必须设置eager，否则报错</span></span><br><span class=\"line\"><span class=\"comment\">// - singleton: 是否确保使用单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;template&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">react</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">eager</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果想看更多关于联邦模块的案例，可以访问<a href=\"https://link.juejin.cn/?target=https://github.com/module-federation/module-federation-examples\">官方仓库</a>。</p>\n<h2 id=\"三-联邦模块的原理分析\"><a href=\"#三-联邦模块的原理分析\" class=\"headerlink\" title=\"三.联邦模块的原理分析\"></a>三.联邦模块的原理分析</h2><p>联邦模块是通过webpack原生提供的<code>ModuleFederationPlugin</code>插件来实现的，它有两个主要概念：Host（消费其他 Remote）和Remote（被 Host 消费）。每个项目可以是Host也可以是Remote，也可以两个都是。</p>\n<ul>\n<li>作为Host需要配置remote列表和shared模块。</li>\n<li>作为Remote需要配置项目名（name），打包方式（library），打包后的文件名（filename），提供的模块（exposes），和Host共享的模块（shared）。</li>\n</ul>\n<h3 id=\"webpack打包原理\"><a href=\"#webpack打包原理\" class=\"headerlink\" title=\"webpack打包原理\"></a><u>webpack打包原理</u></h3><p>联邦模块是基于webpack做的优化，所以在深入联邦模块之前我们首先得知道webpack是怎么做的打包工作。</p>\n<p>通过阅读webpack打包结果可以了解到，webpack每次打包都会将资源全部包裹在一个立即执行函数里面，这样虽然避免了全局环境的污染，但也使得外部不能访问内部模块。</p>\n<p>在这个立即执行函数里面，webpack使用 <code>__webpack_modules__</code> 对象保存所有的模块代码，然后用内部定义的__webpack_require__ 方法从 <code>__webpack_modules__</code> 中加载模块。并且在异步加载和文件拆分两种情况下向全局暴露一个 webpackChunk 数组用于沟通多个webpack资源，这个数组通过被webpack重写push方法，会在其他资源向webpackChunk 数组中新增内容时同步添加到 <code>__webpack_modules__</code>  中从而实现模块整合。</p>\n<p>联邦模块就是基于这个机制，修改了 <code>__webpack_require__</code>  的部分实现，在require的时候从远程加载资源，然后合并到<code>__webpack_modules__</code> 中。</p>\n<p><strong>Tips：</strong></p>\n<ul>\n<li>webpackChunk 可以通过 output.chunkLoadingGlobal 配置修改</li>\n</ul>\n<h3 id=\"webpack构建资源\"><a href=\"#webpack构建资源\" class=\"headerlink\" title=\"webpack构建资源\"></a>webpack构建资源</h3><p>JS的模块化机制有许多的标准，不过在webpack中全部统一转化为自己实现的<code>__webpack_require__</code></p>\n<h3 id=\"webpack单文件结构\"><a href=\"#webpack单文件结构\" class=\"headerlink\" title=\"webpack单文件结构\"></a>webpack单文件结构</h3><p>在webpack单文件结构中，所有模块的源码都存储在 <code>__webpack_modules__</code> 对象中，然后都统一使用内部定义的 <code>__webpack_require__</code> 方法来加载模块。</p>\n<p>在这种情况下，外部完全无法访问内部的运行资源</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_modules__ = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;./src/other.js&#x27;</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125; <span class=\"comment\">// 模块导出结果的缓存</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\"></span>) &#123;  <span class=\"comment\">// 内部模块导入方法</span></span><br><span class=\"line\">    \t<span class=\"comment\">// .....</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// .....</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 入口文件内容</span></span><br><span class=\"line\">    (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"string\">&#x27;./src/other.js&#x27;</span>)</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack多文件结构\"><a href=\"#webpack多文件结构\" class=\"headerlink\" title=\"webpack多文件结构\"></a>webpack多文件结构</h3><p>在多文件结构中，存在两个地方存储模块源码，一个是内部的 <code>__webpack_modules__</code> 对象，另一个是全局的 <code>webpackChunk</code> 数组。</p>\n<p>webpackChunk 数组其实是起一个桥梁作用，用于将其他文件中的模块加载到入口文件的 <code>__webpack_modules__</code> 对象中，而这是通过重写 webpackChunk数组的push方法实现的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_modules__ = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;./src/other.js&#x27;</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 源码</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125; <span class=\"comment\">// 模块导出结果的缓存</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\"></span>) &#123;&#125; <span class=\"comment\">// 内部模块导入方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 向全局暴露出一个对象</span></span><br><span class=\"line\">    self[<span class=\"string\">&quot;webpackChunk&quot;</span>].<span class=\"property\">push</span> = webpackJsonpCallback.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, chunkLoadingGlobal.<span class=\"property\">push</span>.<span class=\"title function_\">bind</span>(chunkLoadingGlobal));</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件内容</span></span><br><span class=\"line\">    (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"string\">&#x27;./src/other.js&#x27;</span>)</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./src/other2.js</span></span><br><span class=\"line\">(self[<span class=\"string\">&quot;webpackChunk&quot;</span>] = self[<span class=\"string\">&quot;webpackChunk&quot;</span>] || []).<span class=\"title function_\">push</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;src_other2_js&quot;</span>],</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;./src/other2.js&quot;</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;in other2.js&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ModuleFederationPlugin-的用法\"><a href=\"#ModuleFederationPlugin-的用法\" class=\"headerlink\" title=\"ModuleFederationPlugin 的用法\"></a><u>ModuleFederationPlugin 的用法</u></h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;app1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">library</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;var&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;app1&quot;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&quot;remoteEntry.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">app2</span>: <span class=\"string\">&#x27;app2&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">app3</span>: <span class=\"string\">&#x27;app3&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">remoteType</span>: <span class=\"string\">&#x27;var&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">antd</span>: <span class=\"string\">&#x27;./src/antd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">button</span>: <span class=\"string\">&#x27;./src/button&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">shared</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">shareScope</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>配置属性：</p>\n<ul>\n<li>name: 必须，唯一 ID，作为输出的模块名（容器），使用的时通过 name&#x2F;{name}&#x2F;name&#x2F;{expose} 的方式使用；</li>\n<li>library: 可选，打包方式，默认{ type: “var”, name: options.name }，其中这里的 name 为作为 umd 的 name，是挂载在全局下的变量名；</li>\n<li>filename: 可选，打包后的文件名；</li>\n<li>remotes: 可选，表示当前应用是一个 Host，可以引用 Remote 中 expose 的模块；</li>\n<li>remoteType: 可选，默认var，(“var”|”module”| “assign”|”this”|”window”|”self”|”global”|”commonjs”|”commonjs2”| “commonjs-module”|”amd”|”amd-require”|”umd”|”umd2”|”jsonp”|”system”|”promise”|”import”|”script”)，远程容器的外部类型；</li>\n<li>exposes:可选，表示当前应用是一个 Remote，exposes 内的模块可以被其他的 Host 引用，引用方式为 import(name&#x2F;{name}&#x2F;name&#x2F;{expose})；</li>\n<li>shared: 可选，主要是用来避免项目出现多个公共依赖，若是配置了这个属性，webpack在加载的时候会先判断本地应用是否存在对应的包，若是不存在，则加载远程应用的依赖包；</li>\n<li>shareScope，可选，用于所有共享模块的共享作用域名称</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 公共依赖shared的配置项</span></span><br><span class=\"line\"><span class=\"title class_\">Shared</span> = <span class=\"built_in\">string</span>[] | &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">string</span>]: &#123;</span><br><span class=\"line\">    eager?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// 是否立即加载模块而不是异步加载</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span>?: <span class=\"literal\">false</span> | <span class=\"title class_\">SharedItem</span>; <span class=\"comment\">// 应该提供给共享作用域的模块。如果在共享范围中没有发现共享模块或版本无效，还充当回退模块。默认为属性名</span></span><br><span class=\"line\">    packageName?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 设置包名称以查找所需的版本。只有当包名不能根据请求自动确定时，才需要这样做（如要禁用自动推断，请将requiredVersion设置为false）。</span></span><br><span class=\"line\">    requiredVersion?: <span class=\"literal\">false</span> | <span class=\"built_in\">string</span>; <span class=\"comment\">// 共享范围内模块的版本要求</span></span><br><span class=\"line\">    shareKey?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 用这个名称在共享范围中查找模块</span></span><br><span class=\"line\">    shareScope?: <span class=\"built_in\">string</span>; <span class=\"comment\">// 共享范围名称</span></span><br><span class=\"line\">    singleton?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// 是否在共享作用域中只允许共享模块的一个版本 (单例模式).</span></span><br><span class=\"line\">    strictVersion?: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// 如果版本无效则不接受共享模块(默认为true，如果本地回退模块可用且共享模块不是一个单例，否则为false，如果没有指定所需的版本则无效)</span></span><br><span class=\"line\">    version?: <span class=\"literal\">false</span> | <span class=\"built_in\">string</span>; <span class=\"comment\">// 所提供模块的版本，将替换较低的匹配版本</span></span><br><span class=\"line\">  &#125;[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tips：</strong></p>\n<ul>\n<li>在使用 Module Federation 的时候一定要记得，将公共依赖配置到 shared 中。另外，一定要两个项目同时配置 shared ，否则会报错</li>\n<li>入口文件index.js本身应该没有什么逻辑，将逻辑放在bootstrap.js中，index.js去动态加载bootstrap.js。如果将逻辑直接放到index.js里，会报错，如果是公共依赖配置shared报错，可以配eager参数来解决。主要原因是如果直接在index.js执行逻辑，会依赖Remote暴露的js，此时remote.js还没有加载，就会有问题。</li>\n</ul>\n<h3 id=\"ModuleFederationPlugin-的原理\"><a href=\"#ModuleFederationPlugin-的原理\" class=\"headerlink\" title=\"ModuleFederationPlugin 的原理\"></a><u>ModuleFederationPlugin 的原理</u></h3><p><code>ModuleFederationPlugin</code>主要做了三件事：</p>\n<ul>\n<li>如何共享依赖：使用 SharePlugin</li>\n<li>如何公开模块：使用 ContainerPlugin</li>\n<li>如何引用模块：使用 ContainerReferencePlugin</li>\n</ul>\n<h3 id=\"SharePlugin\"><a href=\"#SharePlugin\" class=\"headerlink\" title=\"SharePlugin\"></a>SharePlugin</h3><p>该插件使公共依赖可共享</p>\n<h3 id=\"ContainerPlugin\"><a href=\"#ContainerPlugin\" class=\"headerlink\" title=\"ContainerPlugin\"></a>ContainerPlugin</h3><p>该插件为指定的公开模块创建entry。entry.js执行后会在window上挂一下对象，该对象有两个方法，get和init。get方法用来获取模块。init方法用来初始化容器，它可以提供共享模块。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> remote;remote = (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// remote对象里的get和init方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">get</span> = (<span class=\"params\"><span class=\"variable language_\">module</span>, getScope</span>) =&gt; &#123;</span><br><span class=\"line\">\t__webpack_require__.<span class=\"property\">R</span> = getScope;</span><br><span class=\"line\">\tgetScope = (</span><br><span class=\"line\">\t\t__webpack_require__.<span class=\"title function_\">o</span>(moduleMap, <span class=\"variable language_\">module</span>)</span><br><span class=\"line\">\t\t\t? moduleMap[<span class=\"variable language_\">module</span>]()</span><br><span class=\"line\">\t\t\t: <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Module &quot;&#x27;</span> + <span class=\"variable language_\">module</span> + <span class=\"string\">&#x27;&quot; does not exist in container.&#x27;</span>);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t__webpack_require__.<span class=\"property\">R</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getScope;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">init</span> = (<span class=\"params\">shareScope, initScope</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!__webpack_require__.<span class=\"property\">S</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> oldScope = __webpack_require__.<span class=\"property\">S</span>[<span class=\"string\">&quot;default&quot;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(oldScope &amp;&amp; oldScope !== shareScope) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Container initialization failed as it has already been initialized with a different share scope&quot;</span>);</span><br><span class=\"line\">\t__webpack_require__.<span class=\"property\">S</span>[name] = shareScope;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __webpack_require__.<span class=\"title function_\">I</span>(name, initScope);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This exports getters to disallow modifications</span></span><br><span class=\"line\">__webpack_require__.<span class=\"title function_\">d</span>(<span class=\"built_in\">exports</span>, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> get,</span><br><span class=\"line\">\t<span class=\"attr\">init</span>: <span class=\"function\">() =&gt;</span> init</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>在使用Remote的模块时候，通过init将自身shared写入Remote中，再通过get获取Remote中expose的组件，而作为Remote时，判断Host中是否有可用的共享依赖，若有，则加载Host的这部分依赖，若无，则加载自身依赖。</p>\n<h3 id=\"ContainerReferencePlugin\"><a href=\"#ContainerReferencePlugin\" class=\"headerlink\" title=\"ContainerReferencePlugin\"></a>ContainerReferencePlugin</h3><p>该插件将特定的引用添加到作为外部资源（externals）的容器中，并允许从这些容器中导入远程模块。在导入时会调用容器使用者提供的remote进行重载。</p>\n<blockquote>\n<p>通过remotes定义的模块，也会在 <strong>webpack_modules</strong> 中声明但不会有具体实现，这就和异步导入类似。<br>webpack5中新增了__webpack_require__.e 方法，对通过次方法导入的模块执行一下三个函数，并且全部成功才返回。</p>\n<ul>\n<li><strong>webpack_require</strong>.f.consumes 用来判断和消费shared模块，如果当前环境下已经有这个模块就不向远程请求</li>\n<li><strong>webpack_require</strong>.f.remotes 用来连接容器</li>\n<li><strong>webpack_require</strong>.f.j 用来加载JS</li>\n</ul>\n</blockquote>\n<p>四.使用场景</p>\n<ol>\n<li><p>适用于新建专门的组件应用服务来管理全部组件和应用，其余业务层只须要根据本身业务所需载入对应的组件和功能模块便可</p>\n</li>\n<li><p>模块管理统一管理，代码质量高，搭建速度快。适用于矩阵app，或者可视化页面搭建等场景</p>\n</li>\n</ol>\n<p>参考文章</p>\n<p><a href=\"https://link.juejin.cn/?target=https://webpack.docschina.org/concepts/module-federation/\">webpack 5 官方文档</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://segmentfault.com/a/1190000024449390\">Webpack5 跨应用代码共享 - Module Federation</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/141390589\">尝试webpack5 Module Federation</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://blog.csdn.net/yingyangxing/article/details/109653116\">探索 webpack5 新特性 Module federation 引发的javascript共享模块变革</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://developer.aliyun.com/article/755252\">三大应用场景调研，Webpack 新功能 Module Federation 深入解析</a></p>\n"},{"title":"React Fiber架构解读 - 思考","slug":"react/Fiber架构","keywords":"前端全栈,React Fiber","date":"2024-03-01T14:17:36.000Z","_content":"\n## React Fiber架构解读\n\n> 前言\n> 记录一下自己学习react fiber架构的一个过程\n\n由于js**单线程阻塞式**的特性， 导致浏览器在同一时间， 只能干一件事。\n所以对现在的前端框架而言，快速完成计算并且响应用户的操作成为了各大框架需要的解决的首要问题。\n\n- vue:  尽可能的把每个单元(模版/组件)划分的足够小 ， 同时基于响应式数据的通知机制， 可以保证数据改变后， 精确的控制到每个单元进行更新。\n- react:   react16之前， 每次更新， 都会从根节点的虚拟DOM开始进行比对，所以当数据量特别大的时候， 会非常耗费性能。也会导致用户输入的时候， 卡顿 在dom比对的过程中\n\n直到.....react16采用了全新的fiber架构。\n\n\n\n#### 目标：\n\n通过本篇文章， 希望达到以下目标\n\n1. React fiber架构简介\n2. React fiber的渲染过程分析\n\n\n\n#### fiber架构简介\n\n> 何为fiber架构\n\nfiber是一种数据结构， 也可以说是一个任务单元。\n\nReact16的fiber架构就是**基于fiber这种数据结构**实现的一种时间切片式的可拆分，可中断的调和器架构（Fiber Reconciler）。\n\n\n\n#### fiber架构的优势\n\n- 它把之前作为一个整体的dom diff和渲染过程拆分成一个细小的fiber单元， \n\n  使整个渲染过程可以被中断， 让位给高优先级的任务， 等到浏览器空闲时间再回复渲染。\n\n- 发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应\n\n- 快速响应用户操作， 让用户觉得够快， 不阻塞用户操作\n\n![](./fiber1.png)\n\n#### fiber单元\n\n那么, fiber到底是一种什么样的数据结构呢\n\n```js\n{\n      tag: string,   // 当前节点的名称\n      type: string,  // 当前节点的类型， 标志着当前节点是一种类组件，或者函数组件， 或者是一种原生dom标签等\n      props: Object, \n      stateNode: Object, // 当前节点的实例/真实dom \n      return: Fiber, // 当前fiber节点的父节点\n      alternate: Fiber, // 上一次更新的Fiber树\n      child: Fiber, // 指向第一个子节点\n      siblings: Fiber, // 指向兄弟节点\n      effectTag: UPDATE, // 副作用标示  render阶段我们会收集副作用， 增加删除 更新\n      nextEffect: null, // effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去\n}\n```\n\n在react中， 每个节点都是这样的一个fiber结构单元， 基于这种结构单元， react将整个页面组装成了一个链表结构。 即每一个fiber节点单元中， 都会有一个指针，指向下一个要跟新的单元。 如图所示\n\n![](./fiber2.png)\n\n流程解析：\n\n- 浏览器开始调度， 会从根节点开始处理virtual DOM(createElement返回结果)， 将其和它的Children转化为fiber单元。\n- A1节点作为根节点的一个字元素， 转化成fiber单元后，除了基础的一些信息(tag, type), 比较重要的是两个属性， 一个是return， 指向于A1节点的父节点， 一个是child, 指向于A1节点的第一个children, B1, 还有一个siblings， 指向于A1的兄弟节点\n- A1的fiber单元处理完成之后， 会处理他的child（B1）,   检查B1有没有child， 如果存在的话， 处理B1的child C1节点\n- C1节点处理完之后， 发现C1没有子元素了， 那么处理C1的兄弟节点C2。 \n- C2即没有child也没有silbing兄弟节点， 那么拿到他的return父节点B1\n- B1之前已经处理过child了， 开始处理B1的slibings节点。 处理完成之后返回到B1的父节点A1\n- reconciliation阶段结束\n\n接下来通过代码分析这个过程\n\n#### React Fiber架构的渲染流程\n\n1. 用户调用**ReactDOM.render**方法 \n\n   ```jsx\n   ReactDOM.render(<Component name=\"越祈\" />, document.getElementById('root'))\n   ```\n\n2. 浏览器调用**requestIdleCallback**方法，开启调度\n\n   ```js\n   // 循环执行工作\n   function workLoop(deadline) {\n       let shouldYield = false; // 是否让出时间片或者说控制权\n       while(nextUnitOfWork && !shouldYield) {\n           nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\n   \n           shouldYield = deadline.timeRemaining() < 1; // 没有时间了， 让出控制权\n       }\n   \n       if(!nextUnitOfWork && workInProgressRoot) {\n           console.log('render阶段结束')\n           commitRoot()\n       }\n       // 告诉浏览器， 现在有任务， 在空闲的时候执行当前的任务\n       // 任务优先级： expirationTime\n       requestIdleCallback(workLoop, { timeout: 500 });\n   }\n   \n   \n   ```\n\n   这里浏览器会以一帧作为参考维度， 优先执行高优任务。\n\n   每一帧执行一个任务单元， 执行结束后的剩余时间交给用户。\n\n3. ReactDom.render方法将挂载节点转化为fiber节点, 同时开始**reconciler**阶段\n\n   ```js\n   let rootFiber = {\n        tag: TAG_ROOT,   // 每个fiber都会有一个fiber，标志这此元素的类型\n        stateNode: container, // 一般情况下如果这个元素是一个原生节点的话， stateNode指向真是DOM元素\n        props: {     // 这个fiber的属性对象， children里面放的是要渲染的元素\n           children: [element] // prop.children是一个数组， 里面放的是react元素， 虚拟dom。 后面会根据每个react元素创建对应的fiber\n        }\n   }\n   // 开始reconciler（调和阶段）\n   scheduleRoot(rootFiber)\n   ```\n\n   react主要有两个阶段\n\n   - Render/Reconciler:  这个阶段主要是生成fiber树， 同时收集effect list, 此阶段可以被暂停\n   - commit阶段：这个阶段主要进行dom更新创建的工作， 此阶段不可以暂停。\n\n4. **reconciler阶段**\n\n   这里引入三个概念\n\n   - workInProgressRoot： 根fiber节点， rootFiber节点\n   - nextUnitOfWork： 下一个更新的Fiber单元， react16的更新是一个链表， 每个fiber单元处理完毕之后， 又一个指针， 指向下一个需要处理的fiber节点\n   - currentRoot： 当前正在工作的fiber树\n   - alternate: 上一个更新的fiber树\n\n   如果是初次渲染的话， 从根节点(rootFiber)开始调度\n\n   ```js\n   export function scheduleRoot(rootFiber) {\n       workInProgressRoot = rootFiber\n       nextUnitOfWork = workInProgressRoot;\n   }\n   ```\n\n5. 处理当前的fiber节点\n\n   根据节点执行执行不同的操作： \n\n   - 根（rootFiber）:  直接处理孩子fiber\n\n   ```js\n   /**\n    * 开始解析\n    * completeUnitOfWork\n    * 1. 创建真实DOM元素\n    * 2. 创建子fiber\n    */\n   function beginWork(currentFiber) {\n       if(currentFiber.tag === TAG_ROOT) {\n           // 将根节点的孩子     转化成fiber单元\n           updateHostRoot(currentFiber)\n   \n       // 如果是文本fiber\n       }else if(currentFiber.tag === TAG_TEXT) {\n           updateHostText(currentFiber)\n       }\n   \n       // 如果是原生节点\n       else if(currentFiber.tag === TAG_HOST) {\n           updateHostTag(currentFiber)\n       }\n   \n       // 如果是类式组件\n       else if(currentFiber.tag === TAG_CLASS)  {\n           updateClassComponent(currentFiber)\n       }else if(currentFiber.tag === TAG_FUNCTION_COMPONENT) {\n           updateFunctionComponent(currentFiber)\n       }\n   }\n   ```\n\n6. 处理孩子**reconcileChildren**\n\n   遍历当前节点所有孩子, 生成对应的fiber节点,\n\n    同时建立关联关系， 形成一个链表(firstEffect和lastEffect)\n\n   ```js\n   function reconcileChildren(currentFiber, newChildren) {\n       let newChildIndex = 0; // 新子节点的索引\n       // 如果当前的fiber有alternate属性， 拿到它的第一个孩子\n       let oldFiber = currentFiber.alternate && currentFiber.alternate.child; \n       \n       let prevSibling;  // 上一个新的子fiber\n   \n       if(oldFiber) {\n           oldFiber.firstEffect = oldFiber.lastEffect = oldFiber.nextEffect = null;\n       }\n   \n       // begin的时候创建fiber， 在completeUnitOfWork的时候收集effect\n       while(newChildIndex < newChildren.length || oldFiber) {\n           let newChild = newChildren[newChildIndex];\n           let newFiber;\n           let tag;\n   \n           // .... \n        \n        newFiber = {\n          tag,\n          type: newChild.type,\n          props: newChild.props,\n          stateNode: null, \n          updateQueue: new UpdateQueue(),\n          return: currentFiber,\n          effectTag: PLACEMENT, // 副作用标示  render阶段我们会收集副作用， 增加删除 更新\n          nextEffect: null, // effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去\n        }\n        if(newFiber) {\n          if(newChildIndex === 0) {\n            // children\n            currentFiber.child = newFiber;\n          }else {\n            // 上一个节点的兄弟节点指向当前的feber\n            prevSibling.sibling = newFiber\n          }\n   \n     \t\t  prevSibling = newFiber\n   \t   }\n   \n        newChildIndex++;\n   }\n   ```\n\n7. 当前fiber节点解析完成。 执行下一步的操作\n\n   - 如果当前fiber节点有孩子的话， 浏览器继续解析当前fiber节点的第一个孩子\n   - 如果没有孩子的话， 找到它的兄弟\n   - 如果没有孩子也没有兄弟， 返回父节点， 标志当前fiber节点调度完成\n   - 建立effect链表， 收集effect\n\n   ```js\n   // 在完成的时候要收集有副作用的fiber, 然后组成effect list\n   // 每个fiber有两个属性， firstEffect指向第一个有副作用的子fiber， lastEffect指向最后一个有副作用的子节点\n   // 中间的用nextEffect做成一个单链表\n   function completeUnitOfWork(currentFiber) {\n       \n       let returnFiber = currentFiber.return\n   \n       if(returnFiber) {\n           if(!returnFiber.firstEffect) {\n               returnFiber.firstEffect = currentFiber.firstEffect;\n           }\n   \n           if(!!currentFiber.lastEffect) {\n               if(returnFiber.lastEffect) {\n                   returnFiber.lastEffect.nextEffect = currentFiber.firstEffect\n               }\n   \n               returnFiber.lastEffect = currentFiber.lastEffect\n               \n           }\n   \n           // 如果有副作用\n           const effectTag = currentFiber.effectTag \n           \n           if(effectTag) {\n               if(!!returnFiber.lastEffect) {\n                   returnFiber.lastEffect.nextEffect = currentFiber\n               }else {\n                   returnFiber.firstEffect = currentFiber;\n               }\n               returnFiber.lastEffect = currentFiber; \n              \n           }\n       }\n   }\n   ```\n\n   \n\n8. commit阶段， 处理 副作用。\n\n   将之前手机到的effect链表依次更新\n\n   ```js\n   // 提交effect链\n   function commitRoot() {\n       // 执行effect之前， 先把该删的删掉\n       deletions.forEach(commitWork)\n       let currentFiber = workInProgressRoot.firstEffect; \n   \n       while(currentFiber) {\n           commitWork(currentFiber);\n   \n   \n           currentFiber = currentFiber.nextEffect\n       }\n       deletions.length = 0;\n       // 当前渲染成功的根fiber， 赋给currentRoot\n       currentRoot = workInProgressRoot;\n       workInProgressRoot = null;\n   }\n   ```\n\n   依次处理新增， 删除， 更新节点等操作\n\n   ```js\n   function commitWork(currentFiber) {\n       if(!currentFiber) { return }\n       let returnFiber = currentFiber.return;\n       \n       while(returnFiber.tag !== TAG_HOST && returnFiber.tag !== TAG_ROOT && returnFiber.tag !== TAG_TEXT ) {\n           returnFiber = returnFiber.return\n       }\n   \n       let returnDOM = returnFiber.stateNode;\n       // 新增节点\n       if(currentFiber.effectTag === PLACEMENT) {\n           let nextFiber = currentFiber;\n   \n           if(nextFiber.tag === TAG_CLASS) {\n               return\n           }\n   \n           // 如果要挂载的节点不是dom节点， 那么去找它的孩子， 一直找， 知道找到真实dom节点为止\n           while(nextFiber.tag !== TAG_HOST && nextFiber.tag !== TAG_TEXT) {\n               nextFiber = currentFiber.child\n           }\n           returnDOM.appendChild(nextFiber.stateNode)\n       // 删除节点\n       }else if(currentFiber.effectTag === DELETE) {\n           // returnDOM.removeChild(currentFiber.stateNode);\n          return  commitDeletion(currentFiber, returnDOM)\n       // 更新节点\n       }else if(currentFiber.effectTag === UPDATE)  {\n           if(currentFiber.type === ELEMENT_TEXT) {\n               // fiber.alternate指向老的节点\n               if(currentFiber.alternate.props.text !== currentFiber.props.text) {\n                   currentFiber.stateNode.textContent = currentFiber.props.text\n               }\n           }else {\n               \n               updateDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props)\n           }\n       }\n   \n       currentFiber.effectTag = null\n   }\n   ```\n\n#### 双缓冲机制\n\n- 第一次更新， 建立currentRoot（渲染成功之后的根节点）\n\n- 第二次更新， 建立alternate树， 复用上一次更新创建的节点\n\n- 第三次更新， workInProgress树指向上一次更新的alternate树， 即第一次更新创建的树\n\n  \n\n","source":"_posts/react/Fiber架构.md","raw":"---\ntitle: React Fiber架构解读 - 思考\ntags: [React,前端全栈]\nslug: ea593f7c\nkeywords: 前端全栈,React Fiber\ndate: 2024-03-01 22:17:36\n---\n\n## React Fiber架构解读\n\n> 前言\n> 记录一下自己学习react fiber架构的一个过程\n\n由于js**单线程阻塞式**的特性， 导致浏览器在同一时间， 只能干一件事。\n所以对现在的前端框架而言，快速完成计算并且响应用户的操作成为了各大框架需要的解决的首要问题。\n\n- vue:  尽可能的把每个单元(模版/组件)划分的足够小 ， 同时基于响应式数据的通知机制， 可以保证数据改变后， 精确的控制到每个单元进行更新。\n- react:   react16之前， 每次更新， 都会从根节点的虚拟DOM开始进行比对，所以当数据量特别大的时候， 会非常耗费性能。也会导致用户输入的时候， 卡顿 在dom比对的过程中\n\n直到.....react16采用了全新的fiber架构。\n\n\n\n#### 目标：\n\n通过本篇文章， 希望达到以下目标\n\n1. React fiber架构简介\n2. React fiber的渲染过程分析\n\n\n\n#### fiber架构简介\n\n> 何为fiber架构\n\nfiber是一种数据结构， 也可以说是一个任务单元。\n\nReact16的fiber架构就是**基于fiber这种数据结构**实现的一种时间切片式的可拆分，可中断的调和器架构（Fiber Reconciler）。\n\n\n\n#### fiber架构的优势\n\n- 它把之前作为一个整体的dom diff和渲染过程拆分成一个细小的fiber单元， \n\n  使整个渲染过程可以被中断， 让位给高优先级的任务， 等到浏览器空闲时间再回复渲染。\n\n- 发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应\n\n- 快速响应用户操作， 让用户觉得够快， 不阻塞用户操作\n\n![](./fiber1.png)\n\n#### fiber单元\n\n那么, fiber到底是一种什么样的数据结构呢\n\n```js\n{\n      tag: string,   // 当前节点的名称\n      type: string,  // 当前节点的类型， 标志着当前节点是一种类组件，或者函数组件， 或者是一种原生dom标签等\n      props: Object, \n      stateNode: Object, // 当前节点的实例/真实dom \n      return: Fiber, // 当前fiber节点的父节点\n      alternate: Fiber, // 上一次更新的Fiber树\n      child: Fiber, // 指向第一个子节点\n      siblings: Fiber, // 指向兄弟节点\n      effectTag: UPDATE, // 副作用标示  render阶段我们会收集副作用， 增加删除 更新\n      nextEffect: null, // effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去\n}\n```\n\n在react中， 每个节点都是这样的一个fiber结构单元， 基于这种结构单元， react将整个页面组装成了一个链表结构。 即每一个fiber节点单元中， 都会有一个指针，指向下一个要跟新的单元。 如图所示\n\n![](./fiber2.png)\n\n流程解析：\n\n- 浏览器开始调度， 会从根节点开始处理virtual DOM(createElement返回结果)， 将其和它的Children转化为fiber单元。\n- A1节点作为根节点的一个字元素， 转化成fiber单元后，除了基础的一些信息(tag, type), 比较重要的是两个属性， 一个是return， 指向于A1节点的父节点， 一个是child, 指向于A1节点的第一个children, B1, 还有一个siblings， 指向于A1的兄弟节点\n- A1的fiber单元处理完成之后， 会处理他的child（B1）,   检查B1有没有child， 如果存在的话， 处理B1的child C1节点\n- C1节点处理完之后， 发现C1没有子元素了， 那么处理C1的兄弟节点C2。 \n- C2即没有child也没有silbing兄弟节点， 那么拿到他的return父节点B1\n- B1之前已经处理过child了， 开始处理B1的slibings节点。 处理完成之后返回到B1的父节点A1\n- reconciliation阶段结束\n\n接下来通过代码分析这个过程\n\n#### React Fiber架构的渲染流程\n\n1. 用户调用**ReactDOM.render**方法 \n\n   ```jsx\n   ReactDOM.render(<Component name=\"越祈\" />, document.getElementById('root'))\n   ```\n\n2. 浏览器调用**requestIdleCallback**方法，开启调度\n\n   ```js\n   // 循环执行工作\n   function workLoop(deadline) {\n       let shouldYield = false; // 是否让出时间片或者说控制权\n       while(nextUnitOfWork && !shouldYield) {\n           nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\n   \n           shouldYield = deadline.timeRemaining() < 1; // 没有时间了， 让出控制权\n       }\n   \n       if(!nextUnitOfWork && workInProgressRoot) {\n           console.log('render阶段结束')\n           commitRoot()\n       }\n       // 告诉浏览器， 现在有任务， 在空闲的时候执行当前的任务\n       // 任务优先级： expirationTime\n       requestIdleCallback(workLoop, { timeout: 500 });\n   }\n   \n   \n   ```\n\n   这里浏览器会以一帧作为参考维度， 优先执行高优任务。\n\n   每一帧执行一个任务单元， 执行结束后的剩余时间交给用户。\n\n3. ReactDom.render方法将挂载节点转化为fiber节点, 同时开始**reconciler**阶段\n\n   ```js\n   let rootFiber = {\n        tag: TAG_ROOT,   // 每个fiber都会有一个fiber，标志这此元素的类型\n        stateNode: container, // 一般情况下如果这个元素是一个原生节点的话， stateNode指向真是DOM元素\n        props: {     // 这个fiber的属性对象， children里面放的是要渲染的元素\n           children: [element] // prop.children是一个数组， 里面放的是react元素， 虚拟dom。 后面会根据每个react元素创建对应的fiber\n        }\n   }\n   // 开始reconciler（调和阶段）\n   scheduleRoot(rootFiber)\n   ```\n\n   react主要有两个阶段\n\n   - Render/Reconciler:  这个阶段主要是生成fiber树， 同时收集effect list, 此阶段可以被暂停\n   - commit阶段：这个阶段主要进行dom更新创建的工作， 此阶段不可以暂停。\n\n4. **reconciler阶段**\n\n   这里引入三个概念\n\n   - workInProgressRoot： 根fiber节点， rootFiber节点\n   - nextUnitOfWork： 下一个更新的Fiber单元， react16的更新是一个链表， 每个fiber单元处理完毕之后， 又一个指针， 指向下一个需要处理的fiber节点\n   - currentRoot： 当前正在工作的fiber树\n   - alternate: 上一个更新的fiber树\n\n   如果是初次渲染的话， 从根节点(rootFiber)开始调度\n\n   ```js\n   export function scheduleRoot(rootFiber) {\n       workInProgressRoot = rootFiber\n       nextUnitOfWork = workInProgressRoot;\n   }\n   ```\n\n5. 处理当前的fiber节点\n\n   根据节点执行执行不同的操作： \n\n   - 根（rootFiber）:  直接处理孩子fiber\n\n   ```js\n   /**\n    * 开始解析\n    * completeUnitOfWork\n    * 1. 创建真实DOM元素\n    * 2. 创建子fiber\n    */\n   function beginWork(currentFiber) {\n       if(currentFiber.tag === TAG_ROOT) {\n           // 将根节点的孩子     转化成fiber单元\n           updateHostRoot(currentFiber)\n   \n       // 如果是文本fiber\n       }else if(currentFiber.tag === TAG_TEXT) {\n           updateHostText(currentFiber)\n       }\n   \n       // 如果是原生节点\n       else if(currentFiber.tag === TAG_HOST) {\n           updateHostTag(currentFiber)\n       }\n   \n       // 如果是类式组件\n       else if(currentFiber.tag === TAG_CLASS)  {\n           updateClassComponent(currentFiber)\n       }else if(currentFiber.tag === TAG_FUNCTION_COMPONENT) {\n           updateFunctionComponent(currentFiber)\n       }\n   }\n   ```\n\n6. 处理孩子**reconcileChildren**\n\n   遍历当前节点所有孩子, 生成对应的fiber节点,\n\n    同时建立关联关系， 形成一个链表(firstEffect和lastEffect)\n\n   ```js\n   function reconcileChildren(currentFiber, newChildren) {\n       let newChildIndex = 0; // 新子节点的索引\n       // 如果当前的fiber有alternate属性， 拿到它的第一个孩子\n       let oldFiber = currentFiber.alternate && currentFiber.alternate.child; \n       \n       let prevSibling;  // 上一个新的子fiber\n   \n       if(oldFiber) {\n           oldFiber.firstEffect = oldFiber.lastEffect = oldFiber.nextEffect = null;\n       }\n   \n       // begin的时候创建fiber， 在completeUnitOfWork的时候收集effect\n       while(newChildIndex < newChildren.length || oldFiber) {\n           let newChild = newChildren[newChildIndex];\n           let newFiber;\n           let tag;\n   \n           // .... \n        \n        newFiber = {\n          tag,\n          type: newChild.type,\n          props: newChild.props,\n          stateNode: null, \n          updateQueue: new UpdateQueue(),\n          return: currentFiber,\n          effectTag: PLACEMENT, // 副作用标示  render阶段我们会收集副作用， 增加删除 更新\n          nextEffect: null, // effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去\n        }\n        if(newFiber) {\n          if(newChildIndex === 0) {\n            // children\n            currentFiber.child = newFiber;\n          }else {\n            // 上一个节点的兄弟节点指向当前的feber\n            prevSibling.sibling = newFiber\n          }\n   \n     \t\t  prevSibling = newFiber\n   \t   }\n   \n        newChildIndex++;\n   }\n   ```\n\n7. 当前fiber节点解析完成。 执行下一步的操作\n\n   - 如果当前fiber节点有孩子的话， 浏览器继续解析当前fiber节点的第一个孩子\n   - 如果没有孩子的话， 找到它的兄弟\n   - 如果没有孩子也没有兄弟， 返回父节点， 标志当前fiber节点调度完成\n   - 建立effect链表， 收集effect\n\n   ```js\n   // 在完成的时候要收集有副作用的fiber, 然后组成effect list\n   // 每个fiber有两个属性， firstEffect指向第一个有副作用的子fiber， lastEffect指向最后一个有副作用的子节点\n   // 中间的用nextEffect做成一个单链表\n   function completeUnitOfWork(currentFiber) {\n       \n       let returnFiber = currentFiber.return\n   \n       if(returnFiber) {\n           if(!returnFiber.firstEffect) {\n               returnFiber.firstEffect = currentFiber.firstEffect;\n           }\n   \n           if(!!currentFiber.lastEffect) {\n               if(returnFiber.lastEffect) {\n                   returnFiber.lastEffect.nextEffect = currentFiber.firstEffect\n               }\n   \n               returnFiber.lastEffect = currentFiber.lastEffect\n               \n           }\n   \n           // 如果有副作用\n           const effectTag = currentFiber.effectTag \n           \n           if(effectTag) {\n               if(!!returnFiber.lastEffect) {\n                   returnFiber.lastEffect.nextEffect = currentFiber\n               }else {\n                   returnFiber.firstEffect = currentFiber;\n               }\n               returnFiber.lastEffect = currentFiber; \n              \n           }\n       }\n   }\n   ```\n\n   \n\n8. commit阶段， 处理 副作用。\n\n   将之前手机到的effect链表依次更新\n\n   ```js\n   // 提交effect链\n   function commitRoot() {\n       // 执行effect之前， 先把该删的删掉\n       deletions.forEach(commitWork)\n       let currentFiber = workInProgressRoot.firstEffect; \n   \n       while(currentFiber) {\n           commitWork(currentFiber);\n   \n   \n           currentFiber = currentFiber.nextEffect\n       }\n       deletions.length = 0;\n       // 当前渲染成功的根fiber， 赋给currentRoot\n       currentRoot = workInProgressRoot;\n       workInProgressRoot = null;\n   }\n   ```\n\n   依次处理新增， 删除， 更新节点等操作\n\n   ```js\n   function commitWork(currentFiber) {\n       if(!currentFiber) { return }\n       let returnFiber = currentFiber.return;\n       \n       while(returnFiber.tag !== TAG_HOST && returnFiber.tag !== TAG_ROOT && returnFiber.tag !== TAG_TEXT ) {\n           returnFiber = returnFiber.return\n       }\n   \n       let returnDOM = returnFiber.stateNode;\n       // 新增节点\n       if(currentFiber.effectTag === PLACEMENT) {\n           let nextFiber = currentFiber;\n   \n           if(nextFiber.tag === TAG_CLASS) {\n               return\n           }\n   \n           // 如果要挂载的节点不是dom节点， 那么去找它的孩子， 一直找， 知道找到真实dom节点为止\n           while(nextFiber.tag !== TAG_HOST && nextFiber.tag !== TAG_TEXT) {\n               nextFiber = currentFiber.child\n           }\n           returnDOM.appendChild(nextFiber.stateNode)\n       // 删除节点\n       }else if(currentFiber.effectTag === DELETE) {\n           // returnDOM.removeChild(currentFiber.stateNode);\n          return  commitDeletion(currentFiber, returnDOM)\n       // 更新节点\n       }else if(currentFiber.effectTag === UPDATE)  {\n           if(currentFiber.type === ELEMENT_TEXT) {\n               // fiber.alternate指向老的节点\n               if(currentFiber.alternate.props.text !== currentFiber.props.text) {\n                   currentFiber.stateNode.textContent = currentFiber.props.text\n               }\n           }else {\n               \n               updateDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props)\n           }\n       }\n   \n       currentFiber.effectTag = null\n   }\n   ```\n\n#### 双缓冲机制\n\n- 第一次更新， 建立currentRoot（渲染成功之后的根节点）\n\n- 第二次更新， 建立alternate树， 复用上一次更新创建的节点\n\n- 第三次更新， workInProgress树指向上一次更新的alternate树， 即第一次更新创建的树\n\n  \n\n","published":1,"updated":"2024-10-09T10:45:07.382Z","_id":"cm217e1r0000bx99k069cbvd1","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"React-Fiber架构解读\"><a href=\"#React-Fiber架构解读\" class=\"headerlink\" title=\"React Fiber架构解读\"></a>React Fiber架构解读</h2><blockquote>\n<p>前言<br>记录一下自己学习react fiber架构的一个过程</p>\n</blockquote>\n<p>由于js<strong>单线程阻塞式</strong>的特性， 导致浏览器在同一时间， 只能干一件事。<br>所以对现在的前端框架而言，快速完成计算并且响应用户的操作成为了各大框架需要的解决的首要问题。</p>\n<ul>\n<li>vue:  尽可能的把每个单元(模版&#x2F;组件)划分的足够小 ， 同时基于响应式数据的通知机制， 可以保证数据改变后， 精确的控制到每个单元进行更新。</li>\n<li>react:   react16之前， 每次更新， 都会从根节点的虚拟DOM开始进行比对，所以当数据量特别大的时候， 会非常耗费性能。也会导致用户输入的时候， 卡顿 在dom比对的过程中</li>\n</ul>\n<p>直到…..react16采用了全新的fiber架构。</p>\n<h4 id=\"目标：\"><a href=\"#目标：\" class=\"headerlink\" title=\"目标：\"></a>目标：</h4><p>通过本篇文章， 希望达到以下目标</p>\n<ol>\n<li>React fiber架构简介</li>\n<li>React fiber的渲染过程分析</li>\n</ol>\n<h4 id=\"fiber架构简介\"><a href=\"#fiber架构简介\" class=\"headerlink\" title=\"fiber架构简介\"></a>fiber架构简介</h4><blockquote>\n<p>何为fiber架构</p>\n</blockquote>\n<p>fiber是一种数据结构， 也可以说是一个任务单元。</p>\n<p>React16的fiber架构就是<strong>基于fiber这种数据结构</strong>实现的一种时间切片式的可拆分，可中断的调和器架构（Fiber Reconciler）。</p>\n<h4 id=\"fiber架构的优势\"><a href=\"#fiber架构的优势\" class=\"headerlink\" title=\"fiber架构的优势\"></a>fiber架构的优势</h4><ul>\n<li><p>它把之前作为一个整体的dom diff和渲染过程拆分成一个细小的fiber单元， </p>\n<p>使整个渲染过程可以被中断， 让位给高优先级的任务， 等到浏览器空闲时间再回复渲染。</p>\n</li>\n<li><p>发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应</p>\n</li>\n<li><p>快速响应用户操作， 让用户觉得够快， 不阻塞用户操作</p>\n</li>\n</ul>\n<p><img src=\"/./fiber1.png\"></p>\n<h4 id=\"fiber单元\"><a href=\"#fiber单元\" class=\"headerlink\" title=\"fiber单元\"></a>fiber单元</h4><p>那么, fiber到底是一种什么样的数据结构呢</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: string,   <span class=\"comment\">// 当前节点的名称</span></span><br><span class=\"line\">      <span class=\"attr\">type</span>: string,  <span class=\"comment\">// 当前节点的类型， 标志着当前节点是一种类组件，或者函数组件， 或者是一种原生dom标签等</span></span><br><span class=\"line\">      <span class=\"attr\">props</span>: <span class=\"title class_\">Object</span>, </span><br><span class=\"line\">      <span class=\"attr\">stateNode</span>: <span class=\"title class_\">Object</span>, <span class=\"comment\">// 当前节点的实例/真实dom </span></span><br><span class=\"line\">      <span class=\"attr\">return</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 当前fiber节点的父节点</span></span><br><span class=\"line\">      <span class=\"attr\">alternate</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 上一次更新的Fiber树</span></span><br><span class=\"line\">      <span class=\"attr\">child</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\">      <span class=\"attr\">siblings</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 指向兄弟节点</span></span><br><span class=\"line\">      <span class=\"attr\">effectTag</span>: <span class=\"variable constant_\">UPDATE</span>, <span class=\"comment\">// 副作用标示  render阶段我们会收集副作用， 增加删除 更新</span></span><br><span class=\"line\">      <span class=\"attr\">nextEffect</span>: <span class=\"literal\">null</span>, <span class=\"comment\">// effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在react中， 每个节点都是这样的一个fiber结构单元， 基于这种结构单元， react将整个页面组装成了一个链表结构。 即每一个fiber节点单元中， 都会有一个指针，指向下一个要跟新的单元。 如图所示</p>\n<p><img src=\"/./fiber2.png\"></p>\n<p>流程解析：</p>\n<ul>\n<li>浏览器开始调度， 会从根节点开始处理virtual DOM(createElement返回结果)， 将其和它的Children转化为fiber单元。</li>\n<li>A1节点作为根节点的一个字元素， 转化成fiber单元后，除了基础的一些信息(tag, type), 比较重要的是两个属性， 一个是return， 指向于A1节点的父节点， 一个是child, 指向于A1节点的第一个children, B1, 还有一个siblings， 指向于A1的兄弟节点</li>\n<li>A1的fiber单元处理完成之后， 会处理他的child（B1）,   检查B1有没有child， 如果存在的话， 处理B1的child C1节点</li>\n<li>C1节点处理完之后， 发现C1没有子元素了， 那么处理C1的兄弟节点C2。 </li>\n<li>C2即没有child也没有silbing兄弟节点， 那么拿到他的return父节点B1</li>\n<li>B1之前已经处理过child了， 开始处理B1的slibings节点。 处理完成之后返回到B1的父节点A1</li>\n<li>reconciliation阶段结束</li>\n</ul>\n<p>接下来通过代码分析这个过程</p>\n<h4 id=\"React-Fiber架构的渲染流程\"><a href=\"#React-Fiber架构的渲染流程\" class=\"headerlink\" title=\"React Fiber架构的渲染流程\"></a>React Fiber架构的渲染流程</h4><ol>\n<li><p>用户调用<strong>ReactDOM.render</strong>方法 </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;越祈&quot;</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器调用<strong>requestIdleCallback</strong>方法，开启调度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环执行工作</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoop</span>(<span class=\"params\">deadline</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> shouldYield = <span class=\"literal\">false</span>; <span class=\"comment\">// 是否让出时间片或者说控制权</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class=\"line\">        nextUnitOfWork = <span class=\"title function_\">performUnitOfWork</span>(nextUnitOfWork)</span><br><span class=\"line\"></span><br><span class=\"line\">        shouldYield = deadline.<span class=\"title function_\">timeRemaining</span>() &lt; <span class=\"number\">1</span>; <span class=\"comment\">// 没有时间了， 让出控制权</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!nextUnitOfWork &amp;&amp; workInProgressRoot) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render阶段结束&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">commitRoot</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 告诉浏览器， 现在有任务， 在空闲的时候执行当前的任务</span></span><br><span class=\"line\">    <span class=\"comment\">// 任务优先级： expirationTime</span></span><br><span class=\"line\">    <span class=\"title function_\">requestIdleCallback</span>(workLoop, &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">500</span> &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里浏览器会以一帧作为参考维度， 优先执行高优任务。</p>\n<p>每一帧执行一个任务单元， 执行结束后的剩余时间交给用户。</p>\n</li>\n<li><p>ReactDom.render方法将挂载节点转化为fiber节点, 同时开始<strong>reconciler</strong>阶段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rootFiber = &#123;</span><br><span class=\"line\">     <span class=\"attr\">tag</span>: <span class=\"variable constant_\">TAG_ROOT</span>,   <span class=\"comment\">// 每个fiber都会有一个fiber，标志这此元素的类型</span></span><br><span class=\"line\">     <span class=\"attr\">stateNode</span>: container, <span class=\"comment\">// 一般情况下如果这个元素是一个原生节点的话， stateNode指向真是DOM元素</span></span><br><span class=\"line\">     <span class=\"attr\">props</span>: &#123;     <span class=\"comment\">// 这个fiber的属性对象， children里面放的是要渲染的元素</span></span><br><span class=\"line\">        <span class=\"attr\">children</span>: [element] <span class=\"comment\">// prop.children是一个数组， 里面放的是react元素， 虚拟dom。 后面会根据每个react元素创建对应的fiber</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 开始reconciler（调和阶段）</span></span><br><span class=\"line\"><span class=\"title function_\">scheduleRoot</span>(rootFiber)</span><br></pre></td></tr></table></figure>\n\n<p>react主要有两个阶段</p>\n<ul>\n<li>Render&#x2F;Reconciler:  这个阶段主要是生成fiber树， 同时收集effect list, 此阶段可以被暂停</li>\n<li>commit阶段：这个阶段主要进行dom更新创建的工作， 此阶段不可以暂停。</li>\n</ul>\n</li>\n<li><p><strong>reconciler阶段</strong></p>\n<p>这里引入三个概念</p>\n<ul>\n<li>workInProgressRoot： 根fiber节点， rootFiber节点</li>\n<li>nextUnitOfWork： 下一个更新的Fiber单元， react16的更新是一个链表， 每个fiber单元处理完毕之后， 又一个指针， 指向下一个需要处理的fiber节点</li>\n<li>currentRoot： 当前正在工作的fiber树</li>\n<li>alternate: 上一个更新的fiber树</li>\n</ul>\n<p>如果是初次渲染的话， 从根节点(rootFiber)开始调度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleRoot</span>(<span class=\"params\">rootFiber</span>) &#123;</span><br><span class=\"line\">    workInProgressRoot = rootFiber</span><br><span class=\"line\">    nextUnitOfWork = workInProgressRoot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理当前的fiber节点</p>\n<p>根据节点执行执行不同的操作： </p>\n<ul>\n<li>根（rootFiber）:  直接处理孩子fiber</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 开始解析</span></span><br><span class=\"line\"><span class=\"comment\"> * completeUnitOfWork</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 创建真实DOM元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 创建子fiber</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">currentFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_ROOT</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将根节点的孩子     转化成fiber单元</span></span><br><span class=\"line\">        <span class=\"title function_\">updateHostRoot</span>(currentFiber)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是文本fiber</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_TEXT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostText</span>(currentFiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是原生节点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_HOST</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostTag</span>(currentFiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是类式组件</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_CLASS</span>)  &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateClassComponent</span>(currentFiber)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_FUNCTION_COMPONENT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateFunctionComponent</span>(currentFiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理孩子<strong>reconcileChildren</strong></p>\n<p>遍历当前节点所有孩子, 生成对应的fiber节点,</p>\n<p> 同时建立关联关系， 形成一个链表(firstEffect和lastEffect)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">currentFiber, newChildren</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newChildIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 新子节点的索引</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前的fiber有alternate属性， 拿到它的第一个孩子</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldFiber = currentFiber.<span class=\"property\">alternate</span> &amp;&amp; currentFiber.<span class=\"property\">alternate</span>.<span class=\"property\">child</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> prevSibling;  <span class=\"comment\">// 上一个新的子fiber</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oldFiber) &#123;</span><br><span class=\"line\">        oldFiber.<span class=\"property\">firstEffect</span> = oldFiber.<span class=\"property\">lastEffect</span> = oldFiber.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// begin的时候创建fiber， 在completeUnitOfWork的时候收集effect</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(newChildIndex &lt; newChildren.<span class=\"property\">length</span> || oldFiber) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newChild = newChildren[newChildIndex];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newFiber;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tag;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// .... </span></span><br><span class=\"line\">     </span><br><span class=\"line\">     newFiber = &#123;</span><br><span class=\"line\">       tag,</span><br><span class=\"line\">       <span class=\"attr\">type</span>: newChild.<span class=\"property\">type</span>,</span><br><span class=\"line\">       <span class=\"attr\">props</span>: newChild.<span class=\"property\">props</span>,</span><br><span class=\"line\">       <span class=\"attr\">stateNode</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">       <span class=\"attr\">updateQueue</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateQueue</span>(),</span><br><span class=\"line\">       <span class=\"attr\">return</span>: currentFiber,</span><br><span class=\"line\">       <span class=\"attr\">effectTag</span>: <span class=\"variable constant_\">PLACEMENT</span>, <span class=\"comment\">// 副作用标示  render阶段我们会收集副作用， 增加删除 更新</span></span><br><span class=\"line\">       <span class=\"attr\">nextEffect</span>: <span class=\"literal\">null</span>, <span class=\"comment\">// effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(newFiber) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(newChildIndex === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// children</span></span><br><span class=\"line\">         currentFiber.<span class=\"property\">child</span> = newFiber;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 上一个节点的兄弟节点指向当前的feber</span></span><br><span class=\"line\">         prevSibling.<span class=\"property\">sibling</span> = newFiber</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t\t  prevSibling = newFiber</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     newChildIndex++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当前fiber节点解析完成。 执行下一步的操作</p>\n<ul>\n<li>如果当前fiber节点有孩子的话， 浏览器继续解析当前fiber节点的第一个孩子</li>\n<li>如果没有孩子的话， 找到它的兄弟</li>\n<li>如果没有孩子也没有兄弟， 返回父节点， 标志当前fiber节点调度完成</li>\n<li>建立effect链表， 收集effect</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在完成的时候要收集有副作用的fiber, 然后组成effect list</span></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber有两个属性， firstEffect指向第一个有副作用的子fiber， lastEffect指向最后一个有副作用的子节点</span></span><br><span class=\"line\"><span class=\"comment\">// 中间的用nextEffect做成一个单链表</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">currentFiber</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnFiber = currentFiber.<span class=\"property\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(returnFiber) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!returnFiber.<span class=\"property\">firstEffect</span>) &#123;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">firstEffect</span> = currentFiber.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!!currentFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = currentFiber.<span class=\"property\">firstEffect</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = currentFiber.<span class=\"property\">lastEffect</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有副作用</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> effectTag = currentFiber.<span class=\"property\">effectTag</span> </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(effectTag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!!returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = currentFiber</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">firstEffect</span> = currentFiber;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = currentFiber; </span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>commit阶段， 处理 副作用。</p>\n<p>将之前手机到的effect链表依次更新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提交effect链</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行effect之前， 先把该删的删掉</span></span><br><span class=\"line\">    deletions.<span class=\"title function_\">forEach</span>(commitWork)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentFiber = workInProgressRoot.<span class=\"property\">firstEffect</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(currentFiber) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">commitWork</span>(currentFiber);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        currentFiber = currentFiber.<span class=\"property\">nextEffect</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deletions.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前渲染成功的根fiber， 赋给currentRoot</span></span><br><span class=\"line\">    currentRoot = workInProgressRoot;</span><br><span class=\"line\">    workInProgressRoot = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>依次处理新增， 删除， 更新节点等操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitWork</span>(<span class=\"params\">currentFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!currentFiber) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnFiber = currentFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(returnFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_HOST</span> &amp;&amp; returnFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_ROOT</span> &amp;&amp; returnFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_TEXT</span> ) &#123;</span><br><span class=\"line\">        returnFiber = returnFiber.<span class=\"property\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnDOM = returnFiber.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 新增节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">effectTag</span> === <span class=\"variable constant_\">PLACEMENT</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextFiber = currentFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nextFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_CLASS</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果要挂载的节点不是dom节点， 那么去找它的孩子， 一直找， 知道找到真实dom节点为止</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_HOST</span> &amp;&amp; nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_TEXT</span>) &#123;</span><br><span class=\"line\">            nextFiber = currentFiber.<span class=\"property\">child</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        returnDOM.<span class=\"title function_\">appendChild</span>(nextFiber.<span class=\"property\">stateNode</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">effectTag</span> === <span class=\"variable constant_\">DELETE</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// returnDOM.removeChild(currentFiber.stateNode);</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span>  <span class=\"title function_\">commitDeletion</span>(currentFiber, returnDOM)</span><br><span class=\"line\">    <span class=\"comment\">// 更新节点</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">effectTag</span> === <span class=\"variable constant_\">UPDATE</span>)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">type</span> === <span class=\"variable constant_\">ELEMENT_TEXT</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// fiber.alternate指向老的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">alternate</span>.<span class=\"property\">props</span>.<span class=\"property\">text</span> !== currentFiber.<span class=\"property\">props</span>.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">                currentFiber.<span class=\"property\">stateNode</span>.<span class=\"property\">textContent</span> = currentFiber.<span class=\"property\">props</span>.<span class=\"property\">text</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"title function_\">updateDOM</span>(currentFiber.<span class=\"property\">stateNode</span>, currentFiber.<span class=\"property\">alternate</span>.<span class=\"property\">props</span>, currentFiber.<span class=\"property\">props</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentFiber.<span class=\"property\">effectTag</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"双缓冲机制\"><a href=\"#双缓冲机制\" class=\"headerlink\" title=\"双缓冲机制\"></a>双缓冲机制</h4><ul>\n<li><p>第一次更新， 建立currentRoot（渲染成功之后的根节点）</p>\n</li>\n<li><p>第二次更新， 建立alternate树， 复用上一次更新创建的节点</p>\n</li>\n<li><p>第三次更新， workInProgress树指向上一次更新的alternate树， 即第一次更新创建的树</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"React-Fiber架构解读\"><a href=\"#React-Fiber架构解读\" class=\"headerlink\" title=\"React Fiber架构解读\"></a>React Fiber架构解读</h2><blockquote>\n<p>前言<br>记录一下自己学习react fiber架构的一个过程</p>\n</blockquote>\n<p>由于js<strong>单线程阻塞式</strong>的特性， 导致浏览器在同一时间， 只能干一件事。<br>所以对现在的前端框架而言，快速完成计算并且响应用户的操作成为了各大框架需要的解决的首要问题。</p>\n<ul>\n<li>vue:  尽可能的把每个单元(模版&#x2F;组件)划分的足够小 ， 同时基于响应式数据的通知机制， 可以保证数据改变后， 精确的控制到每个单元进行更新。</li>\n<li>react:   react16之前， 每次更新， 都会从根节点的虚拟DOM开始进行比对，所以当数据量特别大的时候， 会非常耗费性能。也会导致用户输入的时候， 卡顿 在dom比对的过程中</li>\n</ul>\n<p>直到…..react16采用了全新的fiber架构。</p>\n<h4 id=\"目标：\"><a href=\"#目标：\" class=\"headerlink\" title=\"目标：\"></a>目标：</h4><p>通过本篇文章， 希望达到以下目标</p>\n<ol>\n<li>React fiber架构简介</li>\n<li>React fiber的渲染过程分析</li>\n</ol>\n<h4 id=\"fiber架构简介\"><a href=\"#fiber架构简介\" class=\"headerlink\" title=\"fiber架构简介\"></a>fiber架构简介</h4><blockquote>\n<p>何为fiber架构</p>\n</blockquote>\n<p>fiber是一种数据结构， 也可以说是一个任务单元。</p>\n<p>React16的fiber架构就是<strong>基于fiber这种数据结构</strong>实现的一种时间切片式的可拆分，可中断的调和器架构（Fiber Reconciler）。</p>\n<h4 id=\"fiber架构的优势\"><a href=\"#fiber架构的优势\" class=\"headerlink\" title=\"fiber架构的优势\"></a>fiber架构的优势</h4><ul>\n<li><p>它把之前作为一个整体的dom diff和渲染过程拆分成一个细小的fiber单元， </p>\n<p>使整个渲染过程可以被中断， 让位给高优先级的任务， 等到浏览器空闲时间再回复渲染。</p>\n</li>\n<li><p>发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应</p>\n</li>\n<li><p>快速响应用户操作， 让用户觉得够快， 不阻塞用户操作</p>\n</li>\n</ul>\n<p><img src=\"/./fiber1.png\"></p>\n<h4 id=\"fiber单元\"><a href=\"#fiber单元\" class=\"headerlink\" title=\"fiber单元\"></a>fiber单元</h4><p>那么, fiber到底是一种什么样的数据结构呢</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: string,   <span class=\"comment\">// 当前节点的名称</span></span><br><span class=\"line\">      <span class=\"attr\">type</span>: string,  <span class=\"comment\">// 当前节点的类型， 标志着当前节点是一种类组件，或者函数组件， 或者是一种原生dom标签等</span></span><br><span class=\"line\">      <span class=\"attr\">props</span>: <span class=\"title class_\">Object</span>, </span><br><span class=\"line\">      <span class=\"attr\">stateNode</span>: <span class=\"title class_\">Object</span>, <span class=\"comment\">// 当前节点的实例/真实dom </span></span><br><span class=\"line\">      <span class=\"attr\">return</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 当前fiber节点的父节点</span></span><br><span class=\"line\">      <span class=\"attr\">alternate</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 上一次更新的Fiber树</span></span><br><span class=\"line\">      <span class=\"attr\">child</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\">      <span class=\"attr\">siblings</span>: <span class=\"title class_\">Fiber</span>, <span class=\"comment\">// 指向兄弟节点</span></span><br><span class=\"line\">      <span class=\"attr\">effectTag</span>: <span class=\"variable constant_\">UPDATE</span>, <span class=\"comment\">// 副作用标示  render阶段我们会收集副作用， 增加删除 更新</span></span><br><span class=\"line\">      <span class=\"attr\">nextEffect</span>: <span class=\"literal\">null</span>, <span class=\"comment\">// effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在react中， 每个节点都是这样的一个fiber结构单元， 基于这种结构单元， react将整个页面组装成了一个链表结构。 即每一个fiber节点单元中， 都会有一个指针，指向下一个要跟新的单元。 如图所示</p>\n<p><img src=\"/./fiber2.png\"></p>\n<p>流程解析：</p>\n<ul>\n<li>浏览器开始调度， 会从根节点开始处理virtual DOM(createElement返回结果)， 将其和它的Children转化为fiber单元。</li>\n<li>A1节点作为根节点的一个字元素， 转化成fiber单元后，除了基础的一些信息(tag, type), 比较重要的是两个属性， 一个是return， 指向于A1节点的父节点， 一个是child, 指向于A1节点的第一个children, B1, 还有一个siblings， 指向于A1的兄弟节点</li>\n<li>A1的fiber单元处理完成之后， 会处理他的child（B1）,   检查B1有没有child， 如果存在的话， 处理B1的child C1节点</li>\n<li>C1节点处理完之后， 发现C1没有子元素了， 那么处理C1的兄弟节点C2。 </li>\n<li>C2即没有child也没有silbing兄弟节点， 那么拿到他的return父节点B1</li>\n<li>B1之前已经处理过child了， 开始处理B1的slibings节点。 处理完成之后返回到B1的父节点A1</li>\n<li>reconciliation阶段结束</li>\n</ul>\n<p>接下来通过代码分析这个过程</p>\n<h4 id=\"React-Fiber架构的渲染流程\"><a href=\"#React-Fiber架构的渲染流程\" class=\"headerlink\" title=\"React Fiber架构的渲染流程\"></a>React Fiber架构的渲染流程</h4><ol>\n<li><p>用户调用<strong>ReactDOM.render</strong>方法 </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;越祈&quot;</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器调用<strong>requestIdleCallback</strong>方法，开启调度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环执行工作</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoop</span>(<span class=\"params\">deadline</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> shouldYield = <span class=\"literal\">false</span>; <span class=\"comment\">// 是否让出时间片或者说控制权</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class=\"line\">        nextUnitOfWork = <span class=\"title function_\">performUnitOfWork</span>(nextUnitOfWork)</span><br><span class=\"line\"></span><br><span class=\"line\">        shouldYield = deadline.<span class=\"title function_\">timeRemaining</span>() &lt; <span class=\"number\">1</span>; <span class=\"comment\">// 没有时间了， 让出控制权</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!nextUnitOfWork &amp;&amp; workInProgressRoot) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render阶段结束&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">commitRoot</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 告诉浏览器， 现在有任务， 在空闲的时候执行当前的任务</span></span><br><span class=\"line\">    <span class=\"comment\">// 任务优先级： expirationTime</span></span><br><span class=\"line\">    <span class=\"title function_\">requestIdleCallback</span>(workLoop, &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">500</span> &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里浏览器会以一帧作为参考维度， 优先执行高优任务。</p>\n<p>每一帧执行一个任务单元， 执行结束后的剩余时间交给用户。</p>\n</li>\n<li><p>ReactDom.render方法将挂载节点转化为fiber节点, 同时开始<strong>reconciler</strong>阶段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rootFiber = &#123;</span><br><span class=\"line\">     <span class=\"attr\">tag</span>: <span class=\"variable constant_\">TAG_ROOT</span>,   <span class=\"comment\">// 每个fiber都会有一个fiber，标志这此元素的类型</span></span><br><span class=\"line\">     <span class=\"attr\">stateNode</span>: container, <span class=\"comment\">// 一般情况下如果这个元素是一个原生节点的话， stateNode指向真是DOM元素</span></span><br><span class=\"line\">     <span class=\"attr\">props</span>: &#123;     <span class=\"comment\">// 这个fiber的属性对象， children里面放的是要渲染的元素</span></span><br><span class=\"line\">        <span class=\"attr\">children</span>: [element] <span class=\"comment\">// prop.children是一个数组， 里面放的是react元素， 虚拟dom。 后面会根据每个react元素创建对应的fiber</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 开始reconciler（调和阶段）</span></span><br><span class=\"line\"><span class=\"title function_\">scheduleRoot</span>(rootFiber)</span><br></pre></td></tr></table></figure>\n\n<p>react主要有两个阶段</p>\n<ul>\n<li>Render&#x2F;Reconciler:  这个阶段主要是生成fiber树， 同时收集effect list, 此阶段可以被暂停</li>\n<li>commit阶段：这个阶段主要进行dom更新创建的工作， 此阶段不可以暂停。</li>\n</ul>\n</li>\n<li><p><strong>reconciler阶段</strong></p>\n<p>这里引入三个概念</p>\n<ul>\n<li>workInProgressRoot： 根fiber节点， rootFiber节点</li>\n<li>nextUnitOfWork： 下一个更新的Fiber单元， react16的更新是一个链表， 每个fiber单元处理完毕之后， 又一个指针， 指向下一个需要处理的fiber节点</li>\n<li>currentRoot： 当前正在工作的fiber树</li>\n<li>alternate: 上一个更新的fiber树</li>\n</ul>\n<p>如果是初次渲染的话， 从根节点(rootFiber)开始调度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleRoot</span>(<span class=\"params\">rootFiber</span>) &#123;</span><br><span class=\"line\">    workInProgressRoot = rootFiber</span><br><span class=\"line\">    nextUnitOfWork = workInProgressRoot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理当前的fiber节点</p>\n<p>根据节点执行执行不同的操作： </p>\n<ul>\n<li>根（rootFiber）:  直接处理孩子fiber</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 开始解析</span></span><br><span class=\"line\"><span class=\"comment\"> * completeUnitOfWork</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 创建真实DOM元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 创建子fiber</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">currentFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_ROOT</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将根节点的孩子     转化成fiber单元</span></span><br><span class=\"line\">        <span class=\"title function_\">updateHostRoot</span>(currentFiber)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是文本fiber</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_TEXT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostText</span>(currentFiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是原生节点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_HOST</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostTag</span>(currentFiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是类式组件</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_CLASS</span>)  &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateClassComponent</span>(currentFiber)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_FUNCTION_COMPONENT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateFunctionComponent</span>(currentFiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理孩子<strong>reconcileChildren</strong></p>\n<p>遍历当前节点所有孩子, 生成对应的fiber节点,</p>\n<p> 同时建立关联关系， 形成一个链表(firstEffect和lastEffect)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">currentFiber, newChildren</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newChildIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 新子节点的索引</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前的fiber有alternate属性， 拿到它的第一个孩子</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldFiber = currentFiber.<span class=\"property\">alternate</span> &amp;&amp; currentFiber.<span class=\"property\">alternate</span>.<span class=\"property\">child</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> prevSibling;  <span class=\"comment\">// 上一个新的子fiber</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oldFiber) &#123;</span><br><span class=\"line\">        oldFiber.<span class=\"property\">firstEffect</span> = oldFiber.<span class=\"property\">lastEffect</span> = oldFiber.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// begin的时候创建fiber， 在completeUnitOfWork的时候收集effect</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(newChildIndex &lt; newChildren.<span class=\"property\">length</span> || oldFiber) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newChild = newChildren[newChildIndex];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newFiber;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tag;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// .... </span></span><br><span class=\"line\">     </span><br><span class=\"line\">     newFiber = &#123;</span><br><span class=\"line\">       tag,</span><br><span class=\"line\">       <span class=\"attr\">type</span>: newChild.<span class=\"property\">type</span>,</span><br><span class=\"line\">       <span class=\"attr\">props</span>: newChild.<span class=\"property\">props</span>,</span><br><span class=\"line\">       <span class=\"attr\">stateNode</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">       <span class=\"attr\">updateQueue</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateQueue</span>(),</span><br><span class=\"line\">       <span class=\"attr\">return</span>: currentFiber,</span><br><span class=\"line\">       <span class=\"attr\">effectTag</span>: <span class=\"variable constant_\">PLACEMENT</span>, <span class=\"comment\">// 副作用标示  render阶段我们会收集副作用， 增加删除 更新</span></span><br><span class=\"line\">       <span class=\"attr\">nextEffect</span>: <span class=\"literal\">null</span>, <span class=\"comment\">// effect list顺序和完成的顺序是一样的， 但是节点只放改变的fiber， 没有副作用 的节点会绕过去</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(newFiber) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(newChildIndex === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// children</span></span><br><span class=\"line\">         currentFiber.<span class=\"property\">child</span> = newFiber;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 上一个节点的兄弟节点指向当前的feber</span></span><br><span class=\"line\">         prevSibling.<span class=\"property\">sibling</span> = newFiber</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t\t  prevSibling = newFiber</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     newChildIndex++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当前fiber节点解析完成。 执行下一步的操作</p>\n<ul>\n<li>如果当前fiber节点有孩子的话， 浏览器继续解析当前fiber节点的第一个孩子</li>\n<li>如果没有孩子的话， 找到它的兄弟</li>\n<li>如果没有孩子也没有兄弟， 返回父节点， 标志当前fiber节点调度完成</li>\n<li>建立effect链表， 收集effect</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在完成的时候要收集有副作用的fiber, 然后组成effect list</span></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber有两个属性， firstEffect指向第一个有副作用的子fiber， lastEffect指向最后一个有副作用的子节点</span></span><br><span class=\"line\"><span class=\"comment\">// 中间的用nextEffect做成一个单链表</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">currentFiber</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnFiber = currentFiber.<span class=\"property\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(returnFiber) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!returnFiber.<span class=\"property\">firstEffect</span>) &#123;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">firstEffect</span> = currentFiber.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!!currentFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = currentFiber.<span class=\"property\">firstEffect</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = currentFiber.<span class=\"property\">lastEffect</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有副作用</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> effectTag = currentFiber.<span class=\"property\">effectTag</span> </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(effectTag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!!returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = currentFiber</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">firstEffect</span> = currentFiber;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = currentFiber; </span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>commit阶段， 处理 副作用。</p>\n<p>将之前手机到的effect链表依次更新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提交effect链</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行effect之前， 先把该删的删掉</span></span><br><span class=\"line\">    deletions.<span class=\"title function_\">forEach</span>(commitWork)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentFiber = workInProgressRoot.<span class=\"property\">firstEffect</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(currentFiber) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">commitWork</span>(currentFiber);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        currentFiber = currentFiber.<span class=\"property\">nextEffect</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deletions.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前渲染成功的根fiber， 赋给currentRoot</span></span><br><span class=\"line\">    currentRoot = workInProgressRoot;</span><br><span class=\"line\">    workInProgressRoot = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>依次处理新增， 删除， 更新节点等操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitWork</span>(<span class=\"params\">currentFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!currentFiber) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnFiber = currentFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(returnFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_HOST</span> &amp;&amp; returnFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_ROOT</span> &amp;&amp; returnFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_TEXT</span> ) &#123;</span><br><span class=\"line\">        returnFiber = returnFiber.<span class=\"property\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnDOM = returnFiber.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 新增节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">effectTag</span> === <span class=\"variable constant_\">PLACEMENT</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextFiber = currentFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nextFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">TAG_CLASS</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果要挂载的节点不是dom节点， 那么去找它的孩子， 一直找， 知道找到真实dom节点为止</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_HOST</span> &amp;&amp; nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">TAG_TEXT</span>) &#123;</span><br><span class=\"line\">            nextFiber = currentFiber.<span class=\"property\">child</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        returnDOM.<span class=\"title function_\">appendChild</span>(nextFiber.<span class=\"property\">stateNode</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">effectTag</span> === <span class=\"variable constant_\">DELETE</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// returnDOM.removeChild(currentFiber.stateNode);</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span>  <span class=\"title function_\">commitDeletion</span>(currentFiber, returnDOM)</span><br><span class=\"line\">    <span class=\"comment\">// 更新节点</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">effectTag</span> === <span class=\"variable constant_\">UPDATE</span>)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">type</span> === <span class=\"variable constant_\">ELEMENT_TEXT</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// fiber.alternate指向老的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currentFiber.<span class=\"property\">alternate</span>.<span class=\"property\">props</span>.<span class=\"property\">text</span> !== currentFiber.<span class=\"property\">props</span>.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">                currentFiber.<span class=\"property\">stateNode</span>.<span class=\"property\">textContent</span> = currentFiber.<span class=\"property\">props</span>.<span class=\"property\">text</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"title function_\">updateDOM</span>(currentFiber.<span class=\"property\">stateNode</span>, currentFiber.<span class=\"property\">alternate</span>.<span class=\"property\">props</span>, currentFiber.<span class=\"property\">props</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentFiber.<span class=\"property\">effectTag</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"双缓冲机制\"><a href=\"#双缓冲机制\" class=\"headerlink\" title=\"双缓冲机制\"></a>双缓冲机制</h4><ul>\n<li><p>第一次更新， 建立currentRoot（渲染成功之后的根节点）</p>\n</li>\n<li><p>第二次更新， 建立alternate树， 复用上一次更新创建的节点</p>\n</li>\n<li><p>第三次更新， workInProgress树指向上一次更新的alternate树， 即第一次更新创建的树</p>\n</li>\n</ul>\n"},{"title":"vue是如何渲染的","slug":"vue/vue渲染过程分析","keywords":"vue,源码,前端全栈","date":"2023-09-01T14:17:36.000Z","_content":"## vue是如何渲染的\n\n\n> Vue渲染流程 <br/>\n   实例Vue构造函数, 执行_init方法 \n   _init()方法: 合并配置, 初始化事件中心, 初始化声明周期, 初始化data, props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因;\n\n### 一.  实例Vue构造函数, 执行_init方法 \n> _init()方法: <br/>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    主要是合并配置, 初始化事件中心, 初始化声明周期, 初始化data,    props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因; <br/>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    这里会判断el.$options上有没有挂载el, 如果没有的话 执行$mount方法实现挂载 \n\n````\n    Vue.prototype._init = function (options?: Object) {\n        const vm: Component = this\n        vm._uid = uid++\n\n        let startTag, endTag\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            startTag = `vue-perf-start:${vm._uid}`\n            endTag = `vue-perf-end:${vm._uid}`\n            mark(startTag)\n        }\n\n        // a flag to avoid this being observed\n        vm._isVue = true\n        // merge options\n        if (options && options._isComponent) {\n            // optimize internal component instantiation\n            // since dynamic options merging is pretty slow, and none of the\n            // internal component options needs special treatment.\n            initInternalComponent(vm, options)\n        } else {\n            vm.$options = mergeOptions(\n            resolveConstructorOptions(vm.constructor),\n            options || {},\n            vm\n            )\n        }\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production') {\n            initProxy(vm)\n        } else {\n            vm._renderProxy = vm\n        }\n        // expose real self\n        vm._self = vm\n        initLifecycle(vm)\n        initEvents(vm)\n        initRender(vm)\n        callHook(vm, 'beforeCreate')\n        initInjections(vm) // resolve injections before data/props\n        initState(vm)\n        initProvide(vm) // resolve provide after data/props\n        callHook(vm, 'created')\n\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            vm._name = formatComponentName(vm, false)\n            mark(endTag)\n            measure(`vue ${vm._name} init`, startTag, endTag)\n        }\n\n        if (vm.$options.el) {\n            vm.$mount(vm.$options.el)\n        }\n    }\n````\n\n### 二. Vue实例的挂载\n> $mount这个过程主要做两件事: <br />\n>  1. 调用vm.render()生成VNode, <br />\n>  2. 实例化一个渲染Wathcer, 这个watcher会在初始化的时候执行它的回调函数, 另一个作用就是检测数据变化\b, 之后会执行他的回调函数(updateComponent), 最终会调用vm.update更新DOM<br />\n\n>  下面看具体的实现细节\n\n> 1. 转换render方法\n````\n// 缓存原型上的$mount方法\nconst mount = Vue.prototype.$mount\n\n// 重新定义vue原型上的$mount方法\nVue.prototype.$mount = function (\n    el?: string | Element,\n    hydrating?: boolean\n): Component {\n    // 获取el的dom节点\n    el = el && query(el)\n\n    // 对Dom节点进行限制, Vue不能挂载到body, html这样的节点上\n    if (el === document.body || el === document.documentElement) {\n        process.env.NODE_ENV !== 'production' && warn(\n        `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n        )\n        return this\n    }\n\n    const options = this.$options\n    // 这里是将template字符串转化成render方法, 通过compileFunction函数实现\n    if (!options.render) {\n        let template = options.template\n        if (template) {\n        if (typeof template === 'string') {\n            if (template.charAt(0) === '#') {\n            template = idToTemplate(template)\n            /* istanbul ignore if */\n            if (process.env.NODE_ENV !== 'production' && !template) {\n                warn(\n                `Template element not found or is empty: ${options.template}`,\n                this\n                )\n            }\n            }\n        } else if (template.nodeType) {\n            template = template.innerHTML\n        } else {\n            if (process.env.NODE_ENV !== 'production') {\n            warn('invalid template option:' + template, this)\n            }\n            return this\n        }\n        } else if (el) {\n            template = getOuterHTML(el)\n        }\n        if (template) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' &&        config.performance && mark) {\n            mark('compile')\n        }\n\n        // 将模板转化为render函数\n        const { render, staticRenderFns } = compileToFunctions(template, {\n            shouldDecodeNewlines,\n            shouldDecodeNewlinesForHref,\n            delimiters: options.delimiters,\n            comments: options.comments\n        }, this)\n        options.render = render\n        options.staticRenderFns = staticRenderFns\n\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            mark('compile end')\n            measure(`vue ${this._name} compile`, 'compile', 'compile end')\n        }\n        }\n    }\n    // 最后调用\b之前缓存的原型上的$mount方法\n    return mount.call(this, el, hydrating)\n}\n````\n\n> 2. 执行原型上的$mount方法\n\n找到el的Dom节点, 执行mountComponent方法\n````\n    // public mount method\n    Vue.prototype.$mount = function (\n    el?: string | Element,\n    hydrating?: boolean\n    ): Component {\n        el = el && inBrowser ? query(el) : undefined\n        return mountComponent(this, el, hydrating)\n    }\n````\n\n> mountComponent方法: <br />\n    1. 调用vm.render方法生成虚拟DOM; <br />\n    2. 实例化一个渲染watcher, 并且将updateComponent作为他的回调函数,  初始化的时候和数据变动的时候都会执行这个回调函数, 更新DOM<br />\n    3. 设置vm._isMounted为true, 标识实例已经挂载, 同时执行mount钩子函数\n\b\n````\n    export function mountComponent (\n        vm: Component,\n        el: ?Element,\n        hydrating?: boolean\n    ): Component {\n        vm.$el = el\n        if (!vm.$options.render) {\n            vm.$options.render = createEmptyVNode\n            if (process.env.NODE_ENV !== 'production') {\n            /* istanbul ignore if */\n            if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n                vm.$options.el || el) {\n                warn(\n                'You are using the runtime-only build of Vue where the template ' +\n                'compiler is not available. Either pre-compile the templates into ' +\n                'render functions, or use the compiler-included build.',\n                vm\n                )\n            } else {\n                warn(\n                'Failed to mount component: template or render function not defined.',\n                vm\n                )\n            }\n            }\n        }\n        callHook(vm, 'beforeMount')\n\n        let updateComponent\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            updateComponent = () => {\n                const name = vm._name\n                const id = vm._uid\n                const startTag = `vue-perf-start:${id}`\n                const endTag = `vue-perf-end:${id}`\n\n                mark(startTag)\n                const vnode = vm._render()\n                mark(endTag)\n                measure(`vue ${name} render`, startTag, endTag)\n\n                mark(startTag)\n                vm._update(vnode, hydrating)\n                mark(endTag)\n                measure(`vue ${name} patch`, startTag, endTag)\n            }\n        } else {\n            updateComponent = () => {\n                vm._update(vm._render(), hydrating)\n            }\n        }\n\n        // 实例化一个渲染wathcer, 并且updateComponent作为它的参数\n        new Watcher(vm, updateComponent, noop, {\n                before () {\n                if (vm._isMounted) {\n                    callHook(vm, 'beforeUpdate')\n                }\n            }\n        }, true /* isRenderWatcher */)\n        hydrating = false\n\n        // manually mounted instance, call mounted on self\n        // mounted is called for render-created child components in its inserted hook\n        if (vm.$vnode == null) {\n            vm._isMounted = true\n            callHook(vm, 'mounted')\n        }\n            return vm\n        }\n````\n\n> 3. update: 将虚拟DOM渲染成真实的节点\n\n    Vue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候, 它的核心是调用patch方法\n\n    ````\n    Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n        const vm: Component = this\n        const prevEl = vm.$el\n        const prevVnode = vm._vnode\n        const prevActiveInstance = activeInstance\n        activeInstance = vm\n        vm._vnode = vnode\n        // Vue.prototype.__patch__ is injected in entry points\n        // based on the rendering backend used.\n        if (!prevVnode) {\n            // initial render\n            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)\n        } else {\n            // updates\n            vm.$el = vm.__patch__(prevVnode, vnode)\n        }\n        activeInstance = prevActiveInstance\n        // update __vue__ reference\n        if (prevEl) {\n            prevEl.__vue__ = null\n        }\n        if (vm.$el) {\n            vm.$el.__vue__ = vm\n        }\n        // if parent is an HOC, update its $el as well\n        if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n            vm.$parent.$el = vm.$el\n        }\n        \n    }\n    ````\n\n\n> patch方法:<br/>\n> 在src/platforms/web/runtime/patch.js可以看到, 它是createPatchFunction方法的返回值\n\n````\nexport const patch: Function = createPatchFunction({ nodeOps, modules })\n````\n\ncreatePatchFunction\n\n````","source":"_posts/vue/vue渲染过程分析.md","raw":"---\ntitle: vue是如何渲染的\ntags: [vue,源码,前端全栈]\nslug: ea599f7c\nkeywords: vue,源码,前端全栈\ndate: 2023-09-01 22:17:36\n---\n## vue是如何渲染的\n\n\n> Vue渲染流程 <br/>\n   实例Vue构造函数, 执行_init方法 \n   _init()方法: 合并配置, 初始化事件中心, 初始化声明周期, 初始化data, props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因;\n\n### 一.  实例Vue构造函数, 执行_init方法 \n> _init()方法: <br/>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    主要是合并配置, 初始化事件中心, 初始化声明周期, 初始化data,    props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因; <br/>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    这里会判断el.$options上有没有挂载el, 如果没有的话 执行$mount方法实现挂载 \n\n````\n    Vue.prototype._init = function (options?: Object) {\n        const vm: Component = this\n        vm._uid = uid++\n\n        let startTag, endTag\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            startTag = `vue-perf-start:${vm._uid}`\n            endTag = `vue-perf-end:${vm._uid}`\n            mark(startTag)\n        }\n\n        // a flag to avoid this being observed\n        vm._isVue = true\n        // merge options\n        if (options && options._isComponent) {\n            // optimize internal component instantiation\n            // since dynamic options merging is pretty slow, and none of the\n            // internal component options needs special treatment.\n            initInternalComponent(vm, options)\n        } else {\n            vm.$options = mergeOptions(\n            resolveConstructorOptions(vm.constructor),\n            options || {},\n            vm\n            )\n        }\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production') {\n            initProxy(vm)\n        } else {\n            vm._renderProxy = vm\n        }\n        // expose real self\n        vm._self = vm\n        initLifecycle(vm)\n        initEvents(vm)\n        initRender(vm)\n        callHook(vm, 'beforeCreate')\n        initInjections(vm) // resolve injections before data/props\n        initState(vm)\n        initProvide(vm) // resolve provide after data/props\n        callHook(vm, 'created')\n\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            vm._name = formatComponentName(vm, false)\n            mark(endTag)\n            measure(`vue ${vm._name} init`, startTag, endTag)\n        }\n\n        if (vm.$options.el) {\n            vm.$mount(vm.$options.el)\n        }\n    }\n````\n\n### 二. Vue实例的挂载\n> $mount这个过程主要做两件事: <br />\n>  1. 调用vm.render()生成VNode, <br />\n>  2. 实例化一个渲染Wathcer, 这个watcher会在初始化的时候执行它的回调函数, 另一个作用就是检测数据变化\b, 之后会执行他的回调函数(updateComponent), 最终会调用vm.update更新DOM<br />\n\n>  下面看具体的实现细节\n\n> 1. 转换render方法\n````\n// 缓存原型上的$mount方法\nconst mount = Vue.prototype.$mount\n\n// 重新定义vue原型上的$mount方法\nVue.prototype.$mount = function (\n    el?: string | Element,\n    hydrating?: boolean\n): Component {\n    // 获取el的dom节点\n    el = el && query(el)\n\n    // 对Dom节点进行限制, Vue不能挂载到body, html这样的节点上\n    if (el === document.body || el === document.documentElement) {\n        process.env.NODE_ENV !== 'production' && warn(\n        `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n        )\n        return this\n    }\n\n    const options = this.$options\n    // 这里是将template字符串转化成render方法, 通过compileFunction函数实现\n    if (!options.render) {\n        let template = options.template\n        if (template) {\n        if (typeof template === 'string') {\n            if (template.charAt(0) === '#') {\n            template = idToTemplate(template)\n            /* istanbul ignore if */\n            if (process.env.NODE_ENV !== 'production' && !template) {\n                warn(\n                `Template element not found or is empty: ${options.template}`,\n                this\n                )\n            }\n            }\n        } else if (template.nodeType) {\n            template = template.innerHTML\n        } else {\n            if (process.env.NODE_ENV !== 'production') {\n            warn('invalid template option:' + template, this)\n            }\n            return this\n        }\n        } else if (el) {\n            template = getOuterHTML(el)\n        }\n        if (template) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' &&        config.performance && mark) {\n            mark('compile')\n        }\n\n        // 将模板转化为render函数\n        const { render, staticRenderFns } = compileToFunctions(template, {\n            shouldDecodeNewlines,\n            shouldDecodeNewlinesForHref,\n            delimiters: options.delimiters,\n            comments: options.comments\n        }, this)\n        options.render = render\n        options.staticRenderFns = staticRenderFns\n\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            mark('compile end')\n            measure(`vue ${this._name} compile`, 'compile', 'compile end')\n        }\n        }\n    }\n    // 最后调用\b之前缓存的原型上的$mount方法\n    return mount.call(this, el, hydrating)\n}\n````\n\n> 2. 执行原型上的$mount方法\n\n找到el的Dom节点, 执行mountComponent方法\n````\n    // public mount method\n    Vue.prototype.$mount = function (\n    el?: string | Element,\n    hydrating?: boolean\n    ): Component {\n        el = el && inBrowser ? query(el) : undefined\n        return mountComponent(this, el, hydrating)\n    }\n````\n\n> mountComponent方法: <br />\n    1. 调用vm.render方法生成虚拟DOM; <br />\n    2. 实例化一个渲染watcher, 并且将updateComponent作为他的回调函数,  初始化的时候和数据变动的时候都会执行这个回调函数, 更新DOM<br />\n    3. 设置vm._isMounted为true, 标识实例已经挂载, 同时执行mount钩子函数\n\b\n````\n    export function mountComponent (\n        vm: Component,\n        el: ?Element,\n        hydrating?: boolean\n    ): Component {\n        vm.$el = el\n        if (!vm.$options.render) {\n            vm.$options.render = createEmptyVNode\n            if (process.env.NODE_ENV !== 'production') {\n            /* istanbul ignore if */\n            if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n                vm.$options.el || el) {\n                warn(\n                'You are using the runtime-only build of Vue where the template ' +\n                'compiler is not available. Either pre-compile the templates into ' +\n                'render functions, or use the compiler-included build.',\n                vm\n                )\n            } else {\n                warn(\n                'Failed to mount component: template or render function not defined.',\n                vm\n                )\n            }\n            }\n        }\n        callHook(vm, 'beforeMount')\n\n        let updateComponent\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n            updateComponent = () => {\n                const name = vm._name\n                const id = vm._uid\n                const startTag = `vue-perf-start:${id}`\n                const endTag = `vue-perf-end:${id}`\n\n                mark(startTag)\n                const vnode = vm._render()\n                mark(endTag)\n                measure(`vue ${name} render`, startTag, endTag)\n\n                mark(startTag)\n                vm._update(vnode, hydrating)\n                mark(endTag)\n                measure(`vue ${name} patch`, startTag, endTag)\n            }\n        } else {\n            updateComponent = () => {\n                vm._update(vm._render(), hydrating)\n            }\n        }\n\n        // 实例化一个渲染wathcer, 并且updateComponent作为它的参数\n        new Watcher(vm, updateComponent, noop, {\n                before () {\n                if (vm._isMounted) {\n                    callHook(vm, 'beforeUpdate')\n                }\n            }\n        }, true /* isRenderWatcher */)\n        hydrating = false\n\n        // manually mounted instance, call mounted on self\n        // mounted is called for render-created child components in its inserted hook\n        if (vm.$vnode == null) {\n            vm._isMounted = true\n            callHook(vm, 'mounted')\n        }\n            return vm\n        }\n````\n\n> 3. update: 将虚拟DOM渲染成真实的节点\n\n    Vue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候, 它的核心是调用patch方法\n\n    ````\n    Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n        const vm: Component = this\n        const prevEl = vm.$el\n        const prevVnode = vm._vnode\n        const prevActiveInstance = activeInstance\n        activeInstance = vm\n        vm._vnode = vnode\n        // Vue.prototype.__patch__ is injected in entry points\n        // based on the rendering backend used.\n        if (!prevVnode) {\n            // initial render\n            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)\n        } else {\n            // updates\n            vm.$el = vm.__patch__(prevVnode, vnode)\n        }\n        activeInstance = prevActiveInstance\n        // update __vue__ reference\n        if (prevEl) {\n            prevEl.__vue__ = null\n        }\n        if (vm.$el) {\n            vm.$el.__vue__ = vm\n        }\n        // if parent is an HOC, update its $el as well\n        if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n            vm.$parent.$el = vm.$el\n        }\n        \n    }\n    ````\n\n\n> patch方法:<br/>\n> 在src/platforms/web/runtime/patch.js可以看到, 它是createPatchFunction方法的返回值\n\n````\nexport const patch: Function = createPatchFunction({ nodeOps, modules })\n````\n\ncreatePatchFunction\n\n````","published":1,"updated":"2024-10-09T10:45:07.383Z","_id":"cm217i859000jx99k78fgfm29","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"vue是如何渲染的\"><a href=\"#vue是如何渲染的\" class=\"headerlink\" title=\"vue是如何渲染的\"></a>vue是如何渲染的</h2><blockquote>\n<p>Vue渲染流程 <br/><br>   实例Vue构造函数, 执行_init方法<br>   _init()方法: 合并配置, 初始化事件中心, 初始化声明周期, 初始化data, props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因;</p>\n</blockquote>\n<h3 id=\"一-实例Vue构造函数-执行-init方法\"><a href=\"#一-实例Vue构造函数-执行-init方法\" class=\"headerlink\" title=\"一.  实例Vue构造函数, 执行_init方法\"></a>一.  实例Vue构造函数, 执行_init方法</h3><blockquote>\n<p>_init()方法: <br/><br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    主要是合并配置, 初始化事件中心, 初始化声明周期, 初始化data,    props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因; <br/><br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    这里会判断el.$options上有没有挂载el, 如果没有的话 执行$mount方法实现挂载 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._init = function (options?: Object) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    vm._uid = uid++</span><br><span class=\"line\"></span><br><span class=\"line\">    let startTag, endTag</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        startTag = `vue-perf-start:$&#123;vm._uid&#125;`</span><br><span class=\"line\">        endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class=\"line\">        mark(startTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // a flag to avoid this being observed</span><br><span class=\"line\">    vm._isVue = true</span><br><span class=\"line\">    // merge options</span><br><span class=\"line\">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class=\"line\">        // optimize internal component instantiation</span><br><span class=\"line\">        // since dynamic options merging is pretty slow, and none of the</span><br><span class=\"line\">        // internal component options needs special treatment.</span><br><span class=\"line\">        initInternalComponent(vm, options)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        vm.$options = mergeOptions(</span><br><span class=\"line\">        resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">        options || &#123;&#125;,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /* istanbul ignore else */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">        initProxy(vm)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        vm._renderProxy = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // expose real self</span><br><span class=\"line\">    vm._self = vm</span><br><span class=\"line\">    initLifecycle(vm)</span><br><span class=\"line\">    initEvents(vm)</span><br><span class=\"line\">    initRender(vm)</span><br><span class=\"line\">    callHook(vm, &#x27;beforeCreate&#x27;)</span><br><span class=\"line\">    initInjections(vm) // resolve injections before data/props</span><br><span class=\"line\">    initState(vm)</span><br><span class=\"line\">    initProvide(vm) // resolve provide after data/props</span><br><span class=\"line\">    callHook(vm, &#x27;created&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        vm._name = formatComponentName(vm, false)</span><br><span class=\"line\">        mark(endTag)</span><br><span class=\"line\">        measure(`vue $&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (vm.$options.el) &#123;</span><br><span class=\"line\">        vm.$mount(vm.$options.el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二-Vue实例的挂载\"><a href=\"#二-Vue实例的挂载\" class=\"headerlink\" title=\"二. Vue实例的挂载\"></a>二. Vue实例的挂载</h3><blockquote>\n<p>$mount这个过程主要做两件事: <br /></p>\n<ol>\n<li>调用vm.render()生成VNode, <br /></li>\n<li>实例化一个渲染Wathcer, 这个watcher会在初始化的时候执行它的回调函数, 另一个作用就是检测数据变化\b, 之后会执行他的回调函数(updateComponent), 最终会调用vm.update更新DOM<br /></li>\n</ol>\n</blockquote>\n<blockquote>\n<p> 下面看具体的实现细节</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>转换render方法</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 缓存原型上的$mount方法</span><br><span class=\"line\">const mount = Vue.prototype.$mount</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新定义vue原型上的$mount方法</span><br><span class=\"line\">Vue.prototype.$mount = function (</span><br><span class=\"line\">    el?: string | Element,</span><br><span class=\"line\">    hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">    // 获取el的dom节点</span><br><span class=\"line\">    el = el &amp;&amp; query(el)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对Dom节点进行限制, Vue不能挂载到body, html这样的节点上</span><br><span class=\"line\">    if (el === document.body || el === document.documentElement) &#123;</span><br><span class=\"line\">        process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">        `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span><br><span class=\"line\">        )</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const options = this.$options</span><br><span class=\"line\">    // 这里是将template字符串转化成render方法, 通过compileFunction函数实现</span><br><span class=\"line\">    if (!options.render) &#123;</span><br><span class=\"line\">        let template = options.template</span><br><span class=\"line\">        if (template) &#123;</span><br><span class=\"line\">        if (typeof template === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">            if (template.charAt(0) === &#x27;#&#x27;) &#123;</span><br><span class=\"line\">            template = idToTemplate(template)</span><br><span class=\"line\">            /* istanbul ignore if */</span><br><span class=\"line\">            if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !template) &#123;</span><br><span class=\"line\">                warn(</span><br><span class=\"line\">                `Template element not found or is empty: $&#123;options.template&#125;`,</span><br><span class=\"line\">                this</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else if (template.nodeType) &#123;</span><br><span class=\"line\">            template = template.innerHTML</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">            warn(&#x27;invalid template option:&#x27; + template, this)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return this</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125; else if (el) &#123;</span><br><span class=\"line\">            template = getOuterHTML(el)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (template) &#123;</span><br><span class=\"line\">        /* istanbul ignore if */</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp;        config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">            mark(&#x27;compile&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 将模板转化为render函数</span><br><span class=\"line\">        const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class=\"line\">            shouldDecodeNewlines,</span><br><span class=\"line\">            shouldDecodeNewlinesForHref,</span><br><span class=\"line\">            delimiters: options.delimiters,</span><br><span class=\"line\">            comments: options.comments</span><br><span class=\"line\">        &#125;, this)</span><br><span class=\"line\">        options.render = render</span><br><span class=\"line\">        options.staticRenderFns = staticRenderFns</span><br><span class=\"line\"></span><br><span class=\"line\">        /* istanbul ignore if */</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">            mark(&#x27;compile end&#x27;)</span><br><span class=\"line\">            measure(`vue $&#123;this._name&#125; compile`, &#x27;compile&#x27;, &#x27;compile end&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 最后调用\b之前缓存的原型上的$mount方法</span><br><span class=\"line\">    return mount.call(this, el, hydrating)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol start=\"2\">\n<li>执行原型上的$mount方法</li>\n</ol>\n</blockquote>\n<p>找到el的Dom节点, 执行mountComponent方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// public mount method</span><br><span class=\"line\">Vue.prototype.$mount = function (</span><br><span class=\"line\">el?: string | Element,</span><br><span class=\"line\">hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">    el = el &amp;&amp; inBrowser ? query(el) : undefined</span><br><span class=\"line\">    return mountComponent(this, el, hydrating)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mountComponent方法: <br /><br>    1. 调用vm.render方法生成虚拟DOM; <br /><br>    2. 实例化一个渲染watcher, 并且将updateComponent作为他的回调函数,  初始化的时候和数据变动的时候都会执行这个回调函数, 更新DOM<br /><br>    3. 设置vm._isMounted为true, 标识实例已经挂载, 同时执行mount钩子函数<br>\b</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function mountComponent (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    el: ?Element,</span><br><span class=\"line\">    hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">    vm.$el = el</span><br><span class=\"line\">    if (!vm.$options.render) &#123;</span><br><span class=\"line\">        vm.$options.render = createEmptyVNode</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">        /* istanbul ignore if */</span><br><span class=\"line\">        if ((vm.$options.template &amp;&amp; vm.$options.template.charAt(0) !== &#x27;#&#x27;) ||</span><br><span class=\"line\">            vm.$options.el || el) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">            &#x27;You are using the runtime-only build of Vue where the template &#x27; +</span><br><span class=\"line\">            &#x27;compiler is not available. Either pre-compile the templates into &#x27; +</span><br><span class=\"line\">            &#x27;render functions, or use the compiler-included build.&#x27;,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">            &#x27;Failed to mount component: template or render function not defined.&#x27;,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callHook(vm, &#x27;beforeMount&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    let updateComponent</span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        updateComponent = () =&gt; &#123;</span><br><span class=\"line\">            const name = vm._name</span><br><span class=\"line\">            const id = vm._uid</span><br><span class=\"line\">            const startTag = `vue-perf-start:$&#123;id&#125;`</span><br><span class=\"line\">            const endTag = `vue-perf-end:$&#123;id&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">            mark(startTag)</span><br><span class=\"line\">            const vnode = vm._render()</span><br><span class=\"line\">            mark(endTag)</span><br><span class=\"line\">            measure(`vue $&#123;name&#125; render`, startTag, endTag)</span><br><span class=\"line\"></span><br><span class=\"line\">            mark(startTag)</span><br><span class=\"line\">            vm._update(vnode, hydrating)</span><br><span class=\"line\">            mark(endTag)</span><br><span class=\"line\">            measure(`vue $&#123;name&#125; patch`, startTag, endTag)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        updateComponent = () =&gt; &#123;</span><br><span class=\"line\">            vm._update(vm._render(), hydrating)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 实例化一个渲染wathcer, 并且updateComponent作为它的参数</span><br><span class=\"line\">    new Watcher(vm, updateComponent, noop, &#123;</span><br><span class=\"line\">            before () &#123;</span><br><span class=\"line\">            if (vm._isMounted) &#123;</span><br><span class=\"line\">                callHook(vm, &#x27;beforeUpdate&#x27;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, true /* isRenderWatcher */)</span><br><span class=\"line\">    hydrating = false</span><br><span class=\"line\"></span><br><span class=\"line\">    // manually mounted instance, call mounted on self</span><br><span class=\"line\">    // mounted is called for render-created child components in its inserted hook</span><br><span class=\"line\">    if (vm.$vnode == null) &#123;</span><br><span class=\"line\">        vm._isMounted = true</span><br><span class=\"line\">        callHook(vm, &#x27;mounted&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        return vm</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol start=\"3\">\n<li>update: 将虚拟DOM渲染成真实的节点</li>\n</ol>\n</blockquote>\n<pre><code>Vue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候, 它的核心是调用patch方法\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    const prevEl = vm.$el</span><br><span class=\"line\">    const prevVnode = vm._vnode</span><br><span class=\"line\">    const prevActiveInstance = activeInstance</span><br><span class=\"line\">    activeInstance = vm</span><br><span class=\"line\">    vm._vnode = vnode</span><br><span class=\"line\">    // Vue.prototype.__patch__ is injected in entry points</span><br><span class=\"line\">    // based on the rendering backend used.</span><br><span class=\"line\">    if (!prevVnode) &#123;</span><br><span class=\"line\">        // initial render</span><br><span class=\"line\">        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // updates</span><br><span class=\"line\">        vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    activeInstance = prevActiveInstance</span><br><span class=\"line\">    // update __vue__ reference</span><br><span class=\"line\">    if (prevEl) &#123;</span><br><span class=\"line\">        prevEl.__vue__ = null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (vm.$el) &#123;</span><br><span class=\"line\">        vm.$el.__vue__ = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // if parent is an HOC, update its $el as well</span><br><span class=\"line\">    if (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class=\"line\">        vm.$parent.$el = vm.$el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<blockquote>\n<p>patch方法:<br/><br>在src&#x2F;platforms&#x2F;web&#x2F;runtime&#x2F;patch.js可以看到, 它是createPatchFunction方法的返回值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const patch: Function = createPatchFunction(&#123; nodeOps, modules &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>createPatchFunction</p>\n<pre><code>\n</code></pre>\n","excerpt":"","more":"<h2 id=\"vue是如何渲染的\"><a href=\"#vue是如何渲染的\" class=\"headerlink\" title=\"vue是如何渲染的\"></a>vue是如何渲染的</h2><blockquote>\n<p>Vue渲染流程 <br/><br>   实例Vue构造函数, 执行_init方法<br>   _init()方法: 合并配置, 初始化事件中心, 初始化声明周期, 初始化data, props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因;</p>\n</blockquote>\n<h3 id=\"一-实例Vue构造函数-执行-init方法\"><a href=\"#一-实例Vue构造函数-执行-init方法\" class=\"headerlink\" title=\"一.  实例Vue构造函数, 执行_init方法\"></a>一.  实例Vue构造函数, 执行_init方法</h3><blockquote>\n<p>_init()方法: <br/><br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    主要是合并配置, 初始化事件中心, 初始化声明周期, 初始化data,    props, computed等数据, callhock beforeCreate生命周期, 这也就是为什么在beforeCreate的时候拿不到数据的原因; <br/><br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    这里会判断el.$options上有没有挂载el, 如果没有的话 执行$mount方法实现挂载 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._init = function (options?: Object) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    vm._uid = uid++</span><br><span class=\"line\"></span><br><span class=\"line\">    let startTag, endTag</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        startTag = `vue-perf-start:$&#123;vm._uid&#125;`</span><br><span class=\"line\">        endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class=\"line\">        mark(startTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // a flag to avoid this being observed</span><br><span class=\"line\">    vm._isVue = true</span><br><span class=\"line\">    // merge options</span><br><span class=\"line\">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class=\"line\">        // optimize internal component instantiation</span><br><span class=\"line\">        // since dynamic options merging is pretty slow, and none of the</span><br><span class=\"line\">        // internal component options needs special treatment.</span><br><span class=\"line\">        initInternalComponent(vm, options)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        vm.$options = mergeOptions(</span><br><span class=\"line\">        resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">        options || &#123;&#125;,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /* istanbul ignore else */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">        initProxy(vm)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        vm._renderProxy = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // expose real self</span><br><span class=\"line\">    vm._self = vm</span><br><span class=\"line\">    initLifecycle(vm)</span><br><span class=\"line\">    initEvents(vm)</span><br><span class=\"line\">    initRender(vm)</span><br><span class=\"line\">    callHook(vm, &#x27;beforeCreate&#x27;)</span><br><span class=\"line\">    initInjections(vm) // resolve injections before data/props</span><br><span class=\"line\">    initState(vm)</span><br><span class=\"line\">    initProvide(vm) // resolve provide after data/props</span><br><span class=\"line\">    callHook(vm, &#x27;created&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        vm._name = formatComponentName(vm, false)</span><br><span class=\"line\">        mark(endTag)</span><br><span class=\"line\">        measure(`vue $&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (vm.$options.el) &#123;</span><br><span class=\"line\">        vm.$mount(vm.$options.el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二-Vue实例的挂载\"><a href=\"#二-Vue实例的挂载\" class=\"headerlink\" title=\"二. Vue实例的挂载\"></a>二. Vue实例的挂载</h3><blockquote>\n<p>$mount这个过程主要做两件事: <br /></p>\n<ol>\n<li>调用vm.render()生成VNode, <br /></li>\n<li>实例化一个渲染Wathcer, 这个watcher会在初始化的时候执行它的回调函数, 另一个作用就是检测数据变化\b, 之后会执行他的回调函数(updateComponent), 最终会调用vm.update更新DOM<br /></li>\n</ol>\n</blockquote>\n<blockquote>\n<p> 下面看具体的实现细节</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>转换render方法</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 缓存原型上的$mount方法</span><br><span class=\"line\">const mount = Vue.prototype.$mount</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新定义vue原型上的$mount方法</span><br><span class=\"line\">Vue.prototype.$mount = function (</span><br><span class=\"line\">    el?: string | Element,</span><br><span class=\"line\">    hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">    // 获取el的dom节点</span><br><span class=\"line\">    el = el &amp;&amp; query(el)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对Dom节点进行限制, Vue不能挂载到body, html这样的节点上</span><br><span class=\"line\">    if (el === document.body || el === document.documentElement) &#123;</span><br><span class=\"line\">        process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">        `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span><br><span class=\"line\">        )</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const options = this.$options</span><br><span class=\"line\">    // 这里是将template字符串转化成render方法, 通过compileFunction函数实现</span><br><span class=\"line\">    if (!options.render) &#123;</span><br><span class=\"line\">        let template = options.template</span><br><span class=\"line\">        if (template) &#123;</span><br><span class=\"line\">        if (typeof template === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">            if (template.charAt(0) === &#x27;#&#x27;) &#123;</span><br><span class=\"line\">            template = idToTemplate(template)</span><br><span class=\"line\">            /* istanbul ignore if */</span><br><span class=\"line\">            if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !template) &#123;</span><br><span class=\"line\">                warn(</span><br><span class=\"line\">                `Template element not found or is empty: $&#123;options.template&#125;`,</span><br><span class=\"line\">                this</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else if (template.nodeType) &#123;</span><br><span class=\"line\">            template = template.innerHTML</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">            warn(&#x27;invalid template option:&#x27; + template, this)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return this</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125; else if (el) &#123;</span><br><span class=\"line\">            template = getOuterHTML(el)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (template) &#123;</span><br><span class=\"line\">        /* istanbul ignore if */</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp;        config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">            mark(&#x27;compile&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 将模板转化为render函数</span><br><span class=\"line\">        const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class=\"line\">            shouldDecodeNewlines,</span><br><span class=\"line\">            shouldDecodeNewlinesForHref,</span><br><span class=\"line\">            delimiters: options.delimiters,</span><br><span class=\"line\">            comments: options.comments</span><br><span class=\"line\">        &#125;, this)</span><br><span class=\"line\">        options.render = render</span><br><span class=\"line\">        options.staticRenderFns = staticRenderFns</span><br><span class=\"line\"></span><br><span class=\"line\">        /* istanbul ignore if */</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">            mark(&#x27;compile end&#x27;)</span><br><span class=\"line\">            measure(`vue $&#123;this._name&#125; compile`, &#x27;compile&#x27;, &#x27;compile end&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 最后调用\b之前缓存的原型上的$mount方法</span><br><span class=\"line\">    return mount.call(this, el, hydrating)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol start=\"2\">\n<li>执行原型上的$mount方法</li>\n</ol>\n</blockquote>\n<p>找到el的Dom节点, 执行mountComponent方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// public mount method</span><br><span class=\"line\">Vue.prototype.$mount = function (</span><br><span class=\"line\">el?: string | Element,</span><br><span class=\"line\">hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">    el = el &amp;&amp; inBrowser ? query(el) : undefined</span><br><span class=\"line\">    return mountComponent(this, el, hydrating)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mountComponent方法: <br /><br>    1. 调用vm.render方法生成虚拟DOM; <br /><br>    2. 实例化一个渲染watcher, 并且将updateComponent作为他的回调函数,  初始化的时候和数据变动的时候都会执行这个回调函数, 更新DOM<br /><br>    3. 设置vm._isMounted为true, 标识实例已经挂载, 同时执行mount钩子函数<br>\b</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function mountComponent (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    el: ?Element,</span><br><span class=\"line\">    hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">    vm.$el = el</span><br><span class=\"line\">    if (!vm.$options.render) &#123;</span><br><span class=\"line\">        vm.$options.render = createEmptyVNode</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">        /* istanbul ignore if */</span><br><span class=\"line\">        if ((vm.$options.template &amp;&amp; vm.$options.template.charAt(0) !== &#x27;#&#x27;) ||</span><br><span class=\"line\">            vm.$options.el || el) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">            &#x27;You are using the runtime-only build of Vue where the template &#x27; +</span><br><span class=\"line\">            &#x27;compiler is not available. Either pre-compile the templates into &#x27; +</span><br><span class=\"line\">            &#x27;render functions, or use the compiler-included build.&#x27;,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">            &#x27;Failed to mount component: template or render function not defined.&#x27;,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callHook(vm, &#x27;beforeMount&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    let updateComponent</span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        updateComponent = () =&gt; &#123;</span><br><span class=\"line\">            const name = vm._name</span><br><span class=\"line\">            const id = vm._uid</span><br><span class=\"line\">            const startTag = `vue-perf-start:$&#123;id&#125;`</span><br><span class=\"line\">            const endTag = `vue-perf-end:$&#123;id&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">            mark(startTag)</span><br><span class=\"line\">            const vnode = vm._render()</span><br><span class=\"line\">            mark(endTag)</span><br><span class=\"line\">            measure(`vue $&#123;name&#125; render`, startTag, endTag)</span><br><span class=\"line\"></span><br><span class=\"line\">            mark(startTag)</span><br><span class=\"line\">            vm._update(vnode, hydrating)</span><br><span class=\"line\">            mark(endTag)</span><br><span class=\"line\">            measure(`vue $&#123;name&#125; patch`, startTag, endTag)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        updateComponent = () =&gt; &#123;</span><br><span class=\"line\">            vm._update(vm._render(), hydrating)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 实例化一个渲染wathcer, 并且updateComponent作为它的参数</span><br><span class=\"line\">    new Watcher(vm, updateComponent, noop, &#123;</span><br><span class=\"line\">            before () &#123;</span><br><span class=\"line\">            if (vm._isMounted) &#123;</span><br><span class=\"line\">                callHook(vm, &#x27;beforeUpdate&#x27;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, true /* isRenderWatcher */)</span><br><span class=\"line\">    hydrating = false</span><br><span class=\"line\"></span><br><span class=\"line\">    // manually mounted instance, call mounted on self</span><br><span class=\"line\">    // mounted is called for render-created child components in its inserted hook</span><br><span class=\"line\">    if (vm.$vnode == null) &#123;</span><br><span class=\"line\">        vm._isMounted = true</span><br><span class=\"line\">        callHook(vm, &#x27;mounted&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        return vm</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol start=\"3\">\n<li>update: 将虚拟DOM渲染成真实的节点</li>\n</ol>\n</blockquote>\n<pre><code>Vue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候, 它的核心是调用patch方法\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    const prevEl = vm.$el</span><br><span class=\"line\">    const prevVnode = vm._vnode</span><br><span class=\"line\">    const prevActiveInstance = activeInstance</span><br><span class=\"line\">    activeInstance = vm</span><br><span class=\"line\">    vm._vnode = vnode</span><br><span class=\"line\">    // Vue.prototype.__patch__ is injected in entry points</span><br><span class=\"line\">    // based on the rendering backend used.</span><br><span class=\"line\">    if (!prevVnode) &#123;</span><br><span class=\"line\">        // initial render</span><br><span class=\"line\">        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // updates</span><br><span class=\"line\">        vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    activeInstance = prevActiveInstance</span><br><span class=\"line\">    // update __vue__ reference</span><br><span class=\"line\">    if (prevEl) &#123;</span><br><span class=\"line\">        prevEl.__vue__ = null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (vm.$el) &#123;</span><br><span class=\"line\">        vm.$el.__vue__ = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // if parent is an HOC, update its $el as well</span><br><span class=\"line\">    if (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class=\"line\">        vm.$parent.$el = vm.$el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<blockquote>\n<p>patch方法:<br/><br>在src&#x2F;platforms&#x2F;web&#x2F;runtime&#x2F;patch.js可以看到, 它是createPatchFunction方法的返回值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const patch: Function = createPatchFunction(&#123; nodeOps, modules &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>createPatchFunction</p>\n<pre><code>\n</code></pre>\n"},{"title":"调试工具 - whistle","slug":"debug/whistle","date":"2018-09-15T09:15:00.000Z","keywords":"Gitlab,调试工具","_content":"[常规使用]\n一、安装\n  ```ts\n  npm i -g whistle\n  ```\n\n二、启动或停止或重启\n```ts\n[i] whistle@2.7.12 started\n[i] 1. use your device to visit the following URL list, gets the IP of the URL you can access:\n       http://127.0.0.1:8899/\n       http://192.168.1.8:8899/\n       Note: If all the above URLs are unable to access, check the firewall settings\n             For help see https://github.com/avwo/whistle\n[i] 2. configure your device to use whistle as its HTTP and HTTPS proxy on IP:8899\n[i] 3. use Chrome to visit http://local.whistlejs.com/ to get started\n```\n\n三、代理(手机或PC)、证书\n\n[代理设置](proxy.png)\n安装https 根证书信任\n\n[高阶使用]\n1. 请求转发(替换为本地文件)[不用等后端接口返回,可以模拟接口数据]\nrules: http://api/obj/getList  file://...本地文件各种格式...\n2. 请求转发[替换本地文件,代理线上至本地]\n   `线上环境,有特殊问题,没法在生产复现,此时可直接替换js至本地进行调试`\n3. 请求转发(替换为另一个线上路径)\n   `跨域的一种解决方案`\n4. 注入html、js、css\n   `whistle会自动根据响应内容的类型,判断是否注入相应的文件及如何注入(是否要用标签包裹起来)` \n\nrules:\n   http://www.baidu.com  html:///users/xxx/xx.html\n   http://www.baidu.com  js:///users/xxx/xx.js\n   http://www.baidu.com  css:///users/xxx/xx.css\nvalues:\n    create => 资源&实例化\n    https://www|m.baidu.com  jsPrepend://{vconsole.min.js} # 引入源码\n\n    https://www|m.baidu.com  jsPrepend://{vconsole.js} # 引入业务js\n5. 使用log功能打印日志\n    `移动端真机调试中,无法像浏览器console那样查看日志和数据,早前方案是注入vconsole插件,而有了whistle后,我们可以这样做, 当我们访问手机端页面log,就回输出到whistle中`\n\n    www|m.baidu.com log:// #whistle中log记录\n\n6. 跨域,这样后端不用在设置头\n   `https:后端接口地址  resCors://*`\n","source":"_posts/debug/whistle.md","raw":"---\ntitle: 调试工具 - whistle\nslug: t0uky1fwde\ndate: 2018-09-15 17:15:00\nkeywords: Gitlab,调试工具\ntags: [debug]\n---\n[常规使用]\n一、安装\n  ```ts\n  npm i -g whistle\n  ```\n\n二、启动或停止或重启\n```ts\n[i] whistle@2.7.12 started\n[i] 1. use your device to visit the following URL list, gets the IP of the URL you can access:\n       http://127.0.0.1:8899/\n       http://192.168.1.8:8899/\n       Note: If all the above URLs are unable to access, check the firewall settings\n             For help see https://github.com/avwo/whistle\n[i] 2. configure your device to use whistle as its HTTP and HTTPS proxy on IP:8899\n[i] 3. use Chrome to visit http://local.whistlejs.com/ to get started\n```\n\n三、代理(手机或PC)、证书\n\n[代理设置](proxy.png)\n安装https 根证书信任\n\n[高阶使用]\n1. 请求转发(替换为本地文件)[不用等后端接口返回,可以模拟接口数据]\nrules: http://api/obj/getList  file://...本地文件各种格式...\n2. 请求转发[替换本地文件,代理线上至本地]\n   `线上环境,有特殊问题,没法在生产复现,此时可直接替换js至本地进行调试`\n3. 请求转发(替换为另一个线上路径)\n   `跨域的一种解决方案`\n4. 注入html、js、css\n   `whistle会自动根据响应内容的类型,判断是否注入相应的文件及如何注入(是否要用标签包裹起来)` \n\nrules:\n   http://www.baidu.com  html:///users/xxx/xx.html\n   http://www.baidu.com  js:///users/xxx/xx.js\n   http://www.baidu.com  css:///users/xxx/xx.css\nvalues:\n    create => 资源&实例化\n    https://www|m.baidu.com  jsPrepend://{vconsole.min.js} # 引入源码\n\n    https://www|m.baidu.com  jsPrepend://{vconsole.js} # 引入业务js\n5. 使用log功能打印日志\n    `移动端真机调试中,无法像浏览器console那样查看日志和数据,早前方案是注入vconsole插件,而有了whistle后,我们可以这样做, 当我们访问手机端页面log,就回输出到whistle中`\n\n    www|m.baidu.com log:// #whistle中log记录\n\n6. 跨域,这样后端不用在设置头\n   `https:后端接口地址  resCors://*`\n","published":1,"updated":"2024-10-09T08:35:26.956Z","_id":"cm217igjs000kx99ke1z7bxbd","comments":1,"layout":"post","photos":[],"content":"<p>[常规使用]<br>一、安装<br>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g whistle</span><br></pre></td></tr></table></figure></p>\n<p>二、启动或停止或重启</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[i] whistle@<span class=\"number\">2.7</span><span class=\"number\">.12</span> started</span><br><span class=\"line\">[i] <span class=\"number\">1.</span> use your device to visit the following <span class=\"variable constant_\">URL</span> list, gets the <span class=\"variable constant_\">IP</span> <span class=\"keyword\">of</span> the <span class=\"variable constant_\">URL</span> you can <span class=\"attr\">access</span>:</span><br><span class=\"line\">       <span class=\"attr\">http</span>:<span class=\"comment\">//127.0.0.1:8899/</span></span><br><span class=\"line\">       <span class=\"attr\">http</span>:<span class=\"comment\">//192.168.1.8:8899/</span></span><br><span class=\"line\">       <span class=\"title class_\">Note</span>: <span class=\"title class_\">If</span> all the above <span class=\"title class_\">URLs</span> are unable to access, check the firewall settings</span><br><span class=\"line\">             <span class=\"title class_\">For</span> help see <span class=\"attr\">https</span>:<span class=\"comment\">//github.com/avwo/whistle</span></span><br><span class=\"line\">[i] <span class=\"number\">2.</span> configure your device to use whistle <span class=\"keyword\">as</span> its <span class=\"variable constant_\">HTTP</span> and <span class=\"variable constant_\">HTTPS</span> proxy on <span class=\"attr\">IP</span>:<span class=\"number\">8899</span></span><br><span class=\"line\">[i] <span class=\"number\">3.</span> use <span class=\"title class_\">Chrome</span> to visit <span class=\"attr\">http</span>:<span class=\"comment\">//local.whistlejs.com/ to get started</span></span><br></pre></td></tr></table></figure>\n\n<p>三、代理(手机或PC)、证书</p>\n<p><a href=\"proxy.png\">代理设置</a><br>安装https 根证书信任</p>\n<p>[高阶使用]</p>\n<ol>\n<li>请求转发(替换为本地文件)[不用等后端接口返回,可以模拟接口数据]<br>rules: <a href=\"http://api/obj/getList\">http://api/obj/getList</a>  file:&#x2F;&#x2F;…本地文件各种格式…</li>\n<li>请求转发[替换本地文件,代理线上至本地]<br><code>线上环境,有特殊问题,没法在生产复现,此时可直接替换js至本地进行调试</code></li>\n<li>请求转发(替换为另一个线上路径)<br><code>跨域的一种解决方案</code></li>\n<li>注入html、js、css<br><code>whistle会自动根据响应内容的类型,判断是否注入相应的文件及如何注入(是否要用标签包裹起来)</code></li>\n</ol>\n<p>rules:<br>   <a href=\"http://www.baidu.com/\">http://www.baidu.com</a>  html:&#x2F;&#x2F;&#x2F;users&#x2F;xxx&#x2F;xx.html<br>   <a href=\"http://www.baidu.com/\">http://www.baidu.com</a>  js:&#x2F;&#x2F;&#x2F;users&#x2F;xxx&#x2F;xx.js<br>   <a href=\"http://www.baidu.com/\">http://www.baidu.com</a>  css:&#x2F;&#x2F;&#x2F;users&#x2F;xxx&#x2F;xx.css<br>values:<br>    create &#x3D;&gt; 资源&amp;实例化<br>    <a href=\"https://www|m.baidu.com\">https://www|m.baidu.com</a>  jsPrepend:&#x2F;&#x2F;{vconsole.min.js} # 引入源码</p>\n<pre><code>https://www|m.baidu.com  jsPrepend://&#123;vconsole.js&#125; # 引入业务js\n</code></pre>\n<ol start=\"5\">\n<li><p>使用log功能打印日志<br> <code>移动端真机调试中,无法像浏览器console那样查看日志和数据,早前方案是注入vconsole插件,而有了whistle后,我们可以这样做, 当我们访问手机端页面log,就回输出到whistle中</code></p>\n<p> www|m.baidu.com log:&#x2F;&#x2F; #whistle中log记录</p>\n</li>\n<li><p>跨域,这样后端不用在设置头<br><code>https:后端接口地址  resCors://*</code></p>\n</li>\n</ol>\n","excerpt":"","more":"<p>[常规使用]<br>一、安装<br>  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g whistle</span><br></pre></td></tr></table></figure></p>\n<p>二、启动或停止或重启</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[i] whistle@<span class=\"number\">2.7</span><span class=\"number\">.12</span> started</span><br><span class=\"line\">[i] <span class=\"number\">1.</span> use your device to visit the following <span class=\"variable constant_\">URL</span> list, gets the <span class=\"variable constant_\">IP</span> <span class=\"keyword\">of</span> the <span class=\"variable constant_\">URL</span> you can <span class=\"attr\">access</span>:</span><br><span class=\"line\">       <span class=\"attr\">http</span>:<span class=\"comment\">//127.0.0.1:8899/</span></span><br><span class=\"line\">       <span class=\"attr\">http</span>:<span class=\"comment\">//192.168.1.8:8899/</span></span><br><span class=\"line\">       <span class=\"title class_\">Note</span>: <span class=\"title class_\">If</span> all the above <span class=\"title class_\">URLs</span> are unable to access, check the firewall settings</span><br><span class=\"line\">             <span class=\"title class_\">For</span> help see <span class=\"attr\">https</span>:<span class=\"comment\">//github.com/avwo/whistle</span></span><br><span class=\"line\">[i] <span class=\"number\">2.</span> configure your device to use whistle <span class=\"keyword\">as</span> its <span class=\"variable constant_\">HTTP</span> and <span class=\"variable constant_\">HTTPS</span> proxy on <span class=\"attr\">IP</span>:<span class=\"number\">8899</span></span><br><span class=\"line\">[i] <span class=\"number\">3.</span> use <span class=\"title class_\">Chrome</span> to visit <span class=\"attr\">http</span>:<span class=\"comment\">//local.whistlejs.com/ to get started</span></span><br></pre></td></tr></table></figure>\n\n<p>三、代理(手机或PC)、证书</p>\n<p><a href=\"proxy.png\">代理设置</a><br>安装https 根证书信任</p>\n<p>[高阶使用]</p>\n<ol>\n<li>请求转发(替换为本地文件)[不用等后端接口返回,可以模拟接口数据]<br>rules: <a href=\"http://api/obj/getList\">http://api/obj/getList</a>  file:&#x2F;&#x2F;…本地文件各种格式…</li>\n<li>请求转发[替换本地文件,代理线上至本地]<br><code>线上环境,有特殊问题,没法在生产复现,此时可直接替换js至本地进行调试</code></li>\n<li>请求转发(替换为另一个线上路径)<br><code>跨域的一种解决方案</code></li>\n<li>注入html、js、css<br><code>whistle会自动根据响应内容的类型,判断是否注入相应的文件及如何注入(是否要用标签包裹起来)</code></li>\n</ol>\n<p>rules:<br>   <a href=\"http://www.baidu.com/\">http://www.baidu.com</a>  html:&#x2F;&#x2F;&#x2F;users&#x2F;xxx&#x2F;xx.html<br>   <a href=\"http://www.baidu.com/\">http://www.baidu.com</a>  js:&#x2F;&#x2F;&#x2F;users&#x2F;xxx&#x2F;xx.js<br>   <a href=\"http://www.baidu.com/\">http://www.baidu.com</a>  css:&#x2F;&#x2F;&#x2F;users&#x2F;xxx&#x2F;xx.css<br>values:<br>    create &#x3D;&gt; 资源&amp;实例化<br>    <a href=\"https://www|m.baidu.com\">https://www|m.baidu.com</a>  jsPrepend:&#x2F;&#x2F;{vconsole.min.js} # 引入源码</p>\n<pre><code>https://www|m.baidu.com  jsPrepend://&#123;vconsole.js&#125; # 引入业务js\n</code></pre>\n<ol start=\"5\">\n<li><p>使用log功能打印日志<br> <code>移动端真机调试中,无法像浏览器console那样查看日志和数据,早前方案是注入vconsole插件,而有了whistle后,我们可以这样做, 当我们访问手机端页面log,就回输出到whistle中</code></p>\n<p> www|m.baidu.com log:&#x2F;&#x2F; #whistle中log记录</p>\n</li>\n<li><p>跨域,这样后端不用在设置头<br><code>https:后端接口地址  resCors://*</code></p>\n</li>\n</ol>\n"},{"title":"虚拟任务栈","slug":"vue/task","keywords":"vue,虚拟任务栈,task","date":"2023-09-01T14:17:36.000Z","_content":"\n## 什么是虚拟任务栈\n\n    1. 具备的进入页面动画、退出页面动画、进入页面读取数据渲染视图、返回之前页面无需重新读取数据渲染视图等特性\n    2. 特点:\n       1. 虚拟任务栈可以模拟 原生应用中 Task 栈的效果;\n       2. 进出场页面动画;\n       3. 进入页面读取数据渲染视图;\n       4. 返回之前的页面 无需重新拉取数据渲染视图,而是缓存\n\n## 该怎么弄, 才可达到以上效果\n\n    1. 我们需要监听到路由的跳转（页面的跳转）\n    2. 我们需要保存已经进入栈中的页面，而不是销毁他们\n\n首先：需要监听到路由的跳转（页面的跳转）\n    - 监听路由的跳转，VueRouter 为我们提供了现成的解决方案，我们可以直接通过 watch 属性来监听 $router 的跳转变化：\n\n    ```js\n        // 代码来自 VueRouter 官网：https://router.vuejs.org/zh/guide/advanced/transitions.html\n        // watch $route 决定使用哪种过渡\n        watch: {\n            '$route' (to, from) {\n                const toDepth = to.path.split('/').length\n                const fromDepth = from.path.split('/').length\n                this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n            }\n        }\n    ```\n\n其次：需要保存已经进入栈中的页面，而不是销毁他们","source":"_posts/vue/task.md","raw":"---\ntitle: 虚拟任务栈\ntags: [vue]\nslug: ea549f7c\nkeywords: vue,虚拟任务栈,task\ndate: 2023-09-01 22:17:36\n---\n\n## 什么是虚拟任务栈\n\n    1. 具备的进入页面动画、退出页面动画、进入页面读取数据渲染视图、返回之前页面无需重新读取数据渲染视图等特性\n    2. 特点:\n       1. 虚拟任务栈可以模拟 原生应用中 Task 栈的效果;\n       2. 进出场页面动画;\n       3. 进入页面读取数据渲染视图;\n       4. 返回之前的页面 无需重新拉取数据渲染视图,而是缓存\n\n## 该怎么弄, 才可达到以上效果\n\n    1. 我们需要监听到路由的跳转（页面的跳转）\n    2. 我们需要保存已经进入栈中的页面，而不是销毁他们\n\n首先：需要监听到路由的跳转（页面的跳转）\n    - 监听路由的跳转，VueRouter 为我们提供了现成的解决方案，我们可以直接通过 watch 属性来监听 $router 的跳转变化：\n\n    ```js\n        // 代码来自 VueRouter 官网：https://router.vuejs.org/zh/guide/advanced/transitions.html\n        // watch $route 决定使用哪种过渡\n        watch: {\n            '$route' (to, from) {\n                const toDepth = to.path.split('/').length\n                const fromDepth = from.path.split('/').length\n                this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n            }\n        }\n    ```\n\n其次：需要保存已经进入栈中的页面，而不是销毁他们","published":1,"updated":"2024-10-09T01:47:56.681Z","_id":"cm217ko8f000tx99k5x31a8hu","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"什么是虚拟任务栈\"><a href=\"#什么是虚拟任务栈\" class=\"headerlink\" title=\"什么是虚拟任务栈\"></a>什么是虚拟任务栈</h2><pre><code>1. 具备的进入页面动画、退出页面动画、进入页面读取数据渲染视图、返回之前页面无需重新读取数据渲染视图等特性\n2. 特点:\n   1. 虚拟任务栈可以模拟 原生应用中 Task 栈的效果;\n   2. 进出场页面动画;\n   3. 进入页面读取数据渲染视图;\n   4. 返回之前的页面 无需重新拉取数据渲染视图,而是缓存\n</code></pre>\n<h2 id=\"该怎么弄-才可达到以上效果\"><a href=\"#该怎么弄-才可达到以上效果\" class=\"headerlink\" title=\"该怎么弄, 才可达到以上效果\"></a>该怎么弄, 才可达到以上效果</h2><pre><code>1. 我们需要监听到路由的跳转（页面的跳转）\n2. 我们需要保存已经进入栈中的页面，而不是销毁他们\n</code></pre>\n<p>首先：需要监听到路由的跳转（页面的跳转）<br>    - 监听路由的跳转，VueRouter 为我们提供了现成的解决方案，我们可以直接通过 watch 属性来监听 $router 的跳转变化：</p>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码来自 VueRouter 官网：https://router.vuejs.org/zh/guide/advanced/transitions.html</span></span><br><span class=\"line\"><span class=\"comment\">// watch $route 决定使用哪种过渡</span></span><br><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;$route&#x27;</span> (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> toDepth = to.<span class=\"property\">path</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fromDepth = <span class=\"keyword\">from</span>.<span class=\"property\">path</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">transitionName</span> = toDepth &lt; fromDepth ? <span class=\"string\">&#x27;slide-right&#x27;</span> : <span class=\"string\">&#x27;slide-left&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>其次：需要保存已经进入栈中的页面，而不是销毁他们</p>\n","excerpt":"","more":"<h2 id=\"什么是虚拟任务栈\"><a href=\"#什么是虚拟任务栈\" class=\"headerlink\" title=\"什么是虚拟任务栈\"></a>什么是虚拟任务栈</h2><pre><code>1. 具备的进入页面动画、退出页面动画、进入页面读取数据渲染视图、返回之前页面无需重新读取数据渲染视图等特性\n2. 特点:\n   1. 虚拟任务栈可以模拟 原生应用中 Task 栈的效果;\n   2. 进出场页面动画;\n   3. 进入页面读取数据渲染视图;\n   4. 返回之前的页面 无需重新拉取数据渲染视图,而是缓存\n</code></pre>\n<h2 id=\"该怎么弄-才可达到以上效果\"><a href=\"#该怎么弄-才可达到以上效果\" class=\"headerlink\" title=\"该怎么弄, 才可达到以上效果\"></a>该怎么弄, 才可达到以上效果</h2><pre><code>1. 我们需要监听到路由的跳转（页面的跳转）\n2. 我们需要保存已经进入栈中的页面，而不是销毁他们\n</code></pre>\n<p>首先：需要监听到路由的跳转（页面的跳转）<br>    - 监听路由的跳转，VueRouter 为我们提供了现成的解决方案，我们可以直接通过 watch 属性来监听 $router 的跳转变化：</p>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码来自 VueRouter 官网：https://router.vuejs.org/zh/guide/advanced/transitions.html</span></span><br><span class=\"line\"><span class=\"comment\">// watch $route 决定使用哪种过渡</span></span><br><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;$route&#x27;</span> (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> toDepth = to.<span class=\"property\">path</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fromDepth = <span class=\"keyword\">from</span>.<span class=\"property\">path</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">transitionName</span> = toDepth &lt; fromDepth ? <span class=\"string\">&#x27;slide-right&#x27;</span> : <span class=\"string\">&#x27;slide-left&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>其次：需要保存已经进入栈中的页面，而不是销毁他们</p>\n"},{"title":"Single-SPA微前端框架的使用Demo汇总","keywords":"微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA","slug":"singleSpa/Single-SPA微前端框架的使用Demo汇总","date":"2018-10-30T16:00:00.000Z","_content":"\n这些是在github能找到的single-spa微前端的Demo:\n\n## [single-spa-examples](https://github.com/CanopyTax/single-spa-examples) \n\n这是一个single-spa做的官方例子,这是[在线demo](http://single-spa.surge.sh).\n\n---\n\n## [simple-single-spa-webpack-example](https://github.com/joeldenning/simple-single-spa-webpack-example) \n\n\n这是基于webpack构建的使用例子,webpakc版本可能有点低,但是思想是一样的.\n\n---\n\n## [single-spa-angular-cli-examples](https://github.com/PlaceMe-SAS/single-spa-angular-cli-examples) \n\n基于angular-cli做的angular例子,适用于angular 2.0+ 的版本.\n\n---\n\n## [single-spa-es5-angularjs](https://github.com/joeldenning/single-spa-es5-angularjs) \n\n\nangularjs的例子,也就是angularjs1.0的版本.\n\n---\n\n## [single-spa-portal-example](https://github.com/me-12/single-spa-portal-example)\n\n这已经是一个非常完整的多技术栈用例了,里面集成了多技术栈与模块之间通讯的思路,非常值得研究.\n\n---\n\n## [microfrontend-base-demo](https://github.com/Fantasy9527/microfrontend-base-demo) \n\n这是在我们项目中萃取的base模块demo\n\n---\n\n## [microfrontend-submodule-demo](https://github.com/Fantasy9527/microfrontend-submodule-demo) \n\n这是在我们项目中萃取的子模块demo","source":"_posts/singleSpa/Single-SPA微前端框架的使用Demo汇总.md","raw":"---\ntitle: Single-SPA微前端框架的使用Demo汇总\ntags:\n  - 微前端\n  - MicroFrontend\n  - 前端全栈\nkeywords: '微前端,前端微服务化,前端自动化,解决方案,前端难题,Single,SPA'\nslug: 22975f44\ndate: 2018-10-31 00:00:00\n---\n\n这些是在github能找到的single-spa微前端的Demo:\n\n## [single-spa-examples](https://github.com/CanopyTax/single-spa-examples) \n\n这是一个single-spa做的官方例子,这是[在线demo](http://single-spa.surge.sh).\n\n---\n\n## [simple-single-spa-webpack-example](https://github.com/joeldenning/simple-single-spa-webpack-example) \n\n\n这是基于webpack构建的使用例子,webpakc版本可能有点低,但是思想是一样的.\n\n---\n\n## [single-spa-angular-cli-examples](https://github.com/PlaceMe-SAS/single-spa-angular-cli-examples) \n\n基于angular-cli做的angular例子,适用于angular 2.0+ 的版本.\n\n---\n\n## [single-spa-es5-angularjs](https://github.com/joeldenning/single-spa-es5-angularjs) \n\n\nangularjs的例子,也就是angularjs1.0的版本.\n\n---\n\n## [single-spa-portal-example](https://github.com/me-12/single-spa-portal-example)\n\n这已经是一个非常完整的多技术栈用例了,里面集成了多技术栈与模块之间通讯的思路,非常值得研究.\n\n---\n\n## [microfrontend-base-demo](https://github.com/Fantasy9527/microfrontend-base-demo) \n\n这是在我们项目中萃取的base模块demo\n\n---\n\n## [microfrontend-submodule-demo](https://github.com/Fantasy9527/microfrontend-submodule-demo) \n\n这是在我们项目中萃取的子模块demo","published":1,"updated":"2024-10-09T10:45:07.383Z","_id":"cm217uz3000007y9khnmn2de9","comments":1,"layout":"post","photos":[],"content":"<p>这些是在github能找到的single-spa微前端的Demo:</p>\n<h2 id=\"single-spa-examples\"><a href=\"#single-spa-examples\" class=\"headerlink\" title=\"single-spa-examples\"></a><a href=\"https://github.com/CanopyTax/single-spa-examples\">single-spa-examples</a></h2><p>这是一个single-spa做的官方例子,这是<a href=\"http://single-spa.surge.sh/\">在线demo</a>.</p>\n<hr>\n<h2 id=\"simple-single-spa-webpack-example\"><a href=\"#simple-single-spa-webpack-example\" class=\"headerlink\" title=\"simple-single-spa-webpack-example\"></a><a href=\"https://github.com/joeldenning/simple-single-spa-webpack-example\">simple-single-spa-webpack-example</a></h2><p>这是基于webpack构建的使用例子,webpakc版本可能有点低,但是思想是一样的.</p>\n<hr>\n<h2 id=\"single-spa-angular-cli-examples\"><a href=\"#single-spa-angular-cli-examples\" class=\"headerlink\" title=\"single-spa-angular-cli-examples\"></a><a href=\"https://github.com/PlaceMe-SAS/single-spa-angular-cli-examples\">single-spa-angular-cli-examples</a></h2><p>基于angular-cli做的angular例子,适用于angular 2.0+ 的版本.</p>\n<hr>\n<h2 id=\"single-spa-es5-angularjs\"><a href=\"#single-spa-es5-angularjs\" class=\"headerlink\" title=\"single-spa-es5-angularjs\"></a><a href=\"https://github.com/joeldenning/single-spa-es5-angularjs\">single-spa-es5-angularjs</a></h2><p>angularjs的例子,也就是angularjs1.0的版本.</p>\n<hr>\n<h2 id=\"single-spa-portal-example\"><a href=\"#single-spa-portal-example\" class=\"headerlink\" title=\"single-spa-portal-example\"></a><a href=\"https://github.com/me-12/single-spa-portal-example\">single-spa-portal-example</a></h2><p>这已经是一个非常完整的多技术栈用例了,里面集成了多技术栈与模块之间通讯的思路,非常值得研究.</p>\n<hr>\n<h2 id=\"microfrontend-base-demo\"><a href=\"#microfrontend-base-demo\" class=\"headerlink\" title=\"microfrontend-base-demo\"></a><a href=\"https://github.com/Fantasy9527/microfrontend-base-demo\">microfrontend-base-demo</a></h2><p>这是在我们项目中萃取的base模块demo</p>\n<hr>\n<h2 id=\"microfrontend-submodule-demo\"><a href=\"#microfrontend-submodule-demo\" class=\"headerlink\" title=\"microfrontend-submodule-demo\"></a><a href=\"https://github.com/Fantasy9527/microfrontend-submodule-demo\">microfrontend-submodule-demo</a></h2><p>这是在我们项目中萃取的子模块demo</p>\n","excerpt":"","more":"<p>这些是在github能找到的single-spa微前端的Demo:</p>\n<h2 id=\"single-spa-examples\"><a href=\"#single-spa-examples\" class=\"headerlink\" title=\"single-spa-examples\"></a><a href=\"https://github.com/CanopyTax/single-spa-examples\">single-spa-examples</a></h2><p>这是一个single-spa做的官方例子,这是<a href=\"http://single-spa.surge.sh/\">在线demo</a>.</p>\n<hr>\n<h2 id=\"simple-single-spa-webpack-example\"><a href=\"#simple-single-spa-webpack-example\" class=\"headerlink\" title=\"simple-single-spa-webpack-example\"></a><a href=\"https://github.com/joeldenning/simple-single-spa-webpack-example\">simple-single-spa-webpack-example</a></h2><p>这是基于webpack构建的使用例子,webpakc版本可能有点低,但是思想是一样的.</p>\n<hr>\n<h2 id=\"single-spa-angular-cli-examples\"><a href=\"#single-spa-angular-cli-examples\" class=\"headerlink\" title=\"single-spa-angular-cli-examples\"></a><a href=\"https://github.com/PlaceMe-SAS/single-spa-angular-cli-examples\">single-spa-angular-cli-examples</a></h2><p>基于angular-cli做的angular例子,适用于angular 2.0+ 的版本.</p>\n<hr>\n<h2 id=\"single-spa-es5-angularjs\"><a href=\"#single-spa-es5-angularjs\" class=\"headerlink\" title=\"single-spa-es5-angularjs\"></a><a href=\"https://github.com/joeldenning/single-spa-es5-angularjs\">single-spa-es5-angularjs</a></h2><p>angularjs的例子,也就是angularjs1.0的版本.</p>\n<hr>\n<h2 id=\"single-spa-portal-example\"><a href=\"#single-spa-portal-example\" class=\"headerlink\" title=\"single-spa-portal-example\"></a><a href=\"https://github.com/me-12/single-spa-portal-example\">single-spa-portal-example</a></h2><p>这已经是一个非常完整的多技术栈用例了,里面集成了多技术栈与模块之间通讯的思路,非常值得研究.</p>\n<hr>\n<h2 id=\"microfrontend-base-demo\"><a href=\"#microfrontend-base-demo\" class=\"headerlink\" title=\"microfrontend-base-demo\"></a><a href=\"https://github.com/Fantasy9527/microfrontend-base-demo\">microfrontend-base-demo</a></h2><p>这是在我们项目中萃取的base模块demo</p>\n<hr>\n<h2 id=\"microfrontend-submodule-demo\"><a href=\"#microfrontend-submodule-demo\" class=\"headerlink\" title=\"microfrontend-submodule-demo\"></a><a href=\"https://github.com/Fantasy9527/microfrontend-submodule-demo\">microfrontend-submodule-demo</a></h2><p>这是在我们项目中萃取的子模块demo</p>\n"},{"title":"viewport视口","slug":"debug/h5 日志","keywords":"移动端","date":"2018-09-01T14:17:36.000Z","_content":"\n## 移动端\n\n### viewport 视口(可视区窗口)\n\n\t\t默认不设置viewport一般可视区宽度在移动端是980\n\t\t\n\t\twidth  可视区的宽度 (number||device-width)\n\t\t\n\t\tuser-scalable 是否允许用户缩放 (yes||no) iOS10无效\n\t\t\n\t\tinitial-scale 初始缩放比例\n\t\t\n\t\tminimum-scale 最小缩放比例\n\t\t\n\t\tmaximum-scale 最大缩放比例\n\n### 设备像素比(device pixel ratio)\n\n\t\t设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：\n\t\t\n\t\t\t设备像素比 ＝ 物理像素 / 设备独立像素\n\t\t\t\n\t\t在JavaScript中，可以通过window.devicePixelRatio获取到当前设备的dpr\n\n### CSS单位rem\n\n\t\t在W3C规范中是这样描述rem的:\n\t\t\n\t\tfont size of the root element.\n\t\t\n\t\t简单的理解，rem就是相对于根元素<html>的font-size来做计算。\n\t\t而我们的方案中使用rem单位，是能轻易的根据<html>的font-size计算出元素的盒模型大小。\n\n### meta设置\n\n```html\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<meta name=\"viewport\" content=\"width=device-width,user-scalable=no\">\n\t<!--QQ强制竖屏显示-->\n\t<meta name=\"x5-orientation\" content=\"portrait\" />\n\t<!--QQ全屏显示-->\n\t<meta name=\"x5-fullscreen\" content=\"true\" />\n\t<!--UC强制竖屏显示-->\n\t<meta name=\"screen-orientation\" content=\"portrait\">\n\t<!--UC全屏显示-->\n\t<meta name=\"full-screen\" content=\"yes\">\n\t<!--禁止识别电话号码和邮箱地址-->\n\t<meta name=\"format-detection\" content=\"telephone=no, email=no\" />\n\t<!--页面适合在pc和mobile上进行浏览-->\n\t<meta name=\"applicable-device\" content=\"pc, mobile\">\n\t<!--针对Apple是否启动WebApp功能-->\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\t<!--Apple顶部导航栏颜色-->\n\t<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n\t</head>\n\t<body>\n\t\t<!--\n\t\t\thref=\"tel:\"\n\t\t\thref=\"mailto:\"\n\t\t-->\n\t\t<p>13888888888</p>\n\t\t<a href=\"tel:18888888888\">请拨打电话18888888888</a>\n\t\t<a href=\"mailto:zyh@qq.com\">请发送邮件</a>\n\t</body>\n\t</html>\n```\n\n### 默认样式设置\n\n```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=no\">\n    <style type=\"text/css\">\n    /*默认字体设置*/\n    body {\n    \tfont-family: Helvetica;\n    }\n    body * {\n    \t/*禁止文字缩放*/\n    \t-webkit-text-size-adjust: 100%;\n    \t/*选中文字设置*/\n    \t-webkit-user-select: none; \n    }\n    /*清除点击阴影*/\n    a,input,button {\n    \t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    \t/*-webkit-tap-highlight-color: transparent*/\n    }\n    /*消除圆角按钮（针对iOS系统）*/\n    input,button {\n    \t-webkit-appearance: none;\n    \tborder-radius: 0;\n    }\n    </style>\n    </head>\n    <body>\n    \t<a href=\"http://www.baidu.com\">百度一下</a>\n    \t<input type=\"button\" value=\"按钮\">\n    </body>\n    </html>\n```\n\n### 动态获取像素比（取自--饿了么移动端）\n\n```javascript\n\t!function(e, t) {\n\t\tfunction i() {\n\t\t\tvar t = n.getBoundingClientRect().width;\n\t\t\tt / d > 540 && (t = 540 * d);\n\t\t\tvar i = t / 10;\n\t\t\tn.style.fontSize = i + \"px\", p.rem = e.rem = i\n\t\t}\n\t\tvar a, r = e.document,\n\t\t\tn = r.documentElement,\n\t\t\to = r.querySelector('meta[name=\"viewport\"]'),\n\t\t\tl = r.querySelector('meta[name=\"flexible\"]'),\n\t\t\tm = r.querySelector('meta[name=\"flexible-in-x5\"]'),\n\t\t\ts = !0,\n\t\t\td = 0,\n\t\t\tc = 0,\n\t\t\tp = t.flexible || (t.flexible = {});\n\t\tif (o) {\n\t\t\tconsole.warn(\"将根据已有的meta标签来设置缩放比例\");\n\t\t\tvar u = o.getAttribute(\"content\").match(/initial\\-scale=([\\d\\.]+)/);\n\t\t\tu && (c = parseFloat(u[1]), d = parseInt(1 / c))\n\t\t} else if (l) {\n\t\t\tvar f = l.getAttribute(\"content\");\n\t\t\tif (f) {\n\t\t\t\tvar v = f.match(/initial\\-dpr=([\\d\\.]+)/),\n\t\t\t\t\th = f.match(/maximum\\-dpr=([\\d\\.]+)/);\n\t\t\t\tv && (d = parseFloat(v[1]), c = parseFloat((1 / d).toFixed(2))), h && (d = parseFloat(h[1]), c = parseFloat((1 / d).toFixed(2)))\n\t\t\t}\n\t\t}\n\t\tif (m && (s = \"false\" !== m.getAttribute(\"content\")), !d && !c) {\n\t\t\tvar x = (e.navigator.appVersion.match(/android/gi), e.chrome),\n\t\t\t\tg = e.navigator.appVersion.match(/iphone/gi),\n\t\t\t\tb = e.devicePixelRatio,\n\t\t\t\tw = /TBS\\/\\d+/.test(e.navigator.userAgent),\n\t\t\t\ty = !1;\n\t\t\ttry {\n\t\t\t\ty = \"true\" === localStorage.getItem(\"IN_FLEXIBLE_WHITE_LIST\")\n\t\t\t} catch (e) {\n\t\t\t\ty = !1\n\t\t\t}\n\t\t\td = g || x || w && s && y ? b >= 3 && (!d || d >= 3) ? 3 : b >= 2 && (!d || d >= 2) ? 2 : 1 : 1, c = 1 / d\n\t\t}\n\t\tif (n.setAttribute(\"data-dpr\", d), !o) if (o = r.createElement(\"meta\"), o.setAttribute(\"name\", \"viewport\"), o.setAttribute(\"content\", \"initial-scale=\" + c + \", maximum-scale=\" + c + \", minimum-scale=\" + c + \", user-scalable=no\"), n.firstElementChild) n.firstElementChild.appendChild(o);\n\t\telse {\n\t\t\tvar E = r.createElement(\"div\");\n\t\t\tE.appendChild(o), r.write(E.innerHTML)\n\t\t}\n\t\te.addEventListener(\"resize\", function() {\n\t\t\tclearTimeout(a), a = setTimeout(i, 300)\n\t\t}, !1), e.addEventListener(\"pageshow\", function(e) {\n\t\t\te.persisted && (clearTimeout(a), a = setTimeout(i, 300))\n\t\t}, !1), \"complete\" === r.readyState ? r.body.style.fontSize = 12 * d + \"px\" : r.addEventListener(\"DOMContentLoaded\", function(e) {\n\t\t\tr.body.style.fontSize = 12 * d + \"px\"\n\t\t}, !1), i(), p.dpr = e.dpr = d, p.refreshRem = i, p.rem2px = function(e) {\n\t\t\tvar t = parseFloat(e) * this.rem;\n\t\t\treturn \"string\" == typeof e && e.match(/rem$/) && (t += \"px\"), t\n\t\t}, p.px2rem = function(e) {\n\t\t\tvar t = parseFloat(e) / this.rem;\n\t\t\treturn \"string\" == typeof e && e.match(/px$/) && (t += \"rem\"), t\n\t\t}\n\t}(window, window.lib || (window.lib = {}))\n```\n\n### 像素比简单设置\n\n\t\t//获取像素比\n\t\tvar PixelRatio = 1 / window.devicePixelRatio;\n\t\t//写入meta\n\t\tdocument.write('<meta name=\"viewport\" content=\"width=device-width,initial-scale='+PixelRatio+',minimum-scale='+PixelRatio+',maximum-scale='+PixelRatio+',user-scalable=no\" />');\n\t\t//获取html元素\n\t\tvar html = document.getElementsByTagName('html')[0];\n\t\t//获取html（屏幕）的宽度\n\t\tvar pageWidth = html.getBoundingClientRect().width;\n\t\t//获取html的字号\n\t\thtml.style.fontSize = pageWidth / 10 + 'px';\n\n### 弹性盒模型\n\n> 主轴和侧轴的样式都需要加在元素的父级，而元素的位置设置只需要加在自身即可（别忘了父级要加display: flex;）\n\n\t\t主轴方向设置\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\tdisplay: flex;\n\t\t\t\n\t\t\t/*设置主轴方向为水平方向*/\n\t\t\t/*flex-direction: row;*/\n\t\t\t\n\t\t\t/*设置主轴方向为垂直方向*/\n\t\t\t/*flex-direction: column;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\tdisplay: -webkit-box;\n\t\t\t\n\t\t\t/*设置主轴方向为水平方向*/\n\t\t\t-webkit-box-orient: horizontal;\n\t\t\t\n\t\t\t/*设置主轴方向为垂直方向*/\n\t\t\t/*-webkit-box-orient: vertical;*/\n\t\t\n\t\t主轴上元素排列方向\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\t/*display: flex;*/\n\t\t\t\n\t\t\t/*设置主轴方向为水平,元素排列为反序*/\n\t\t\t/*flex-direction: row-reverse;*/\n\t\t\t\n\t\t\t/*设置主轴方向为垂直,元素排列为反序*/\n\t\t\t/*flex-direction: column-reverse;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\tdisplay: -webkit-box;\n\t\t\t\n\t\t\t/*元素在主轴上排列为反序*/\n\t\t\t/*-webkit-box-direction: reverse;*/\n\t\t\t\n\t\t\t/*元素在主轴上排列为正序*/\n\t\t\t/*-webkit-box-direction: normal;*/\n\t\t\n\t\t主轴上富裕空间管理\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\tdisplay: flex;\n\t\t\t\n\t\t\t/*元素在主轴开始位置 ，富裕空间在主轴的结束位置*/\n\t\t\t/*justify-content: flex-start;*/\n\t\t\t\n\t\t\t/*元素在主轴结束位置，富裕空间在主轴开始位置*/\n\t\t\t/*justify-content: flex-end;*/\n\t\t\t\n\t\t\t/*元素在主轴中间,富裕空间在主轴两侧*/\n\t\t\t/*justify-content: center;*/\n\t\t\t\n\t\t\t/*富裕空间平均分配在每两个元素之间*/\n\t\t\t/*justify-content: space-between;*/\n\t\t\t\n\t\t\t/*富裕空间平均分配在每个元素两侧*/\n\t\t\t/*justify-content: space-around;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\tdisplay: -webkit-box;\n\t\t\t\n\t\t\t/*元素在主轴的开始位置,富裕空间在主轴的结束位置*/\n\t\t\t/*-webkit-box-pack: start;*/\n\t\t\t\n\t\t\t/*元素在主轴结束位置，富裕空间在主轴开始位置*/\n\t\t\t/*-webkit-box-pack: end;*/\n\t\t\t\n\t\t\t/*元素在主轴中间,富裕空间在主轴两侧*/\n\t\t\t/*-webkit-box-pack: center;*/\n\t\t\t\n\t\t\t/*富裕空间平均分配在每两个元素之间*/\n\t\t\t/*-webkit-box-pack: justify;*/\n\t\t\n\t\t侧轴上富裕空间管理\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\t/*display: flex;*/\n\t\t\t\n\t\t\t/*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n\t\t\t/*align-items: flex-start;*/\n\t\t\t\n\t\t\t/*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n\t\t\t/*align-items: flex-end;*/\n\t\t\t\n\t\t\t/*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n\t\t\t/*align-items: center;*/\n\t\t\t\n\t\t\t/*根据侧轴方向上文字的基线对齐*/\n\t\t\t/*align-items: baseline;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\t/*display: -webkit-box;*/\n\t\t\t\n\t\t\t/*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n\t\t\t/*-webkit-box-align: start;*/\n\t\t\t\n\t\t\t/*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n\t\t\t/*-webkit-box-align: end;*/\n\t\t\t\n\t\t\t/*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n\t\t\t/*-webkit-box-align: center;*/\n\t\t\n\t\t元素弹性空间\n\t\t\n\t\t\t/*新版*/\n\t\t\t/*flex-grow: 1;*/\n\t\t\t\n\t\t\t/*老版*/\n\t\t\t-webkit-box-flex:1;\n\t\t\n\t\t元素具体位置设置\n\t\t\n\t\t\t/* 数值越小越靠前，可以接受0或者负值 */\n\t\t\t/*order:5;*/\n\t\t\t\n\t\t\t/* 数值越小越靠前， 最小值默认处理为1*/\n\t\t\t/*-webkit-box-ordinal-group:-2;*/\n\n### 移动端事件\n\n\t\t手指按下：\n\t\t\tontouchstart\n\t\t\t\n\t\t手指移动：\n\t\t\tontouchmove\n\t\t\t\n\t\t手指抬起：\n\t\t\tontouchend\n\t\t\t\n\t\t注意：\n\t\t\t在移动端开发的时候，浏览器的模拟器时好时坏，\n\t\t\t一般不用on的方式绑定事件函数，要用事件绑定的方式(addEventListener)\n\t\t\n\t\t移动端click屏幕产生200-300ms的延迟响应\n\t\t\n\t\t\t移动设备上的web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。\n\t\t\n\t\t以下是历史原因：\n\t\t\n\t\t\t2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，\n\t\t\t使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，\n\t\t\t你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，\n\t\t\t你就能看清该部分放大后的内容，再次双击后能回到原始状态。\n\t\t\t\n\t\t\t双击缩放是指用手指在屏幕上快速点击两次，iOS自带的 Safari浏览器会将网页缩放至原始比例。\n\t\t\t\n\t\t\t原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接<a href=\"#\"></a>，\n\t\t\t此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，\n\t\t\t所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，\n\t\t\t则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，\n\t\t\t转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。\n\t\t\t这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，\n\t\t\t对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。\n\n### 触摸事件的响应顺序\n\n\t\t1、ontouchstart \n\t\t2、ontouchmove \n\t\t3、ontouchend \n\t\t4、onclick\n\t\t\n\t\t解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应\n\n### 移动端的点透\n\n\t\t当上层元素发生点击的时候，下层元素也有点击（焦点）特性，\n\t\t在300ms之后，如果上层元素消失或者隐藏，目标点就会“漂移”到下层元素身上，就会触发点击行为。\n\t\t\t\n\t\t解决：\n\t\t\n\t\t\t1.下层不要使用有点击（焦点）特性的元素\n\t\t\t\n\t\t\t2.阻止pc事件\n\n### 移动端阻止PC事件优点\n\n\t\tdocument.addEventListener('touchstart',function(ev){\n\t\t\tev.preventDefault();\n\t\t});\n\t\t\n\t\t\n\t\t1.IOS10下设置meta禁止用户缩放是不可行的。（使用阻止pc事件就可以在IOS10下禁止用户缩放）\n\t\t\t\n\t\t2.解决IOS10下溢出隐藏的问题。\n\t\t\n\t\t3.禁止系统默认的滚动条、阻止橡皮筋效果\n\t\t\n\t\t4.禁止长按选中文字、选中图片、系统默认菜单\n\t\t\n\t\t5.解决点透问题\n\t\t\n\t\t6.也阻止了焦点元素的焦点行为(要正常使用：ev.stopPropagation()阻止冒泡)\n\n### 移动端事件对象\n\n\t\t当给某个元素加上了事件绑定函数之后，事件函数默认的第一个参数就是事件对象\n\t\t\n\t\t事件对象：\n\t\t\t当用户在浏览器下触发了某个行为，事件对象会记录用户操作时一些细节信息。\n\t\t\n\t\ttouches 当前位于*屏幕*上的所有手指的一个列表\n\t\t\n\t\ttargetTouches 位于当前DOM元素上的手指的一个列表\n\t\t\n\t\tchangedTouches  涉及当前事件的手指的一个列表\n\t\t\n\t\tdiv.addEventListener('touchmove',start);\n\t\tfunction start(ev){\n\t\t\t//this.innerHTML = ev.touches.length;\n\t\t\t//this.innerHTML = ev.targetTouches.length;\n\t\t\tthis.innerHTML = ev.changedTouches.length;\n\t\t}\n\n### 移动端input无法获取焦点的问题\n\n在移动端开发中，我们有时有针对性的写一些特殊的重置，比如：\n\n\t\t* {\n\t\t\t-webkit-touch-callout: none;\n\t\t\t//阻止长按图片之后呼出菜单提示复制的行为\n\t\t\t\n\t\t\t-webkit-text-size-adjust: none;\n\t\t\t//禁用Webkit内核浏览器的文字大小调整功能\n\t\t\t\n\t\t\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\t\t\t//避免点击a标签或者注册了click事件的元素时产生高亮\n\t\t\t\n\t\t\t-webkit-user-select: none;\n\t\t\t//禁止用户进行复制、选择\n\t\t}\n\t\t\n\t\t其中，-webkit-user-select: none;会产生一些问题，这是webkit内核浏览器下的一个bug\n\t\t阻止了用户的选择内容行为，会导致一些“内容可编辑”标签无法正常使用，比如input、textarea\n\t\t\n\t\t如果网站不需要阻止用户的选择内容的行为就可以使用如下样式：\n\t\t\n\t\t\t* {\n\t\t\t\t-webkit-user-select: text;\n\t\t\t\t-user-select: text;\n\t\t\t}\n\t\t\t\n\t\t\t另一种方式：\n\t\t\t*: not(input, textarea) {\n\t\t\t\t-webkit-touch-callout: none;\n\t\t\t\t-webkit-user-select: none;\n\t\t\t}\n\t\t\t\n\t\tuser-select可能会导致与contenteditable = \"true\"元素的问题，以便更好的使用，所以下面的CSS也要加上\n\t\t\n\t\t\tHTML5全局 contenteditable属性\n\t\t\t\tcontenteditable 属性规定是否可编辑元素的内容\n\t\t\n\t\t\t[contenteditable=\"true\"] , input, textarea {\n\t\t\t\t-webkit-user-select: auto !important;\n\t\t\t\t-khtml-user-select: auto !important;\n\t\t\t\t-moz-user-select: auto !important;\n\t\t\t\t-ms-user-select: auto !important;\n\t\t\t\t-o-user-select: auto !important;\n\t\t\t\tuser-select: auto !important;\n\t\t\t}\n\n### 表单输入框placeholder的颜色值\n\n\t\tinput::-webkit-input-placeholder{color:#ccc;}\n\t\tinput:focus::-webkit-input-placeholder{color:#ddd;}\n\n### 模拟按钮hover效果\n\n\t\t直接在body上添加ontouchstart，同样可激活移动端css的active效果\n\t\t移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，\n\t\t使用css的hover并不能满足我们的需求，还好国外有个激活移动端css的active效果\n\n> 第一种\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t<meta content=\"email=no\" name=\"format-detection\">\n\t<style type=\"text/css\">\n\t\ta{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n\t\t.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n\t\t.btn-blue:active{background-color: #357AE8;}\n\t</style>\n\t</head>\n\t<body ontouchstart>\n\t\t<div class=\"btn-blue\">按钮</div>\n\t</body>\n\t</html>\n```\n\n> 第二种\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t<meta content=\"email=no\" name=\"format-detection\">\n\t<style type=\"text/css\">\n\t\ta{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n\t\t.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n\t\t.btn-blue:active{background-color: #357AE8;}\n\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"btn-blue\">按钮</div>\n\t<script type=\"text/javascript\">\n\tdocument.addEventListener(\"touchstart\", function(){}, true)\n\t</script>\n\t</body>\n\t</html>\n```\n\n> 兼容性ios5+、部分android 4+、winphone 8\n\n> 第三种\n\n> 要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t<meta content=\"email=no\" name=\"format-detection\">\n\t<style type=\"text/css\">\n\t\ta{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n\t\t.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n\t\t.btn-blue-on{background-color: #357AE8;}\n\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"btn-blue\">按钮</div>\n\t<script type=\"text/javascript\">\n\tvar btnBlue = document.querySelector(\".btn-blue\");\n\tbtnBlue.ontouchstart = function(){\n\t\tthis.className = \"btn-blue btn-blue-on\"\n\t}\n\tbtnBlue.ontouchend = function(){\n\t\tthis.className = \"btn-blue\"\n\t}\n\t</script>\n\t</body>\n\t</html>\n```\n\n### 禁止ios长按时不触发系统的菜单，禁止ios&android长按时下载图片\n\n\t\t.css{-webkit-touch-callout: none}\n\n### 禁止ios和android用户选中文字\n\n\t\t.css{-webkit-user-select:none}\n\n### 打电话发短信写邮件\n\n\t\t打电话\n\t\t<a href=\"tel:10086\">打电话给:10086</a>\n\t\t\n\t\t发短信\n\t\t<a href=\"sms:10086\">发短信给:10086</a>\n\t\t\n\t\t写邮件\n\t\t<a href=\"mailto:zyh@qq.com\">zyh@qq.com</a>\n\n### 实现0.5px的线条\n\n\t\t网络上有很多方法，如设置viewport，box-shawdow，border-image，background-image，transform:scale等，\n\t\t本文只介绍一种觉得比较好用的方法，一来兼容性好，二来不依赖图片。\n\t\t\n\t\ttransform:scale(x,y)\n\t\t\n\t\t通过css支持定义border或者height为.5px大的线条，在android设备中的无法显示出来，这里有个小技巧，\n\t\t设置线条为1px，然后通过transform:scale(x,y)来缩放线条为原来的一半，可显示0.5px的线条。\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta content=\"width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t\t<meta content=\"email=no\" name=\"format-detection\">\n\t\t<title>点5测试 - scale</title>\n\t\t<style type=\"text/css\">\n\t\t.line {\n\t\t    height: 50px;\n\t\t    line-height: 50px;\n\t\t    background-color: #CCC;\n\t\t    border-bottom:1px solid red\n\t\t} \n\t\t.scale {\n\t\t    position: relative;\n\t\t    height: 50px;\n\t\t    line-height: 50px;\n\t\t    background-color: #CCC\n\t\t}\n\t\t.scale:after {\n\t\t    position: absolute;\n\t\t    content: '';\n\t\t    width: 100%;\n\t\t    left: 0;\n\t\t    bottom: 0;\n\t\t    height: 1px;\n\t\t    background-color: red;\n\t\t    -webkit-transform: scale(1,.5);\n\t\t    transform: scale(1,.5);\n\t\t    -webkit-transform-origin: center bottom;\n\t\t    transform-origin: center bottom\n\t\t}\n\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t\t<div class=\"line\">1px</div>\n\t\t\t<br/><br/>    \n\t\t\t<div class=\"scale\">0.5px</div>\n\t\t</body>\n\t</html>\n```\n\n### 实现0.5px的圆角边框\n\n\t\t原理：先定义1px的圆角边框，然后拉伸内容的宽度和高度为父级的2倍(边框厚度不变)，\n\t\t然后再使用transform:scale(0.5)缩放为原来的0.5倍\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta content=\"width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t\t<meta content=\"email=no\" name=\"format-detection\">\n\t\t<title>点5测试 - border-radius</title>\n\t\t<style type=\"text/css\">\n\t\tbody{padding: 50px;-webkit-touch-callout:none;}\n\t\t[class*=\"btn\"]{margin: 0 auto;}\n\t\t.btn-1 {\n\t\t    width: 200px;\n\t\t    height: 42px;\n\t\t    -webkit-border-radius: 5px;\n\t\t    border-radius: 5px;\n\t\t    text-align: center;\n\t\t    line-height: 42px;\n\t\t    background-color: #EDEDED;\n\t\t    border: 1px solid red;\n\t\t}\n\t\t.btn {\n\t\t    position: relative;\n\t\t    width: 200px;\n\t\t    height: 42px;\n\t\t    -webkit-border-radius: 5px;\n\t\t    border-radius: 5px;\n\t\t    text-align: center;\n\t\t    line-height: 42px;\n\t\t    background-color: #EDEDED;\n\t\t}\n\t\t.btn:before {\n\t\t    content: '';\n\t\t    position: absolute;\n\t\t    top: -50%;\n\t\t    bottom: -50%;\n\t\t    left: -50%;\n\t\t    right: -50%;\n\t\t    -webkit-transform: scale(0.5);\n\t\t    transform: scale(0.5);\n\t\t    border-style: solid;\n\t\t    border-width: 1px;\n\t\t    border-color: red;\n\t\t    -webkit-border-radius: 10px;\n\t\t    border-radius: 10px;\n\t\t}\n\t\t</style>\n\t\t</script>\n\t\t</head>\n\t\t<body>\n\t\t\t<div class=\"btn-1\">1px border</div>\n\t\t\t<br/><br/>\n\t\t\t<div class=\"btn\">.5px border</div>\n\t\t</body>\n\t</html>\n```\n\n### CSS实现隐藏滚动条同时又可以滚动\n\n\t\t移动端页面为了更接近原生的体验，是否可以隐藏滚动条，同时又保证页面可以滚动？\n\t\t\n\t\t使用 overflow:hidden 隐藏滚动条，但存在的问题是：页面或元素失去了滚动的特性。\n\t\t由于只需要兼容移动浏览器（Chrome 和 Safari），于是想到了自定义滚动条的伪对象选择器\n\t\t::-webkit-scrollbar。\n\t\t\n\t\t应用如下 CSS 可以隐藏滚动条：\n\t\t\t//.element就是指出现滚动条的元素\n\t\t\t.element::-webkit-scrollbar {display:none}\n\t\t\n\t\t如果要兼容PC其他浏览器（IE、Firefox等），国外一位才人John Kurlak也研究出了一种办法。\n\t\t在容器外面再嵌套一层 overflow:hidden内部内容再限制尺寸和外部嵌套层一样，就变相隐藏了。\n\t\t\n\t\t<div class=\"outer-container\">\n\t\t    <div class=\"inner-container\">\n\t\t        <div class=\"content\">\n\t\t        \t......\n\t\t        </div>\n\t\t    </div>\n\t\t</div>\n\t\t.outer-container,.content {\n\t\t    width: 200px; height: 200px;\n\t\t}\n\t\t.outer-container {\n\t\t    position: relative;\n\t\t    overflow: hidden;\n\t\t}\n\t\t.inner-container {\n\t\t    position: absolute; \n\t\t    left: 0;\n\t\t    overflow-x: hidden;\n\t\t    overflow-y: scroll;\n\t\t}\n\t\t \n\t\t /* for Chrome */\n\t\t.inner-container::-webkit-scrollbar {\n\t\t    display: none;\n\t\t}\n\n### Rem布局原理\n\n\t\t其实rem布局的本质是等比缩放，一般是基于宽度\n\t\t\n\t\t假设我们将屏幕宽度平均分成100份，每一份的宽度用x表示，x = 屏幕宽度 / 100，\n\t\t如果将x作为单位，x前面的数值就代表屏幕宽度的百分比\n\t\t\n\t\tp {width: 50x} /* 屏幕宽度的50% */\n\t\t\n\t\t如果想要页面元素随着屏幕宽度等比变化，我们需要上面的x单位，不幸的是css中并没有这样的单位，\n\t\t幸运的是在css中有rem，通过rem这个桥梁，可以实现神奇的x\n\t\t\n\t\t通过上面对rem的介绍，可以发现，如果子元素设置rem单位的属性，\n\t\t通过更改html元素的字体大小，就可以让子元素实际大小发生变化\n\t\t\n\t\thtml {font-size: 16px}\n\t\tp {width: 2rem} /* 32px*/\n\t\t\n\t\thtml {font-size: 32px}\n\t\tp {width: 2rem} /*64px*/\n\t\t\n\t\t如果让html元素字体的大小，等于屏幕宽度的1/100，那1rem和1x就等价了\n\t\t\n\t\thtml {fons-size: width / 100}\n\t\tp {width: 50rem} /* 50rem = 50x = 屏幕宽度的50% */\n\t\t\n\t\t如何让html字体大小一直等于屏幕宽度的百分之一呢？ 可以通过js来设置，一般需要在页面dom ready、resize和屏幕旋转中设置\n\t\t\n\t\tdocument.documentElement.style.fontSize = document.documentElement.clientWidth / 100 + 'px';\n\t\t\n\t\t那么如何把UE图中的获取的像素单位的值，转换为已rem为单位的值呢？公式是元素宽度 / UE图宽度 * 100\n\t\t\n\t\t假设UE图尺寸是640px，UE图中的一个元素宽度是100px，根据公式100/640*100 = 15.625\n\t\t\n\t\tp {width: 15.625rem}\n\n### 比Rem更好的方案\n\n\t\t上面提到想让页面元素随着页面宽度变化，需要一个新的单位x，x等于屏幕宽度的百分之一，css3带来了rem的同时，也带来了vw和vh\n\t\t\n\t\t\tvw —— 视口宽度的 1/100\n\t\t\tvh —— 视口高度的 1/100\n\t\t\t\n\t\t聪明的你也许一经发现，这不就是单位x吗，没错根据定义可以发现1vw=1x，有了vw我们完全可以绕过rem这个中介了，\n\t\t下面两种方案是等价的，可以看到vw比rem更简单\n\t\t\n\t\t\t/* rem方案 */\n\t\t\thtml {fons-size: width / 100}\n\t\t\tp {width: 15.625rem}\n\t\t\t\n\t\t\t/* vw方案 */\n\t\t\tp {width: 15.625vw}\n\t\t\tvw还可以和rem方案结合，这样计算html字体大小就不需要用js了\n\t\t\t\n\t\t\thtml {fons-size: 1vw} /* 1vw = width / 100 */\n\t\t\tp {width: 15.625rem}\n\t\t\t虽然vw各种优点，但是vw也有缺点，首先vw的兼容性不如rem好，使用之前要看下\n\t\t\n\t\t兼容性\tIOS\t安卓\n\t\trem\t4.1+\t2.1+\n\t\tvw\t6.1+\t4.4+\n\t\t另外，在使用弹性布局时，一般会限制最大宽度，比如在pc端查看我们的页面，此时vw就无法力不从心了，\n\t\t因为除了width有max-width，其他单位都没有，而rem可以通过控制html根元素的font-size最大值，而轻松解决这个问题\n\n### H5禁止手机虚拟键盘弹出\n\n\t\t在移动端，input会默认触发手机的虚拟键盘，如何阻止手机虚拟键盘弹起呢？\n\t\t目前我试过有两个方案，一个是给input添加readonly属性，\n\t\t另一个就是在input事件处理方法前面添加一句document.activeElement.blur()\n\t\t\n\t\treadonly\n\t\t\n\t\t\t使用readonly方式来阻止虚拟键盘弹出应该是最简单最优雅的方式了。\n\t\t\treadonly属性规定输入字段为只读。只读字段是不能修改的。\n\t\t\t不过，用户仍然可以使用 tab键切换到该字段，还可以选中或拷贝其文本。\n\t\t\t\n\t\t\t值得一提的是它的取值，只要声明了readonly属性，不管取什么值都可以，\n\t\t\t比如readonly=\"\"、readonly=\"readonly\"、readonly=\"abc\"都是一样的\n\t\t\t\n\t\t\t优点：简单\n\t\t\t缺点：在iOS的Safari中无效（未做更多情况测试）\n\t\t\n\t\tdocument.activeElement.blur()\n\t\t\n\t\t\t这是个什么玩意儿？document.activeElement是一个Web API接口。\n\t\t\tMDN上的解释是：它返回当前页面中获得焦点的元素，也就是说，如果此时用户按下了键盘上某个键，\n\t\t\t会在该元素上触发键盘事件，该属性是只读的。\n\t\t\n\t\t\tdocument.activeElement属性始终会引用DOM中当前获得了焦点的元素。\n\t\t\t元素获得焦点的方式有用户输入(通常是按Tab键)、在代码中调用focus()方法和页面加载。\n\t\t\t\n\t\t\t它里面有很多方法，在浏览器控制台查看，可以看到有很多方法\n\t\t\t\n\t\t\tMDN上还展示了一个有意思的示例，看这里 http://jsfiddle.net/w9gFj/\n\t\t\t\n\t\t\t那么document.activeElement.blur()为什么可以阻止虚拟键盘弹出呢？\n\t\t\t原因是：当你点击input的时候，document.activeElement获得了DOM中被聚焦的元素，\n\t\t\t也就是你点击的input，而调用.blur()方法，blur我相信大家都知道吧，就是取消聚焦。\n\t\t\t获得被聚焦的元素然后强制blur以达到没有聚焦的样子\n\t\t\t\n\t\t\t优点：支持Android、iOS\n\t\t\t缺点：需要添加额外的JS代码\n\t\t\n\t\t\t这句代码加在什么地方？加入有如下HTML\n\t\t\t\n\t\t\t\t<div class=\"calendar\">\n\t\t\t\t    <div>\n\t\t\t\t        <input type=\"text\" id=\"datePicker\" placeholder=\"点击选择日期\"/>\n\t\t\t\t    </div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t那么这句JS加在事件处理方法中\n\t\t\n\t\t\t\t$(\"#datePicker\").focus(function(){\n\t\t\t\t    document.activeElement.blur();\n\t\t\t\t});\n\t\t\t\t\n\t\t就现在来说，用document.activeElement.blur()确实是在绕弯子，直接使用readonly是最佳方案。\n\t\t但是document.activeElement很强大，可以做很多事。\n\n### 只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\n\n\t\t只是头部绝对定位，内容区不使用绝对定位来解决\n\t\t\n\t\t\tbody{\n\t\t\t\theight:100%;\n\t\t\t\toverflow:hidden;\n\t\t\t}\n\t\t\theader{\n\t\t\t\tposition:absolute;\n\t\t\t\ttop:0;\n\t\t\t\tleft:0;\n\t\t\t\tright:0;\n\t\t\t\theight:80px;\n\t\t\t}\n\t\t\tcontent{\n\t\t\t\tpadding:80px 0 20px;\n\t\t\t\theight:100%;\n\t\t\t\toverflow-x:hidden;\n\t\t\t\toverflow-y:scroll;\n\t\t\t\tbox-sizing:border-box;\n\t\t\t}\n\t\t\t\n\t\t分析：\n\t\t\t\n\t\t\tbody设置固定显示区域（类似划个固定的区域框选子元素），header可以用绝对定位，内容区高度是不确定的，\n\t\t\t所以用上padding来设置内容的显示区域（左右下padding可适当添加），但是给内容加上height:100%的同时，\n\t\t\t一定要加上box-sizing:border-box，要不然内容区的高度就不是100%了\n\n### 多行文本溢出\n\n\t\t单行文本溢出，对title类的使用非常多，而多行文本类，在详情介绍则用的比较多。\n\t\t\n\t\t/*单行文本溢出*/\n\t\t.inaline{\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t\n\t\t/*多行文本溢出*/\n\t\t.intwoline{\n\t\t\tdisplay: -webkit-box !important;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tword-break: break-all;\n\t\t\t-webkit-box-orient:vertical;\n\t\t\t-webkit-line-clamp:4;\n\t\t}\n\t\t属性-webkit-line-clamp就可以控制几行溢出，4就是第四行进行截断加...\n\n### 移动端遇上表单元素底部被顶起\n\n\t\t@media (max-height:400px){\n\t\t\telement{\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t\t\n\t\t分辨率高度小于等于设置值的时候识别\n\t\t\n\t\t一般设置为400px，但也不排除有些键盘高低不一致的情况，可根据情况适当修改\n\n### 当input遇见了全屏背景\n\n\t\t在移动端开发过程中，有极少数使用全屏背景的情况。当input遇见了全屏背景，一切便不再美好。\n\t\t\n\t\t解决办法：\n\t\t\n\t\t\tlet viewH = document.documentElement.clientHeight;\n\t\t\tdocument.getElementsByTagName('html')[0].style.cssText += `height:${viewH}px`;\n\t\t\tdocument.body.style.cssText += `height:${viewH}px`;\n\n> 补充可视区宽高小知识\n\n\t\t可视区宽度\n\t\t\n\t\t\tdocument.body.clientWidth\n\t\t\tdocument.documentElement.clientWidth\n\t\t\n\t\t可视区高度\n\t\t\n\t\t\tdocument.documentElement.clientHeight\n\t\t\n\t\t仔细一看可视区高度怎么和可视区宽度少了一个呢？\n\t\t\n\t\t其实不难理解，body本身块元素，宽度自然撑满可视区宽度\n\t\t\n\t\t而高度并非如此，body自身的高度则根据子元素的高度来撑\n\t\t\n\t\t所以document.body.clientHeight指的就是body自身的宽度\n\n### 移动网页调试神器vConsole以及Eruda使用技巧\n\n\t\t做移动端Web开发的一大痛点就是，在真机运行下无法查看console.log日志和其他信息如网络请求、显示本地存储等信息\n\t\t\n\t\t如果网页是运行在手机浏览器中还算好，可以把网址在电脑上打开查看console信息\n\t\t\n\t\t但是如果是做APP的内嵌H5页面，那就只能靠开发阶段在浏览器模拟环境中尽量没有Bug\n\t\t\n\t\t但是，一旦H5上线后报错那就比较麻烦了，而且还依赖APP环境才能跑的网页，更加难以查找问题\n\t\t\n\t\t如果让移动端也拥有类似Chrome DevTools工具那岂不是很愉快么？\n\t\t\n\t\tvConsole便是这样一款很棒的移动端DevTools工具，由大厂企鹅出品。\n\n[vConsole github地址](https://github.com/Tencent/vConsole)\n\n> Eruda\n\n\t\tEruda是谁？\n\t\t\n\t\tEruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版\n\t\t\n\t\t其主要功能包括：\n\t\t\n\t\t捕获 console 日志、检查元素状态、显示性能指标、捕获XHR请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。\n\n[集颜值技能于一身的Erdua](https://github.com/liriliri/eruda)\n\n[使用技巧](https://github.com/liriliri/eruda/blob/master/doc/README_CN.md)\n\n> Erdua的基本使用方法推荐使用CDN和可配置参数的形式，在页面引入如下代码：\n\n```javascript\n\t;(function () {\n\t    var src = '//cdn.bootcss.com/eruda/1.2.4/eruda.min.js';\n\t    if (!/eruda=true/.test(window.location) && localStorage.getItem('active-eruda') !== 'true') return;\n\t    document.write('<scr' + 'ipt src=\"' + src + '\"></scr' + 'ipt>');\n\t    document.write('<scr' + 'ipt>eruda.init();</scr' + 'ipt>');\n\t})();\n\teruda.init();//里面可以传入要初始化哪些面板，默认加载所有\n```\n\n\t\t这样使用方式没有错，但是如果Eruda要跟着发布到线上的话，那我们要删除这段代码？\n\t\t\n\t\t因为这样会不管你需不需要调试Eruda都会立即加载，在页面出现Eruda的图标\n\t\t\n\t\t我的目标是，Eruda可以保留在页面里，无论什么环境，只要我们想呼唤它出现的时候它才出现\n\t\t\n\t\t不需要它的时候它只是一段不会生效的普通代码\n\n\n> 办法\n\n\t\t首先把上述引入代码的src放到if里，同时把localStorage改为sessionStorage\n\t\t\n\t\tactive-eruda参数也可以改个更短的名字，改后的代码如下：\n\n```javascript\n\t;(function () {\n\t    if (!/eruda=true/.test(window.location) || sessionStorage.getItem('eruda') !== 'true') return;\n\t    var src = '//cdn.bootcss.com/eruda/1.4.3/eruda.min.js';\n\t    document.write('<scr' + 'ipt src=\"' + src + '\"></scr' + 'ipt>');\n\t    document.write('<scr' + 'ipt>eruda.init();</scr' + 'ipt>');\n\t})();\n```\n\n\t\t这段代码的意思是如果URL中有参数eruda=true或者sessionStorage中eruda的值为true才加载Eruda\n\t\t\n\t\t这样的好处是，我们需要调试的时候可以在网页URL后面加个参数即可，不需要调试的它不会加载\n\t\t\n\t\t然而，这在开发阶段可以这样做比较好，但是在线上环境可能要加URL参数比较麻烦\n\t\t\n\t\t于是我想到了在页面中点击某个元素10次再加载Eruda，点击10次或者更多次，然后在sessionStorage中写入eruda=true\n\t\t\n\t\t然后刷新当前页。相反，再点击10次关闭Eruda。用这样比较隐藏的方式开启或关闭Eruda\n\t\t\n\t\t这样线上环境也可以自由开启或关闭Eruda了\n\n> 例子：假如有这样的一个页面，里有一个标题文字\n\n\t\t<h2>——规则详情——</h2>\n\t\t<div>\n\t\t.....\n\t\t</div>\n\t\t那么我们可以在h2标签上绑定一个click事件，加入方法名叫showEruda\n\n```javascript\n\t<h2 onclick=\"showEruda\">——规则详情——</h2>\n\t<div>\n\t.....\n\t</div>\n\t<script>\n\tvar count = 0;\n\tfunction showEruda () {\n\t    if (count >= 10) {    \n\t        var eruda = sessionStorage.getItem('eruda');\n\t        if (!eruda || eruda === 'false'){\n\t            sessionStorage.setItem('eruda', 'true')\n\t        } else {\n\t            sessionStorage.setItem('eruda', 'false')\n\t        }\n\t        location.reload()\n\t    }\n\t    count++\n\t}\n\t</script>\n```\n\n[原文链接地址，请戳我](https://blog.dunizb.com/2017/10/16/erdua/)\n\n### -webkit-overflow-scrolling: touch\n\n\t\t在ios设备中，利用 overflow 来模拟滚动会出现卡顿的情况\n\t\t\n\t\t可以通过设置 -webkit-overflow-scrolling: touch; 来解决\n\t\t\n\t\t原因是设置后ios会为其创建一个 UIScrollView ，利用硬件来加速渲染\n\n### 1. 监听屏幕旋转变化接口: orientationchange\n\n**定义：**\n\n这个 `API` 可以检测手机是否横屏的情况。\n\n**使用：**\n\n```javascript\n  //检测屏幕旋转角度\n  screenOrientation() {\n    let orientation = screen.orientation || screen.mozOrientation || screen.msOrientation;\n    window.addEventListener(\"onorientationchange\" in window ? \"orientationchange\" : \"resize\", _ => {\n      this.angle = orientation.angle;\n    });\n  },\n```\n\n| orientation.angle 值 | 屏幕方向 |\n| --- | --- |\n| 0 | 竖屏 |\n| 90 | 向左横屏 |\n| -90/270 | 向右横屏 |\n| 180 | 倒屏 |\n\n> 通过这个 `API` 我们在横屏和竖屏的时候可以添加一些动作或者是样式的改变。\n\n如果只是样式的改变也可以通过媒体查询来监听：\n\n```css\n  /* 竖屏 */\n  @media screen and (orientation: portrait) {\n    // css code\n  }\n      \n  /* 横屏 */\n  @media screen and (orientation: landscape) {\n    // css code\n  }\n```\n### 2. 电池状态：navigator.getBattery()\n\n**定义：**\n\n这个 `API` 可以检测手机电池状态的情况。\n\n> 这个 `api` 返回的是一个 `promise` 对象，会给出一个 `BatteryManager` 对象，对象中包含了以下信息：\n\n| key | 描述 | 备注 |\n| --- | --- | --- |\n| charging | 是否在充电 | 可读属性 |\n| chargingTime | 若在充电，还需充电时间 | 可读属性 |\n| dischargingTime | 剩余电量 | 可读属性 |\n| level | 剩余电量百分数 | 可读属性 |\n| onchargingchange | 监听充电状态的改变 | 可监听事件 |\n| onchargingtimechange | 监听充电时间的改变 | 可监听事件 |\n| ondischargingtimechange | 监听电池可用时间的改变 | 可监听事件 |\n| onlevelchange | 监听剩余电量百分数的改变 | 可监听事件 |\n\n**使用：**\n\n```javascript\n  //检测是否充电以及电量\n  getBatteryInfo() {\n    if (navigator.getBattery) {\n      navigator.getBattery().then(battery => {\n        // 判断是否在充电\n        this.batteryInfo = battery.charging ? `在充电 : 剩余 ${battery.level * 100}%` : `没充电 : 剩余 ${battery.level * 100}%`;\n        // 电池充电状态改变事件\n        battery.addEventListener('chargingchange', _ => {\n          this.batteryInfo = battery.charging ? `在充电 : 剩余 ${battery.level * 100}%` : `没充电 : 剩余 ${battery.level * 100}%`;\n        });\n      });\n    } else {\n      this.batteryInfo = '不支持电池状态接口';\n    }\n  },\n```\n### 3. 让你的手机震动: window.navigator.vibrate(200)\n\n**定义：**\n\n这个 `API` 可以让你的手机按你的想法震动。\n\n**使用：**\n\n```javascript\n  //触发手机振动\n  vibrateFun()  {\n    if (navigator.vibrate) {\n      navigator.vibrate([500, 500, 500]);\n    } else {\n      this.vibrateInfo = \"您的设备不支持震动\";\n    }\n  },\n```\n### 4. 联网状态：navigator.onLine\n\n**定义：**\n\n这个 `API` 可以告诉你设备的网络状态是否连接。\n\n**使用：**\n\n```javascript\n  mounted() {\n    window.addEventListener('online', this.updateOnlineStatus, true);\n    window.addEventListener('offline', this.updateOnlineStatus, true);\n  },\n  methods: {\n    //检测网络信号\n    updateOnlineStatus() {\n      this.onLineInfo = navigator.onLine ? \"online\" : \"offline\";\n    },\n  },\n```\n> 注意：`navigator.onLine` 只会在设备未连接到局域网或路由器时返回 `false`，其他情况下均返回 `true`。也就是说，设备连接上路由器后，即使这个路由器没联通网络， `navigator.onLine`仍然返回 `true`。\n### 5. 浏览器活跃窗口监听: window.onblur & window.onfocus\n\n**定义：**\n\n这两个 `API` 分别表示窗口失去焦点和窗口处于活跃状态。\n\n> 浏览其他窗口、浏览器最小化、点击其他程序等，`window.onblur` 事件就会触发;  回到该窗口，`window.onfocus` 事件就会触发。\n\n**使用：**\n\n```javascript\n  mounted() {\n    window.addEventListener('blur', this.doFlashTitle, true);\n    window.addEventListener('focus', _ => {\n      clearInterval(this.timer);\n      document.title = '微信网页版';\n    }, true);\n  },\n  methods: {\n    //浏览器活跃窗口监听\n    doFlashTitle()  {\n      this.timer  =  setInterval(_ =>  {\n        if (!this.flashFlag)  {\n          document.title = \"微信网页版\";\n        } else {\n          document.title = `微信（${this.infoNum}）`;\n        }\n        this.flashFlag = !this.flashFlag\n      },  500)\n    },\n  },\n```\n### 6. 全屏 API（Fullscreen API）\n\n**定义：**\n\n这个 `API` 可以使你所打开的页面全屏展示。\n\n**使用：**\n\n> Element.requestFullscreen() 方法用于发出异步请求使元素进入全屏模式。\n\n调用此 `API` 并不能保证元素一定能够进入全屏模式。如果元素被允许进入全屏幕模式，document 对象会收到一个 `fullscreenchange` 事件，通知调用者当前元素已经进入全屏模式。如果全屏请求不被许可，则会收到一个 `fullscreenerror` 事件。\n当进入/退出全屏模式时,会触发 `fullscreenchange` 事件。你可以在监听这个事件，做你想做的事。\n\n```javascript\n  //打开、关闭全屏 \n  fullScreenFun()  {\n    let fullscreenEnabled = document.fullscreenEnabled ||\n    document.mozFullScreenEnabled ||\n    document.webkitFullscreenEnabled ||\n    document.msFullscreenEnabled;\n    if (fullscreenEnabled) {\n      let de = document.documentElement;\n      if (this.fullScreenInfo === '打开全屏') {\n        if (de.requestFullscreen) {\n          de.requestFullscreen();\n        } else if (de.mozRequestFullScreen) {\n          de.mozRequestFullScreen();\n        } else if (de.webkitRequestFullScreen) {\n          de.webkitRequestFullScreen();\n        }\n        this.fullScreenInfo = '退出全屏'\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        }\n        this.fullScreenInfo = '打开全屏'\n      }\n    } else {\n      this.fullScreenInfo = '浏览器当前不能全屏';\n    }\n  },\n```\n\n### 1. 媒体查询\n\n`CSS3`媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n#### 何选择屏幕大小分割点\n\n如何确定媒体查询的分割点也是一个开发中会遇到的问题，下面是市场上的移动设备和电脑屏幕分辨率的分布情况，可以发现不同品牌和型号的设备屏幕分辨率一般都不一样。\n[The Ultimate Guide To iPhone Resolutions，可点击](https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions)\n\n[全球屏幕分辨率统计2018年4月 - 2019年4月，可点击](http://gs.statcounter.com/screen-resolution-stats#monthly-201804-201904-bar)\n\n如果我们选择`600px`,`900px`,`1200px`,`1800px`作为分割点，可以适配到常见的14个机型。\n当然这只是其中的一种分割方案，不一定满足项目中的实际需求，我们可以先用跨度大的分割点进行分割，如果出现不适配的情况可以再根据实际情况增加新的分割点。\n\n#### 移动优先 OR PC优先\n\n不管是移动优先还是PC优先，都是依据当随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式。因此，移动端优先首先使用的是`min-width`，PC端优先使用的`max-width`。\n\n### 2.百分比布局\n\n通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果。Bootstrap里面的栅格系统就是利用百分比来定义元素的宽高，`CSS3`支持最大最小高，可以将百分比和`max(min)`一起结合使用来定义元素在不同设备下的宽高。\n\n但是我们必须要弄清楚css中子元素的百分比到底是相对谁的百分比。直接上结论吧：\n\n子元素的`height`或`width`中使用百分比，是相对于子元素的直接父元素，`width`相对于父元素的`width`，`height`相对于父元素的`height`；子元素的`top`和`bottom`如果设置百分比，则相对于直接非`static`定位(默认定位)的父元素的高度，同样子元素的`left`和`right`如果设置百分比，则相对于直接非`static`定位(默认定位的)父元素的宽度；子元素的`padding`如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的`width`，而与父元素的`height`无关。跟`padding`一样，`margin`也是如此，子元素的`margin`如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的`width`；`border-radius`不一样，如果设置`border-radius`为百分比，则是相对于自身的宽度，除了`border-radius`外，还有比如`translate`、`background-size`等都是相对于自身的；\n\n### 3.rem布局\n\n`REM`是`CSS3`新增的单位，并且移动端的支持度很高，Android2.x+,ios5+都支持。`rem`单位都是相对于根元素html的`font-size`来决定大小的,根元素的`font-size`相当于提供了一个基准，当页面的size发生变化时，只需要改变`font-size`的值，那么以`rem`为固定单位的元素的大小也会发生响应的变化。 因此，如果通过`rem`来实现响应式的布局，只需要根据视图容器的大小，动态的改变`font-size`即可（而`em`是相对于父元素的）\n\n### 4.视口单位\n\n`css3`中引入了一个新的单位`vw/vh`，与视图窗口有关，`vw`表示相对于视图窗口的宽度，`vh`表示相对于视图窗口高度，除了`vw`和`vh`外，还有`vmin`和`vmax`两个相关的单位。各个单位具体的含义如下：\n\n| 单位 | 含义 |\n| --- | --- |\n| vw | 相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw |\n| vh | 相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh |\n| vmin | vw和vh中的较小值 |\n| vmax | vw和vh中的较大值 |\n\n**参考文章：**\n\n[八叉树：前端响应式布局原理与方案](https://juejin.im/post/5caaa230e51d452b672f9703)\n\n[张鑫旭：设备像素比devicePixelRatio简单介绍](https://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/)\n\n[颜海镜：Rem布局的原理解析](https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/)\n\n### 安装postcss插件\n\n#### postcss-import\n\n[`postcss-import`](https://github.com/postcss/postcss-import)相关配置可以[点击这里](https://github.com/postcss/postcss-import)。目前使用的是默认配置。只在`postcss.config.js`文件中引入了该插件。\n\n`postcss-import`主要功有是解决`@import`引入路径问题。使用这个插件，可以让你很轻易的使用本地文件、`node_modules`或者`web_modules`的文件。这个插件配合[`postcss-url`](https://github.com/postcss/postcss-url)让你引入文件变得更轻松。\n\n#### postcss-url\n\n[`postcss-url`](https://github.com/postcss/postcss-url)相关配置可以点击[这里](https://github.com/postcss/postcss-url)。该插件主要用来处理文件，比如图片文件、字体文件等引用路径的处理。\n\n在Vue项目中，[`vue-loader`](https://github.com/vuejs/vue-loader)已具有类似的功能，只需要配置中将`vue-loader`配置进去。\n\n#### autoprefixer\n\n[`autoprefixer`](https://github.com/postcss/autoprefixer)插件是用来自动处理浏览器前缀的一个插件。如果你配置了[`postcss-cssnext`](https://github.com/MoOx/postcss-cssnext)，其中就已具备了`autoprefixer`的功能。在配置的时候，未显示的配置相关参数的话，表示使用的是[Browserslist](https://github.com/ai/browserslist)指定的列表参数，你也可以像这样来指定`last 2 versions` 或者 `> 5%`。\n\n### 其他插件\n- [postcss-aspect-ratio-mini](https://github.com/yisibl/postcss-aspect-ratio-mini)\n- [postcss-px-to-viewport](https://github.com/evrone/postcss-px-to-viewport)\n- [postcss-write-svg](https://github.com/jonathantneal/postcss-write-svg)\n- [postcss-cssnext](https://github.com/MoOx/postcss-cssnext)\n- [cssnano](https://github.com/ben-eb/cssnano)\n- ~~[postcss-viewport-units](https://github.com/springuper/postcss-viewport-units)~~ 2018-11-02：经过一段时间项目的验证，大漠团队已经开始不引用Polyfill\n\n要使用这几个插件，先要进行安装：\n\n```javascript\n//依赖太多，故分开显示\nnpm i postcss-import postcss-url autoprefixer cssnano cssnano-preset-advanced -D\nnpm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext -D\n```\n#### 接下来在`postcss.config.js`文件对新安装的postcss插件进行配置\n\n```javascript\n  module.exports  =  {\n    plugins:  {\n      \"postcss-import\":  {},\n      \"postcss-url\":  {},\n      \"postcss-aspect-ratio-mini\":  {},\n      \"postcss-write-svg\":  {  utf8:  false  },\n      \"postcss-cssnext\":  {},//由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false\n      \"postcss-px-to-viewport\":  {\n        viewportWidth:  750,  // 视窗的宽度，对应的是我们设计稿的宽度，一般是750\n        viewportHeight:  1334,  // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置\n        unitPrecision:  3,  // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）\n        viewportUnit:  'vw',  // 指定需要转换成的视窗单位，建议使用vw\n        selectorBlackList:  ['.ignore',  '.hairlines'],  // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名\n        minPixelValue:  1,  // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值\n        mediaQuery:  false  // 允许在媒体查询中转换`px`\n      },\n      \"cssnano\":  {\n        preset:  \"advanced\",\n        autoprefixer:  false,\n        \"postcss-zindex\":  false\n      },\n      // \"autoprefixer\": { browsers: [\"> 1%\", \"ie > 8\", 'last 5 version'] },\n      //移动端项目开启此插件 将px转为rem\n      // \"postcss-px2rem\":{\n      // remUnit:'75'\n      // }\n    },\n  };\n```\n\n#### postcss-write-svg\n\n\n[`postcss-write-svg`](https://github.com/jonathantneal/postcss-write-svg)插件主要用来处理移动端`1px`的解决方案。该插件主要使用的是`border-image`和`background`来做`1px`的相关处理。比如：\n\n```css\n  @svg 1px-border {\n      height: 2px;\n      @rect {\n          fill: var(--color, black);\n          width: 100%;\n          height: 50%;\n      }\n  }\n  .example {\n      border: 1px solid transparent;\n      border-image: svg(1px-border param(--color #00b1ff)) 2 2 stretch;\n  }\n```\n\n编译出来的CSS:\n\n```css\n  .example {\n      border: 1px solid transparent;\n      border-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='2px'%3E%3Crect fill='%2300b1ff' width='100%25' height='50%25'/%3E%3C/svg%3E\") 2 2 stretch;\n  } \n```\n\n上面演示的是使用`border-image`方式，除此之外还可以使用`background-image`来实现。比如：\n\n```css\n  @svg square {\n      @rect {\n          fill: var(--color, black);\n          width: 100%;\n          height: 100%;\n      }\n  }\n  #example {\n      background: white svg(square param(--color #00b1ff));\n  }\n```\n\n编译出来就是：\n\n```css\n  #example {\n      background: white url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Crect fill='%2300b1ff' width='100%25' height='100%25'/%3E%3C/svg%3E\");\n  } \n\n```\n\n> **特别声明：** 由于有一些低端机对`border-image`支持度不够友好，个人建议你使用`background-image`的这个方案。\n\n### 相关链接\n> 知识付费模式开启，需要购买会员才可观看呦（2019-05-22购买，支付宝订单号：190522163630182750）\n\n[如何在Vue项目中使用vw实现移动端适配](https://www.w3cplus.com/mobile/vw-layout-in-vue.html)\n\n### 阿里红利真的吃完了\n\n![gougu.jpg](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/gougu_1558579159402.jpg)\n\n![ruanyifeng.png](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/ruanyifeng_1558579181115.png)\n\n![xuqiucengci.jpg](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/xuqiucengci_1558579197535.jpg)\n\n> 阿里红利吃完了？还是化身为神探究孔孟庄了？自行体会！\n\n### 圣诞彩蛋事件\n\n![caidan.jpg](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/caidan_1558579502232.jpg)\n\n### 响应式开发中合理选定CSS媒体查询分割点\n\n```css\n\t/**\n\t\t使用sass minxin实现的针对不同屏幕的函数\n\t\t参数:\n\t\tphone-only:手机屏幕\n\t\ttablet-portrait-up:平板竖屏及更大屏幕\n\t\ttablet-portait-only:仅限平板竖屏\n\t\ttablet-landscape-up:平板横屏及更大屏幕\n\t\ttablet-landscape-only 仅限平板横屏\n\t\tdesktop-up:PC及更大屏幕\n\t\tdesktop-only:仅限PC\n\t\tbig-desktop-up 大号PC\n\t**/\n\t@mixin for-size($range) {\n\t\t$phone-upper-boundary: 600px;\n\t\t$tablet-portrait-upper-boundary: 900px;\n\t\t$tablet-landscape-upper-boundary: 1200px;\n\t\t$desktop-upper-boundary: 1800px;\n\n\t\t@if $range == phone-only {\n\t\t\t@media (max-width: $phone-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == tablet-portrait-up {\n\t\t\t@media (min-width: $phone-upper-boundary) { @content; }\n\t\t} @else if $range == tablet-portait-only {\n\t\t\t@media (min-width: $phone-upper-boundary) and (max-width: $tablet-portrait-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == tablet-landscape-up {\n\t\t\t@media (min-width: $tablet-landscape-upper-boundary) { @content; }\n\t\t} @else if $range == tablet-landscape-only {\n\t\t\t@media (min-width: $tablet-portrait-upper-boundary) and (max-width: $tablet-landscape-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == desktop-up {\n\t\t\t@media (min-width: $tablet-landscape-upper-boundary) { @content; }\n\t\t} @else if $range == desktop-only {\n\t\t\t@media (min-width: $tablet-landscape-upper-boundary) and (max-width: $desktop-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == big-desktop-up {\n\t\t\t@media (min-width: $desktop-upper-boundary) { @content; }\n\t\t}\n\t}\n\n\t.test {\n\t\tpadding: 10px;\n\t\t\n\t\t@include for-size(desktop-up) {\n\t\t\tpadding: 20px;\n\t\t}\n\t}\n```\n\n[响应式开发中合理选定CSS媒体查询分割点](https://segmentfault.com/a/1190000007567739)","source":"_posts/debug/h5 日志.md","raw":"---\ntitle: viewport视口\ntags: [移动端,前端全栈]\nslug: ea5929f7c\nkeywords: 移动端\ndate: 2018-09-01 22:17:36\n---\n\n## 移动端\n\n### viewport 视口(可视区窗口)\n\n\t\t默认不设置viewport一般可视区宽度在移动端是980\n\t\t\n\t\twidth  可视区的宽度 (number||device-width)\n\t\t\n\t\tuser-scalable 是否允许用户缩放 (yes||no) iOS10无效\n\t\t\n\t\tinitial-scale 初始缩放比例\n\t\t\n\t\tminimum-scale 最小缩放比例\n\t\t\n\t\tmaximum-scale 最大缩放比例\n\n### 设备像素比(device pixel ratio)\n\n\t\t设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：\n\t\t\n\t\t\t设备像素比 ＝ 物理像素 / 设备独立像素\n\t\t\t\n\t\t在JavaScript中，可以通过window.devicePixelRatio获取到当前设备的dpr\n\n### CSS单位rem\n\n\t\t在W3C规范中是这样描述rem的:\n\t\t\n\t\tfont size of the root element.\n\t\t\n\t\t简单的理解，rem就是相对于根元素<html>的font-size来做计算。\n\t\t而我们的方案中使用rem单位，是能轻易的根据<html>的font-size计算出元素的盒模型大小。\n\n### meta设置\n\n```html\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<meta name=\"viewport\" content=\"width=device-width,user-scalable=no\">\n\t<!--QQ强制竖屏显示-->\n\t<meta name=\"x5-orientation\" content=\"portrait\" />\n\t<!--QQ全屏显示-->\n\t<meta name=\"x5-fullscreen\" content=\"true\" />\n\t<!--UC强制竖屏显示-->\n\t<meta name=\"screen-orientation\" content=\"portrait\">\n\t<!--UC全屏显示-->\n\t<meta name=\"full-screen\" content=\"yes\">\n\t<!--禁止识别电话号码和邮箱地址-->\n\t<meta name=\"format-detection\" content=\"telephone=no, email=no\" />\n\t<!--页面适合在pc和mobile上进行浏览-->\n\t<meta name=\"applicable-device\" content=\"pc, mobile\">\n\t<!--针对Apple是否启动WebApp功能-->\n\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\t<!--Apple顶部导航栏颜色-->\n\t<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n\t</head>\n\t<body>\n\t\t<!--\n\t\t\thref=\"tel:\"\n\t\t\thref=\"mailto:\"\n\t\t-->\n\t\t<p>13888888888</p>\n\t\t<a href=\"tel:18888888888\">请拨打电话18888888888</a>\n\t\t<a href=\"mailto:zyh@qq.com\">请发送邮件</a>\n\t</body>\n\t</html>\n```\n\n### 默认样式设置\n\n```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=no\">\n    <style type=\"text/css\">\n    /*默认字体设置*/\n    body {\n    \tfont-family: Helvetica;\n    }\n    body * {\n    \t/*禁止文字缩放*/\n    \t-webkit-text-size-adjust: 100%;\n    \t/*选中文字设置*/\n    \t-webkit-user-select: none; \n    }\n    /*清除点击阴影*/\n    a,input,button {\n    \t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    \t/*-webkit-tap-highlight-color: transparent*/\n    }\n    /*消除圆角按钮（针对iOS系统）*/\n    input,button {\n    \t-webkit-appearance: none;\n    \tborder-radius: 0;\n    }\n    </style>\n    </head>\n    <body>\n    \t<a href=\"http://www.baidu.com\">百度一下</a>\n    \t<input type=\"button\" value=\"按钮\">\n    </body>\n    </html>\n```\n\n### 动态获取像素比（取自--饿了么移动端）\n\n```javascript\n\t!function(e, t) {\n\t\tfunction i() {\n\t\t\tvar t = n.getBoundingClientRect().width;\n\t\t\tt / d > 540 && (t = 540 * d);\n\t\t\tvar i = t / 10;\n\t\t\tn.style.fontSize = i + \"px\", p.rem = e.rem = i\n\t\t}\n\t\tvar a, r = e.document,\n\t\t\tn = r.documentElement,\n\t\t\to = r.querySelector('meta[name=\"viewport\"]'),\n\t\t\tl = r.querySelector('meta[name=\"flexible\"]'),\n\t\t\tm = r.querySelector('meta[name=\"flexible-in-x5\"]'),\n\t\t\ts = !0,\n\t\t\td = 0,\n\t\t\tc = 0,\n\t\t\tp = t.flexible || (t.flexible = {});\n\t\tif (o) {\n\t\t\tconsole.warn(\"将根据已有的meta标签来设置缩放比例\");\n\t\t\tvar u = o.getAttribute(\"content\").match(/initial\\-scale=([\\d\\.]+)/);\n\t\t\tu && (c = parseFloat(u[1]), d = parseInt(1 / c))\n\t\t} else if (l) {\n\t\t\tvar f = l.getAttribute(\"content\");\n\t\t\tif (f) {\n\t\t\t\tvar v = f.match(/initial\\-dpr=([\\d\\.]+)/),\n\t\t\t\t\th = f.match(/maximum\\-dpr=([\\d\\.]+)/);\n\t\t\t\tv && (d = parseFloat(v[1]), c = parseFloat((1 / d).toFixed(2))), h && (d = parseFloat(h[1]), c = parseFloat((1 / d).toFixed(2)))\n\t\t\t}\n\t\t}\n\t\tif (m && (s = \"false\" !== m.getAttribute(\"content\")), !d && !c) {\n\t\t\tvar x = (e.navigator.appVersion.match(/android/gi), e.chrome),\n\t\t\t\tg = e.navigator.appVersion.match(/iphone/gi),\n\t\t\t\tb = e.devicePixelRatio,\n\t\t\t\tw = /TBS\\/\\d+/.test(e.navigator.userAgent),\n\t\t\t\ty = !1;\n\t\t\ttry {\n\t\t\t\ty = \"true\" === localStorage.getItem(\"IN_FLEXIBLE_WHITE_LIST\")\n\t\t\t} catch (e) {\n\t\t\t\ty = !1\n\t\t\t}\n\t\t\td = g || x || w && s && y ? b >= 3 && (!d || d >= 3) ? 3 : b >= 2 && (!d || d >= 2) ? 2 : 1 : 1, c = 1 / d\n\t\t}\n\t\tif (n.setAttribute(\"data-dpr\", d), !o) if (o = r.createElement(\"meta\"), o.setAttribute(\"name\", \"viewport\"), o.setAttribute(\"content\", \"initial-scale=\" + c + \", maximum-scale=\" + c + \", minimum-scale=\" + c + \", user-scalable=no\"), n.firstElementChild) n.firstElementChild.appendChild(o);\n\t\telse {\n\t\t\tvar E = r.createElement(\"div\");\n\t\t\tE.appendChild(o), r.write(E.innerHTML)\n\t\t}\n\t\te.addEventListener(\"resize\", function() {\n\t\t\tclearTimeout(a), a = setTimeout(i, 300)\n\t\t}, !1), e.addEventListener(\"pageshow\", function(e) {\n\t\t\te.persisted && (clearTimeout(a), a = setTimeout(i, 300))\n\t\t}, !1), \"complete\" === r.readyState ? r.body.style.fontSize = 12 * d + \"px\" : r.addEventListener(\"DOMContentLoaded\", function(e) {\n\t\t\tr.body.style.fontSize = 12 * d + \"px\"\n\t\t}, !1), i(), p.dpr = e.dpr = d, p.refreshRem = i, p.rem2px = function(e) {\n\t\t\tvar t = parseFloat(e) * this.rem;\n\t\t\treturn \"string\" == typeof e && e.match(/rem$/) && (t += \"px\"), t\n\t\t}, p.px2rem = function(e) {\n\t\t\tvar t = parseFloat(e) / this.rem;\n\t\t\treturn \"string\" == typeof e && e.match(/px$/) && (t += \"rem\"), t\n\t\t}\n\t}(window, window.lib || (window.lib = {}))\n```\n\n### 像素比简单设置\n\n\t\t//获取像素比\n\t\tvar PixelRatio = 1 / window.devicePixelRatio;\n\t\t//写入meta\n\t\tdocument.write('<meta name=\"viewport\" content=\"width=device-width,initial-scale='+PixelRatio+',minimum-scale='+PixelRatio+',maximum-scale='+PixelRatio+',user-scalable=no\" />');\n\t\t//获取html元素\n\t\tvar html = document.getElementsByTagName('html')[0];\n\t\t//获取html（屏幕）的宽度\n\t\tvar pageWidth = html.getBoundingClientRect().width;\n\t\t//获取html的字号\n\t\thtml.style.fontSize = pageWidth / 10 + 'px';\n\n### 弹性盒模型\n\n> 主轴和侧轴的样式都需要加在元素的父级，而元素的位置设置只需要加在自身即可（别忘了父级要加display: flex;）\n\n\t\t主轴方向设置\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\tdisplay: flex;\n\t\t\t\n\t\t\t/*设置主轴方向为水平方向*/\n\t\t\t/*flex-direction: row;*/\n\t\t\t\n\t\t\t/*设置主轴方向为垂直方向*/\n\t\t\t/*flex-direction: column;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\tdisplay: -webkit-box;\n\t\t\t\n\t\t\t/*设置主轴方向为水平方向*/\n\t\t\t-webkit-box-orient: horizontal;\n\t\t\t\n\t\t\t/*设置主轴方向为垂直方向*/\n\t\t\t/*-webkit-box-orient: vertical;*/\n\t\t\n\t\t主轴上元素排列方向\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\t/*display: flex;*/\n\t\t\t\n\t\t\t/*设置主轴方向为水平,元素排列为反序*/\n\t\t\t/*flex-direction: row-reverse;*/\n\t\t\t\n\t\t\t/*设置主轴方向为垂直,元素排列为反序*/\n\t\t\t/*flex-direction: column-reverse;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\tdisplay: -webkit-box;\n\t\t\t\n\t\t\t/*元素在主轴上排列为反序*/\n\t\t\t/*-webkit-box-direction: reverse;*/\n\t\t\t\n\t\t\t/*元素在主轴上排列为正序*/\n\t\t\t/*-webkit-box-direction: normal;*/\n\t\t\n\t\t主轴上富裕空间管理\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\tdisplay: flex;\n\t\t\t\n\t\t\t/*元素在主轴开始位置 ，富裕空间在主轴的结束位置*/\n\t\t\t/*justify-content: flex-start;*/\n\t\t\t\n\t\t\t/*元素在主轴结束位置，富裕空间在主轴开始位置*/\n\t\t\t/*justify-content: flex-end;*/\n\t\t\t\n\t\t\t/*元素在主轴中间,富裕空间在主轴两侧*/\n\t\t\t/*justify-content: center;*/\n\t\t\t\n\t\t\t/*富裕空间平均分配在每两个元素之间*/\n\t\t\t/*justify-content: space-between;*/\n\t\t\t\n\t\t\t/*富裕空间平均分配在每个元素两侧*/\n\t\t\t/*justify-content: space-around;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\tdisplay: -webkit-box;\n\t\t\t\n\t\t\t/*元素在主轴的开始位置,富裕空间在主轴的结束位置*/\n\t\t\t/*-webkit-box-pack: start;*/\n\t\t\t\n\t\t\t/*元素在主轴结束位置，富裕空间在主轴开始位置*/\n\t\t\t/*-webkit-box-pack: end;*/\n\t\t\t\n\t\t\t/*元素在主轴中间,富裕空间在主轴两侧*/\n\t\t\t/*-webkit-box-pack: center;*/\n\t\t\t\n\t\t\t/*富裕空间平均分配在每两个元素之间*/\n\t\t\t/*-webkit-box-pack: justify;*/\n\t\t\n\t\t侧轴上富裕空间管理\n\t\t\n\t\t\t/*新版弹性盒模型*/\n\t\t\t/*display: flex;*/\n\t\t\t\n\t\t\t/*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n\t\t\t/*align-items: flex-start;*/\n\t\t\t\n\t\t\t/*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n\t\t\t/*align-items: flex-end;*/\n\t\t\t\n\t\t\t/*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n\t\t\t/*align-items: center;*/\n\t\t\t\n\t\t\t/*根据侧轴方向上文字的基线对齐*/\n\t\t\t/*align-items: baseline;*/\n\t\t\t\n\t\t\t\n\t\t\t/*老版弹性盒模型*/\n\t\t\t/*display: -webkit-box;*/\n\t\t\t\n\t\t\t/*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n\t\t\t/*-webkit-box-align: start;*/\n\t\t\t\n\t\t\t/*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n\t\t\t/*-webkit-box-align: end;*/\n\t\t\t\n\t\t\t/*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n\t\t\t/*-webkit-box-align: center;*/\n\t\t\n\t\t元素弹性空间\n\t\t\n\t\t\t/*新版*/\n\t\t\t/*flex-grow: 1;*/\n\t\t\t\n\t\t\t/*老版*/\n\t\t\t-webkit-box-flex:1;\n\t\t\n\t\t元素具体位置设置\n\t\t\n\t\t\t/* 数值越小越靠前，可以接受0或者负值 */\n\t\t\t/*order:5;*/\n\t\t\t\n\t\t\t/* 数值越小越靠前， 最小值默认处理为1*/\n\t\t\t/*-webkit-box-ordinal-group:-2;*/\n\n### 移动端事件\n\n\t\t手指按下：\n\t\t\tontouchstart\n\t\t\t\n\t\t手指移动：\n\t\t\tontouchmove\n\t\t\t\n\t\t手指抬起：\n\t\t\tontouchend\n\t\t\t\n\t\t注意：\n\t\t\t在移动端开发的时候，浏览器的模拟器时好时坏，\n\t\t\t一般不用on的方式绑定事件函数，要用事件绑定的方式(addEventListener)\n\t\t\n\t\t移动端click屏幕产生200-300ms的延迟响应\n\t\t\n\t\t\t移动设备上的web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。\n\t\t\n\t\t以下是历史原因：\n\t\t\n\t\t\t2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，\n\t\t\t使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，\n\t\t\t你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，\n\t\t\t你就能看清该部分放大后的内容，再次双击后能回到原始状态。\n\t\t\t\n\t\t\t双击缩放是指用手指在屏幕上快速点击两次，iOS自带的 Safari浏览器会将网页缩放至原始比例。\n\t\t\t\n\t\t\t原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接<a href=\"#\"></a>，\n\t\t\t此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，\n\t\t\t所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，\n\t\t\t则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，\n\t\t\t转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。\n\t\t\t这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，\n\t\t\t对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。\n\n### 触摸事件的响应顺序\n\n\t\t1、ontouchstart \n\t\t2、ontouchmove \n\t\t3、ontouchend \n\t\t4、onclick\n\t\t\n\t\t解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应\n\n### 移动端的点透\n\n\t\t当上层元素发生点击的时候，下层元素也有点击（焦点）特性，\n\t\t在300ms之后，如果上层元素消失或者隐藏，目标点就会“漂移”到下层元素身上，就会触发点击行为。\n\t\t\t\n\t\t解决：\n\t\t\n\t\t\t1.下层不要使用有点击（焦点）特性的元素\n\t\t\t\n\t\t\t2.阻止pc事件\n\n### 移动端阻止PC事件优点\n\n\t\tdocument.addEventListener('touchstart',function(ev){\n\t\t\tev.preventDefault();\n\t\t});\n\t\t\n\t\t\n\t\t1.IOS10下设置meta禁止用户缩放是不可行的。（使用阻止pc事件就可以在IOS10下禁止用户缩放）\n\t\t\t\n\t\t2.解决IOS10下溢出隐藏的问题。\n\t\t\n\t\t3.禁止系统默认的滚动条、阻止橡皮筋效果\n\t\t\n\t\t4.禁止长按选中文字、选中图片、系统默认菜单\n\t\t\n\t\t5.解决点透问题\n\t\t\n\t\t6.也阻止了焦点元素的焦点行为(要正常使用：ev.stopPropagation()阻止冒泡)\n\n### 移动端事件对象\n\n\t\t当给某个元素加上了事件绑定函数之后，事件函数默认的第一个参数就是事件对象\n\t\t\n\t\t事件对象：\n\t\t\t当用户在浏览器下触发了某个行为，事件对象会记录用户操作时一些细节信息。\n\t\t\n\t\ttouches 当前位于*屏幕*上的所有手指的一个列表\n\t\t\n\t\ttargetTouches 位于当前DOM元素上的手指的一个列表\n\t\t\n\t\tchangedTouches  涉及当前事件的手指的一个列表\n\t\t\n\t\tdiv.addEventListener('touchmove',start);\n\t\tfunction start(ev){\n\t\t\t//this.innerHTML = ev.touches.length;\n\t\t\t//this.innerHTML = ev.targetTouches.length;\n\t\t\tthis.innerHTML = ev.changedTouches.length;\n\t\t}\n\n### 移动端input无法获取焦点的问题\n\n在移动端开发中，我们有时有针对性的写一些特殊的重置，比如：\n\n\t\t* {\n\t\t\t-webkit-touch-callout: none;\n\t\t\t//阻止长按图片之后呼出菜单提示复制的行为\n\t\t\t\n\t\t\t-webkit-text-size-adjust: none;\n\t\t\t//禁用Webkit内核浏览器的文字大小调整功能\n\t\t\t\n\t\t\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\t\t\t//避免点击a标签或者注册了click事件的元素时产生高亮\n\t\t\t\n\t\t\t-webkit-user-select: none;\n\t\t\t//禁止用户进行复制、选择\n\t\t}\n\t\t\n\t\t其中，-webkit-user-select: none;会产生一些问题，这是webkit内核浏览器下的一个bug\n\t\t阻止了用户的选择内容行为，会导致一些“内容可编辑”标签无法正常使用，比如input、textarea\n\t\t\n\t\t如果网站不需要阻止用户的选择内容的行为就可以使用如下样式：\n\t\t\n\t\t\t* {\n\t\t\t\t-webkit-user-select: text;\n\t\t\t\t-user-select: text;\n\t\t\t}\n\t\t\t\n\t\t\t另一种方式：\n\t\t\t*: not(input, textarea) {\n\t\t\t\t-webkit-touch-callout: none;\n\t\t\t\t-webkit-user-select: none;\n\t\t\t}\n\t\t\t\n\t\tuser-select可能会导致与contenteditable = \"true\"元素的问题，以便更好的使用，所以下面的CSS也要加上\n\t\t\n\t\t\tHTML5全局 contenteditable属性\n\t\t\t\tcontenteditable 属性规定是否可编辑元素的内容\n\t\t\n\t\t\t[contenteditable=\"true\"] , input, textarea {\n\t\t\t\t-webkit-user-select: auto !important;\n\t\t\t\t-khtml-user-select: auto !important;\n\t\t\t\t-moz-user-select: auto !important;\n\t\t\t\t-ms-user-select: auto !important;\n\t\t\t\t-o-user-select: auto !important;\n\t\t\t\tuser-select: auto !important;\n\t\t\t}\n\n### 表单输入框placeholder的颜色值\n\n\t\tinput::-webkit-input-placeholder{color:#ccc;}\n\t\tinput:focus::-webkit-input-placeholder{color:#ddd;}\n\n### 模拟按钮hover效果\n\n\t\t直接在body上添加ontouchstart，同样可激活移动端css的active效果\n\t\t移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，\n\t\t使用css的hover并不能满足我们的需求，还好国外有个激活移动端css的active效果\n\n> 第一种\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t<meta content=\"email=no\" name=\"format-detection\">\n\t<style type=\"text/css\">\n\t\ta{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n\t\t.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n\t\t.btn-blue:active{background-color: #357AE8;}\n\t</style>\n\t</head>\n\t<body ontouchstart>\n\t\t<div class=\"btn-blue\">按钮</div>\n\t</body>\n\t</html>\n```\n\n> 第二种\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t<meta content=\"email=no\" name=\"format-detection\">\n\t<style type=\"text/css\">\n\t\ta{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n\t\t.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n\t\t.btn-blue:active{background-color: #357AE8;}\n\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"btn-blue\">按钮</div>\n\t<script type=\"text/javascript\">\n\tdocument.addEventListener(\"touchstart\", function(){}, true)\n\t</script>\n\t</body>\n\t</html>\n```\n\n> 兼容性ios5+、部分android 4+、winphone 8\n\n> 第三种\n\n> 要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t<meta content=\"email=no\" name=\"format-detection\">\n\t<style type=\"text/css\">\n\t\ta{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n\t\t.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n\t\t.btn-blue-on{background-color: #357AE8;}\n\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"btn-blue\">按钮</div>\n\t<script type=\"text/javascript\">\n\tvar btnBlue = document.querySelector(\".btn-blue\");\n\tbtnBlue.ontouchstart = function(){\n\t\tthis.className = \"btn-blue btn-blue-on\"\n\t}\n\tbtnBlue.ontouchend = function(){\n\t\tthis.className = \"btn-blue\"\n\t}\n\t</script>\n\t</body>\n\t</html>\n```\n\n### 禁止ios长按时不触发系统的菜单，禁止ios&android长按时下载图片\n\n\t\t.css{-webkit-touch-callout: none}\n\n### 禁止ios和android用户选中文字\n\n\t\t.css{-webkit-user-select:none}\n\n### 打电话发短信写邮件\n\n\t\t打电话\n\t\t<a href=\"tel:10086\">打电话给:10086</a>\n\t\t\n\t\t发短信\n\t\t<a href=\"sms:10086\">发短信给:10086</a>\n\t\t\n\t\t写邮件\n\t\t<a href=\"mailto:zyh@qq.com\">zyh@qq.com</a>\n\n### 实现0.5px的线条\n\n\t\t网络上有很多方法，如设置viewport，box-shawdow，border-image，background-image，transform:scale等，\n\t\t本文只介绍一种觉得比较好用的方法，一来兼容性好，二来不依赖图片。\n\t\t\n\t\ttransform:scale(x,y)\n\t\t\n\t\t通过css支持定义border或者height为.5px大的线条，在android设备中的无法显示出来，这里有个小技巧，\n\t\t设置线条为1px，然后通过transform:scale(x,y)来缩放线条为原来的一半，可显示0.5px的线条。\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta content=\"width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t\t<meta content=\"email=no\" name=\"format-detection\">\n\t\t<title>点5测试 - scale</title>\n\t\t<style type=\"text/css\">\n\t\t.line {\n\t\t    height: 50px;\n\t\t    line-height: 50px;\n\t\t    background-color: #CCC;\n\t\t    border-bottom:1px solid red\n\t\t} \n\t\t.scale {\n\t\t    position: relative;\n\t\t    height: 50px;\n\t\t    line-height: 50px;\n\t\t    background-color: #CCC\n\t\t}\n\t\t.scale:after {\n\t\t    position: absolute;\n\t\t    content: '';\n\t\t    width: 100%;\n\t\t    left: 0;\n\t\t    bottom: 0;\n\t\t    height: 1px;\n\t\t    background-color: red;\n\t\t    -webkit-transform: scale(1,.5);\n\t\t    transform: scale(1,.5);\n\t\t    -webkit-transform-origin: center bottom;\n\t\t    transform-origin: center bottom\n\t\t}\n\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t\t<div class=\"line\">1px</div>\n\t\t\t<br/><br/>    \n\t\t\t<div class=\"scale\">0.5px</div>\n\t\t</body>\n\t</html>\n```\n\n### 实现0.5px的圆角边框\n\n\t\t原理：先定义1px的圆角边框，然后拉伸内容的宽度和高度为父级的2倍(边框厚度不变)，\n\t\t然后再使用transform:scale(0.5)缩放为原来的0.5倍\n\n```html\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta content=\"width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no\" name=\"viewport\">\n\t\t<meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n\t\t<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n\t\t<meta content=\"telephone=no\" name=\"format-detection\">\n\t\t<meta content=\"email=no\" name=\"format-detection\">\n\t\t<title>点5测试 - border-radius</title>\n\t\t<style type=\"text/css\">\n\t\tbody{padding: 50px;-webkit-touch-callout:none;}\n\t\t[class*=\"btn\"]{margin: 0 auto;}\n\t\t.btn-1 {\n\t\t    width: 200px;\n\t\t    height: 42px;\n\t\t    -webkit-border-radius: 5px;\n\t\t    border-radius: 5px;\n\t\t    text-align: center;\n\t\t    line-height: 42px;\n\t\t    background-color: #EDEDED;\n\t\t    border: 1px solid red;\n\t\t}\n\t\t.btn {\n\t\t    position: relative;\n\t\t    width: 200px;\n\t\t    height: 42px;\n\t\t    -webkit-border-radius: 5px;\n\t\t    border-radius: 5px;\n\t\t    text-align: center;\n\t\t    line-height: 42px;\n\t\t    background-color: #EDEDED;\n\t\t}\n\t\t.btn:before {\n\t\t    content: '';\n\t\t    position: absolute;\n\t\t    top: -50%;\n\t\t    bottom: -50%;\n\t\t    left: -50%;\n\t\t    right: -50%;\n\t\t    -webkit-transform: scale(0.5);\n\t\t    transform: scale(0.5);\n\t\t    border-style: solid;\n\t\t    border-width: 1px;\n\t\t    border-color: red;\n\t\t    -webkit-border-radius: 10px;\n\t\t    border-radius: 10px;\n\t\t}\n\t\t</style>\n\t\t</script>\n\t\t</head>\n\t\t<body>\n\t\t\t<div class=\"btn-1\">1px border</div>\n\t\t\t<br/><br/>\n\t\t\t<div class=\"btn\">.5px border</div>\n\t\t</body>\n\t</html>\n```\n\n### CSS实现隐藏滚动条同时又可以滚动\n\n\t\t移动端页面为了更接近原生的体验，是否可以隐藏滚动条，同时又保证页面可以滚动？\n\t\t\n\t\t使用 overflow:hidden 隐藏滚动条，但存在的问题是：页面或元素失去了滚动的特性。\n\t\t由于只需要兼容移动浏览器（Chrome 和 Safari），于是想到了自定义滚动条的伪对象选择器\n\t\t::-webkit-scrollbar。\n\t\t\n\t\t应用如下 CSS 可以隐藏滚动条：\n\t\t\t//.element就是指出现滚动条的元素\n\t\t\t.element::-webkit-scrollbar {display:none}\n\t\t\n\t\t如果要兼容PC其他浏览器（IE、Firefox等），国外一位才人John Kurlak也研究出了一种办法。\n\t\t在容器外面再嵌套一层 overflow:hidden内部内容再限制尺寸和外部嵌套层一样，就变相隐藏了。\n\t\t\n\t\t<div class=\"outer-container\">\n\t\t    <div class=\"inner-container\">\n\t\t        <div class=\"content\">\n\t\t        \t......\n\t\t        </div>\n\t\t    </div>\n\t\t</div>\n\t\t.outer-container,.content {\n\t\t    width: 200px; height: 200px;\n\t\t}\n\t\t.outer-container {\n\t\t    position: relative;\n\t\t    overflow: hidden;\n\t\t}\n\t\t.inner-container {\n\t\t    position: absolute; \n\t\t    left: 0;\n\t\t    overflow-x: hidden;\n\t\t    overflow-y: scroll;\n\t\t}\n\t\t \n\t\t /* for Chrome */\n\t\t.inner-container::-webkit-scrollbar {\n\t\t    display: none;\n\t\t}\n\n### Rem布局原理\n\n\t\t其实rem布局的本质是等比缩放，一般是基于宽度\n\t\t\n\t\t假设我们将屏幕宽度平均分成100份，每一份的宽度用x表示，x = 屏幕宽度 / 100，\n\t\t如果将x作为单位，x前面的数值就代表屏幕宽度的百分比\n\t\t\n\t\tp {width: 50x} /* 屏幕宽度的50% */\n\t\t\n\t\t如果想要页面元素随着屏幕宽度等比变化，我们需要上面的x单位，不幸的是css中并没有这样的单位，\n\t\t幸运的是在css中有rem，通过rem这个桥梁，可以实现神奇的x\n\t\t\n\t\t通过上面对rem的介绍，可以发现，如果子元素设置rem单位的属性，\n\t\t通过更改html元素的字体大小，就可以让子元素实际大小发生变化\n\t\t\n\t\thtml {font-size: 16px}\n\t\tp {width: 2rem} /* 32px*/\n\t\t\n\t\thtml {font-size: 32px}\n\t\tp {width: 2rem} /*64px*/\n\t\t\n\t\t如果让html元素字体的大小，等于屏幕宽度的1/100，那1rem和1x就等价了\n\t\t\n\t\thtml {fons-size: width / 100}\n\t\tp {width: 50rem} /* 50rem = 50x = 屏幕宽度的50% */\n\t\t\n\t\t如何让html字体大小一直等于屏幕宽度的百分之一呢？ 可以通过js来设置，一般需要在页面dom ready、resize和屏幕旋转中设置\n\t\t\n\t\tdocument.documentElement.style.fontSize = document.documentElement.clientWidth / 100 + 'px';\n\t\t\n\t\t那么如何把UE图中的获取的像素单位的值，转换为已rem为单位的值呢？公式是元素宽度 / UE图宽度 * 100\n\t\t\n\t\t假设UE图尺寸是640px，UE图中的一个元素宽度是100px，根据公式100/640*100 = 15.625\n\t\t\n\t\tp {width: 15.625rem}\n\n### 比Rem更好的方案\n\n\t\t上面提到想让页面元素随着页面宽度变化，需要一个新的单位x，x等于屏幕宽度的百分之一，css3带来了rem的同时，也带来了vw和vh\n\t\t\n\t\t\tvw —— 视口宽度的 1/100\n\t\t\tvh —— 视口高度的 1/100\n\t\t\t\n\t\t聪明的你也许一经发现，这不就是单位x吗，没错根据定义可以发现1vw=1x，有了vw我们完全可以绕过rem这个中介了，\n\t\t下面两种方案是等价的，可以看到vw比rem更简单\n\t\t\n\t\t\t/* rem方案 */\n\t\t\thtml {fons-size: width / 100}\n\t\t\tp {width: 15.625rem}\n\t\t\t\n\t\t\t/* vw方案 */\n\t\t\tp {width: 15.625vw}\n\t\t\tvw还可以和rem方案结合，这样计算html字体大小就不需要用js了\n\t\t\t\n\t\t\thtml {fons-size: 1vw} /* 1vw = width / 100 */\n\t\t\tp {width: 15.625rem}\n\t\t\t虽然vw各种优点，但是vw也有缺点，首先vw的兼容性不如rem好，使用之前要看下\n\t\t\n\t\t兼容性\tIOS\t安卓\n\t\trem\t4.1+\t2.1+\n\t\tvw\t6.1+\t4.4+\n\t\t另外，在使用弹性布局时，一般会限制最大宽度，比如在pc端查看我们的页面，此时vw就无法力不从心了，\n\t\t因为除了width有max-width，其他单位都没有，而rem可以通过控制html根元素的font-size最大值，而轻松解决这个问题\n\n### H5禁止手机虚拟键盘弹出\n\n\t\t在移动端，input会默认触发手机的虚拟键盘，如何阻止手机虚拟键盘弹起呢？\n\t\t目前我试过有两个方案，一个是给input添加readonly属性，\n\t\t另一个就是在input事件处理方法前面添加一句document.activeElement.blur()\n\t\t\n\t\treadonly\n\t\t\n\t\t\t使用readonly方式来阻止虚拟键盘弹出应该是最简单最优雅的方式了。\n\t\t\treadonly属性规定输入字段为只读。只读字段是不能修改的。\n\t\t\t不过，用户仍然可以使用 tab键切换到该字段，还可以选中或拷贝其文本。\n\t\t\t\n\t\t\t值得一提的是它的取值，只要声明了readonly属性，不管取什么值都可以，\n\t\t\t比如readonly=\"\"、readonly=\"readonly\"、readonly=\"abc\"都是一样的\n\t\t\t\n\t\t\t优点：简单\n\t\t\t缺点：在iOS的Safari中无效（未做更多情况测试）\n\t\t\n\t\tdocument.activeElement.blur()\n\t\t\n\t\t\t这是个什么玩意儿？document.activeElement是一个Web API接口。\n\t\t\tMDN上的解释是：它返回当前页面中获得焦点的元素，也就是说，如果此时用户按下了键盘上某个键，\n\t\t\t会在该元素上触发键盘事件，该属性是只读的。\n\t\t\n\t\t\tdocument.activeElement属性始终会引用DOM中当前获得了焦点的元素。\n\t\t\t元素获得焦点的方式有用户输入(通常是按Tab键)、在代码中调用focus()方法和页面加载。\n\t\t\t\n\t\t\t它里面有很多方法，在浏览器控制台查看，可以看到有很多方法\n\t\t\t\n\t\t\tMDN上还展示了一个有意思的示例，看这里 http://jsfiddle.net/w9gFj/\n\t\t\t\n\t\t\t那么document.activeElement.blur()为什么可以阻止虚拟键盘弹出呢？\n\t\t\t原因是：当你点击input的时候，document.activeElement获得了DOM中被聚焦的元素，\n\t\t\t也就是你点击的input，而调用.blur()方法，blur我相信大家都知道吧，就是取消聚焦。\n\t\t\t获得被聚焦的元素然后强制blur以达到没有聚焦的样子\n\t\t\t\n\t\t\t优点：支持Android、iOS\n\t\t\t缺点：需要添加额外的JS代码\n\t\t\n\t\t\t这句代码加在什么地方？加入有如下HTML\n\t\t\t\n\t\t\t\t<div class=\"calendar\">\n\t\t\t\t    <div>\n\t\t\t\t        <input type=\"text\" id=\"datePicker\" placeholder=\"点击选择日期\"/>\n\t\t\t\t    </div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t那么这句JS加在事件处理方法中\n\t\t\n\t\t\t\t$(\"#datePicker\").focus(function(){\n\t\t\t\t    document.activeElement.blur();\n\t\t\t\t});\n\t\t\t\t\n\t\t就现在来说，用document.activeElement.blur()确实是在绕弯子，直接使用readonly是最佳方案。\n\t\t但是document.activeElement很强大，可以做很多事。\n\n### 只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\n\n\t\t只是头部绝对定位，内容区不使用绝对定位来解决\n\t\t\n\t\t\tbody{\n\t\t\t\theight:100%;\n\t\t\t\toverflow:hidden;\n\t\t\t}\n\t\t\theader{\n\t\t\t\tposition:absolute;\n\t\t\t\ttop:0;\n\t\t\t\tleft:0;\n\t\t\t\tright:0;\n\t\t\t\theight:80px;\n\t\t\t}\n\t\t\tcontent{\n\t\t\t\tpadding:80px 0 20px;\n\t\t\t\theight:100%;\n\t\t\t\toverflow-x:hidden;\n\t\t\t\toverflow-y:scroll;\n\t\t\t\tbox-sizing:border-box;\n\t\t\t}\n\t\t\t\n\t\t分析：\n\t\t\t\n\t\t\tbody设置固定显示区域（类似划个固定的区域框选子元素），header可以用绝对定位，内容区高度是不确定的，\n\t\t\t所以用上padding来设置内容的显示区域（左右下padding可适当添加），但是给内容加上height:100%的同时，\n\t\t\t一定要加上box-sizing:border-box，要不然内容区的高度就不是100%了\n\n### 多行文本溢出\n\n\t\t单行文本溢出，对title类的使用非常多，而多行文本类，在详情介绍则用的比较多。\n\t\t\n\t\t/*单行文本溢出*/\n\t\t.inaline{\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t\n\t\t/*多行文本溢出*/\n\t\t.intwoline{\n\t\t\tdisplay: -webkit-box !important;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tword-break: break-all;\n\t\t\t-webkit-box-orient:vertical;\n\t\t\t-webkit-line-clamp:4;\n\t\t}\n\t\t属性-webkit-line-clamp就可以控制几行溢出，4就是第四行进行截断加...\n\n### 移动端遇上表单元素底部被顶起\n\n\t\t@media (max-height:400px){\n\t\t\telement{\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t\t\n\t\t分辨率高度小于等于设置值的时候识别\n\t\t\n\t\t一般设置为400px，但也不排除有些键盘高低不一致的情况，可根据情况适当修改\n\n### 当input遇见了全屏背景\n\n\t\t在移动端开发过程中，有极少数使用全屏背景的情况。当input遇见了全屏背景，一切便不再美好。\n\t\t\n\t\t解决办法：\n\t\t\n\t\t\tlet viewH = document.documentElement.clientHeight;\n\t\t\tdocument.getElementsByTagName('html')[0].style.cssText += `height:${viewH}px`;\n\t\t\tdocument.body.style.cssText += `height:${viewH}px`;\n\n> 补充可视区宽高小知识\n\n\t\t可视区宽度\n\t\t\n\t\t\tdocument.body.clientWidth\n\t\t\tdocument.documentElement.clientWidth\n\t\t\n\t\t可视区高度\n\t\t\n\t\t\tdocument.documentElement.clientHeight\n\t\t\n\t\t仔细一看可视区高度怎么和可视区宽度少了一个呢？\n\t\t\n\t\t其实不难理解，body本身块元素，宽度自然撑满可视区宽度\n\t\t\n\t\t而高度并非如此，body自身的高度则根据子元素的高度来撑\n\t\t\n\t\t所以document.body.clientHeight指的就是body自身的宽度\n\n### 移动网页调试神器vConsole以及Eruda使用技巧\n\n\t\t做移动端Web开发的一大痛点就是，在真机运行下无法查看console.log日志和其他信息如网络请求、显示本地存储等信息\n\t\t\n\t\t如果网页是运行在手机浏览器中还算好，可以把网址在电脑上打开查看console信息\n\t\t\n\t\t但是如果是做APP的内嵌H5页面，那就只能靠开发阶段在浏览器模拟环境中尽量没有Bug\n\t\t\n\t\t但是，一旦H5上线后报错那就比较麻烦了，而且还依赖APP环境才能跑的网页，更加难以查找问题\n\t\t\n\t\t如果让移动端也拥有类似Chrome DevTools工具那岂不是很愉快么？\n\t\t\n\t\tvConsole便是这样一款很棒的移动端DevTools工具，由大厂企鹅出品。\n\n[vConsole github地址](https://github.com/Tencent/vConsole)\n\n> Eruda\n\n\t\tEruda是谁？\n\t\t\n\t\tEruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版\n\t\t\n\t\t其主要功能包括：\n\t\t\n\t\t捕获 console 日志、检查元素状态、显示性能指标、捕获XHR请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。\n\n[集颜值技能于一身的Erdua](https://github.com/liriliri/eruda)\n\n[使用技巧](https://github.com/liriliri/eruda/blob/master/doc/README_CN.md)\n\n> Erdua的基本使用方法推荐使用CDN和可配置参数的形式，在页面引入如下代码：\n\n```javascript\n\t;(function () {\n\t    var src = '//cdn.bootcss.com/eruda/1.2.4/eruda.min.js';\n\t    if (!/eruda=true/.test(window.location) && localStorage.getItem('active-eruda') !== 'true') return;\n\t    document.write('<scr' + 'ipt src=\"' + src + '\"></scr' + 'ipt>');\n\t    document.write('<scr' + 'ipt>eruda.init();</scr' + 'ipt>');\n\t})();\n\teruda.init();//里面可以传入要初始化哪些面板，默认加载所有\n```\n\n\t\t这样使用方式没有错，但是如果Eruda要跟着发布到线上的话，那我们要删除这段代码？\n\t\t\n\t\t因为这样会不管你需不需要调试Eruda都会立即加载，在页面出现Eruda的图标\n\t\t\n\t\t我的目标是，Eruda可以保留在页面里，无论什么环境，只要我们想呼唤它出现的时候它才出现\n\t\t\n\t\t不需要它的时候它只是一段不会生效的普通代码\n\n\n> 办法\n\n\t\t首先把上述引入代码的src放到if里，同时把localStorage改为sessionStorage\n\t\t\n\t\tactive-eruda参数也可以改个更短的名字，改后的代码如下：\n\n```javascript\n\t;(function () {\n\t    if (!/eruda=true/.test(window.location) || sessionStorage.getItem('eruda') !== 'true') return;\n\t    var src = '//cdn.bootcss.com/eruda/1.4.3/eruda.min.js';\n\t    document.write('<scr' + 'ipt src=\"' + src + '\"></scr' + 'ipt>');\n\t    document.write('<scr' + 'ipt>eruda.init();</scr' + 'ipt>');\n\t})();\n```\n\n\t\t这段代码的意思是如果URL中有参数eruda=true或者sessionStorage中eruda的值为true才加载Eruda\n\t\t\n\t\t这样的好处是，我们需要调试的时候可以在网页URL后面加个参数即可，不需要调试的它不会加载\n\t\t\n\t\t然而，这在开发阶段可以这样做比较好，但是在线上环境可能要加URL参数比较麻烦\n\t\t\n\t\t于是我想到了在页面中点击某个元素10次再加载Eruda，点击10次或者更多次，然后在sessionStorage中写入eruda=true\n\t\t\n\t\t然后刷新当前页。相反，再点击10次关闭Eruda。用这样比较隐藏的方式开启或关闭Eruda\n\t\t\n\t\t这样线上环境也可以自由开启或关闭Eruda了\n\n> 例子：假如有这样的一个页面，里有一个标题文字\n\n\t\t<h2>——规则详情——</h2>\n\t\t<div>\n\t\t.....\n\t\t</div>\n\t\t那么我们可以在h2标签上绑定一个click事件，加入方法名叫showEruda\n\n```javascript\n\t<h2 onclick=\"showEruda\">——规则详情——</h2>\n\t<div>\n\t.....\n\t</div>\n\t<script>\n\tvar count = 0;\n\tfunction showEruda () {\n\t    if (count >= 10) {    \n\t        var eruda = sessionStorage.getItem('eruda');\n\t        if (!eruda || eruda === 'false'){\n\t            sessionStorage.setItem('eruda', 'true')\n\t        } else {\n\t            sessionStorage.setItem('eruda', 'false')\n\t        }\n\t        location.reload()\n\t    }\n\t    count++\n\t}\n\t</script>\n```\n\n[原文链接地址，请戳我](https://blog.dunizb.com/2017/10/16/erdua/)\n\n### -webkit-overflow-scrolling: touch\n\n\t\t在ios设备中，利用 overflow 来模拟滚动会出现卡顿的情况\n\t\t\n\t\t可以通过设置 -webkit-overflow-scrolling: touch; 来解决\n\t\t\n\t\t原因是设置后ios会为其创建一个 UIScrollView ，利用硬件来加速渲染\n\n### 1. 监听屏幕旋转变化接口: orientationchange\n\n**定义：**\n\n这个 `API` 可以检测手机是否横屏的情况。\n\n**使用：**\n\n```javascript\n  //检测屏幕旋转角度\n  screenOrientation() {\n    let orientation = screen.orientation || screen.mozOrientation || screen.msOrientation;\n    window.addEventListener(\"onorientationchange\" in window ? \"orientationchange\" : \"resize\", _ => {\n      this.angle = orientation.angle;\n    });\n  },\n```\n\n| orientation.angle 值 | 屏幕方向 |\n| --- | --- |\n| 0 | 竖屏 |\n| 90 | 向左横屏 |\n| -90/270 | 向右横屏 |\n| 180 | 倒屏 |\n\n> 通过这个 `API` 我们在横屏和竖屏的时候可以添加一些动作或者是样式的改变。\n\n如果只是样式的改变也可以通过媒体查询来监听：\n\n```css\n  /* 竖屏 */\n  @media screen and (orientation: portrait) {\n    // css code\n  }\n      \n  /* 横屏 */\n  @media screen and (orientation: landscape) {\n    // css code\n  }\n```\n### 2. 电池状态：navigator.getBattery()\n\n**定义：**\n\n这个 `API` 可以检测手机电池状态的情况。\n\n> 这个 `api` 返回的是一个 `promise` 对象，会给出一个 `BatteryManager` 对象，对象中包含了以下信息：\n\n| key | 描述 | 备注 |\n| --- | --- | --- |\n| charging | 是否在充电 | 可读属性 |\n| chargingTime | 若在充电，还需充电时间 | 可读属性 |\n| dischargingTime | 剩余电量 | 可读属性 |\n| level | 剩余电量百分数 | 可读属性 |\n| onchargingchange | 监听充电状态的改变 | 可监听事件 |\n| onchargingtimechange | 监听充电时间的改变 | 可监听事件 |\n| ondischargingtimechange | 监听电池可用时间的改变 | 可监听事件 |\n| onlevelchange | 监听剩余电量百分数的改变 | 可监听事件 |\n\n**使用：**\n\n```javascript\n  //检测是否充电以及电量\n  getBatteryInfo() {\n    if (navigator.getBattery) {\n      navigator.getBattery().then(battery => {\n        // 判断是否在充电\n        this.batteryInfo = battery.charging ? `在充电 : 剩余 ${battery.level * 100}%` : `没充电 : 剩余 ${battery.level * 100}%`;\n        // 电池充电状态改变事件\n        battery.addEventListener('chargingchange', _ => {\n          this.batteryInfo = battery.charging ? `在充电 : 剩余 ${battery.level * 100}%` : `没充电 : 剩余 ${battery.level * 100}%`;\n        });\n      });\n    } else {\n      this.batteryInfo = '不支持电池状态接口';\n    }\n  },\n```\n### 3. 让你的手机震动: window.navigator.vibrate(200)\n\n**定义：**\n\n这个 `API` 可以让你的手机按你的想法震动。\n\n**使用：**\n\n```javascript\n  //触发手机振动\n  vibrateFun()  {\n    if (navigator.vibrate) {\n      navigator.vibrate([500, 500, 500]);\n    } else {\n      this.vibrateInfo = \"您的设备不支持震动\";\n    }\n  },\n```\n### 4. 联网状态：navigator.onLine\n\n**定义：**\n\n这个 `API` 可以告诉你设备的网络状态是否连接。\n\n**使用：**\n\n```javascript\n  mounted() {\n    window.addEventListener('online', this.updateOnlineStatus, true);\n    window.addEventListener('offline', this.updateOnlineStatus, true);\n  },\n  methods: {\n    //检测网络信号\n    updateOnlineStatus() {\n      this.onLineInfo = navigator.onLine ? \"online\" : \"offline\";\n    },\n  },\n```\n> 注意：`navigator.onLine` 只会在设备未连接到局域网或路由器时返回 `false`，其他情况下均返回 `true`。也就是说，设备连接上路由器后，即使这个路由器没联通网络， `navigator.onLine`仍然返回 `true`。\n### 5. 浏览器活跃窗口监听: window.onblur & window.onfocus\n\n**定义：**\n\n这两个 `API` 分别表示窗口失去焦点和窗口处于活跃状态。\n\n> 浏览其他窗口、浏览器最小化、点击其他程序等，`window.onblur` 事件就会触发;  回到该窗口，`window.onfocus` 事件就会触发。\n\n**使用：**\n\n```javascript\n  mounted() {\n    window.addEventListener('blur', this.doFlashTitle, true);\n    window.addEventListener('focus', _ => {\n      clearInterval(this.timer);\n      document.title = '微信网页版';\n    }, true);\n  },\n  methods: {\n    //浏览器活跃窗口监听\n    doFlashTitle()  {\n      this.timer  =  setInterval(_ =>  {\n        if (!this.flashFlag)  {\n          document.title = \"微信网页版\";\n        } else {\n          document.title = `微信（${this.infoNum}）`;\n        }\n        this.flashFlag = !this.flashFlag\n      },  500)\n    },\n  },\n```\n### 6. 全屏 API（Fullscreen API）\n\n**定义：**\n\n这个 `API` 可以使你所打开的页面全屏展示。\n\n**使用：**\n\n> Element.requestFullscreen() 方法用于发出异步请求使元素进入全屏模式。\n\n调用此 `API` 并不能保证元素一定能够进入全屏模式。如果元素被允许进入全屏幕模式，document 对象会收到一个 `fullscreenchange` 事件，通知调用者当前元素已经进入全屏模式。如果全屏请求不被许可，则会收到一个 `fullscreenerror` 事件。\n当进入/退出全屏模式时,会触发 `fullscreenchange` 事件。你可以在监听这个事件，做你想做的事。\n\n```javascript\n  //打开、关闭全屏 \n  fullScreenFun()  {\n    let fullscreenEnabled = document.fullscreenEnabled ||\n    document.mozFullScreenEnabled ||\n    document.webkitFullscreenEnabled ||\n    document.msFullscreenEnabled;\n    if (fullscreenEnabled) {\n      let de = document.documentElement;\n      if (this.fullScreenInfo === '打开全屏') {\n        if (de.requestFullscreen) {\n          de.requestFullscreen();\n        } else if (de.mozRequestFullScreen) {\n          de.mozRequestFullScreen();\n        } else if (de.webkitRequestFullScreen) {\n          de.webkitRequestFullScreen();\n        }\n        this.fullScreenInfo = '退出全屏'\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        }\n        this.fullScreenInfo = '打开全屏'\n      }\n    } else {\n      this.fullScreenInfo = '浏览器当前不能全屏';\n    }\n  },\n```\n\n### 1. 媒体查询\n\n`CSS3`媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n#### 何选择屏幕大小分割点\n\n如何确定媒体查询的分割点也是一个开发中会遇到的问题，下面是市场上的移动设备和电脑屏幕分辨率的分布情况，可以发现不同品牌和型号的设备屏幕分辨率一般都不一样。\n[The Ultimate Guide To iPhone Resolutions，可点击](https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions)\n\n[全球屏幕分辨率统计2018年4月 - 2019年4月，可点击](http://gs.statcounter.com/screen-resolution-stats#monthly-201804-201904-bar)\n\n如果我们选择`600px`,`900px`,`1200px`,`1800px`作为分割点，可以适配到常见的14个机型。\n当然这只是其中的一种分割方案，不一定满足项目中的实际需求，我们可以先用跨度大的分割点进行分割，如果出现不适配的情况可以再根据实际情况增加新的分割点。\n\n#### 移动优先 OR PC优先\n\n不管是移动优先还是PC优先，都是依据当随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式。因此，移动端优先首先使用的是`min-width`，PC端优先使用的`max-width`。\n\n### 2.百分比布局\n\n通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果。Bootstrap里面的栅格系统就是利用百分比来定义元素的宽高，`CSS3`支持最大最小高，可以将百分比和`max(min)`一起结合使用来定义元素在不同设备下的宽高。\n\n但是我们必须要弄清楚css中子元素的百分比到底是相对谁的百分比。直接上结论吧：\n\n子元素的`height`或`width`中使用百分比，是相对于子元素的直接父元素，`width`相对于父元素的`width`，`height`相对于父元素的`height`；子元素的`top`和`bottom`如果设置百分比，则相对于直接非`static`定位(默认定位)的父元素的高度，同样子元素的`left`和`right`如果设置百分比，则相对于直接非`static`定位(默认定位的)父元素的宽度；子元素的`padding`如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的`width`，而与父元素的`height`无关。跟`padding`一样，`margin`也是如此，子元素的`margin`如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的`width`；`border-radius`不一样，如果设置`border-radius`为百分比，则是相对于自身的宽度，除了`border-radius`外，还有比如`translate`、`background-size`等都是相对于自身的；\n\n### 3.rem布局\n\n`REM`是`CSS3`新增的单位，并且移动端的支持度很高，Android2.x+,ios5+都支持。`rem`单位都是相对于根元素html的`font-size`来决定大小的,根元素的`font-size`相当于提供了一个基准，当页面的size发生变化时，只需要改变`font-size`的值，那么以`rem`为固定单位的元素的大小也会发生响应的变化。 因此，如果通过`rem`来实现响应式的布局，只需要根据视图容器的大小，动态的改变`font-size`即可（而`em`是相对于父元素的）\n\n### 4.视口单位\n\n`css3`中引入了一个新的单位`vw/vh`，与视图窗口有关，`vw`表示相对于视图窗口的宽度，`vh`表示相对于视图窗口高度，除了`vw`和`vh`外，还有`vmin`和`vmax`两个相关的单位。各个单位具体的含义如下：\n\n| 单位 | 含义 |\n| --- | --- |\n| vw | 相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw |\n| vh | 相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh |\n| vmin | vw和vh中的较小值 |\n| vmax | vw和vh中的较大值 |\n\n**参考文章：**\n\n[八叉树：前端响应式布局原理与方案](https://juejin.im/post/5caaa230e51d452b672f9703)\n\n[张鑫旭：设备像素比devicePixelRatio简单介绍](https://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/)\n\n[颜海镜：Rem布局的原理解析](https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/)\n\n### 安装postcss插件\n\n#### postcss-import\n\n[`postcss-import`](https://github.com/postcss/postcss-import)相关配置可以[点击这里](https://github.com/postcss/postcss-import)。目前使用的是默认配置。只在`postcss.config.js`文件中引入了该插件。\n\n`postcss-import`主要功有是解决`@import`引入路径问题。使用这个插件，可以让你很轻易的使用本地文件、`node_modules`或者`web_modules`的文件。这个插件配合[`postcss-url`](https://github.com/postcss/postcss-url)让你引入文件变得更轻松。\n\n#### postcss-url\n\n[`postcss-url`](https://github.com/postcss/postcss-url)相关配置可以点击[这里](https://github.com/postcss/postcss-url)。该插件主要用来处理文件，比如图片文件、字体文件等引用路径的处理。\n\n在Vue项目中，[`vue-loader`](https://github.com/vuejs/vue-loader)已具有类似的功能，只需要配置中将`vue-loader`配置进去。\n\n#### autoprefixer\n\n[`autoprefixer`](https://github.com/postcss/autoprefixer)插件是用来自动处理浏览器前缀的一个插件。如果你配置了[`postcss-cssnext`](https://github.com/MoOx/postcss-cssnext)，其中就已具备了`autoprefixer`的功能。在配置的时候，未显示的配置相关参数的话，表示使用的是[Browserslist](https://github.com/ai/browserslist)指定的列表参数，你也可以像这样来指定`last 2 versions` 或者 `> 5%`。\n\n### 其他插件\n- [postcss-aspect-ratio-mini](https://github.com/yisibl/postcss-aspect-ratio-mini)\n- [postcss-px-to-viewport](https://github.com/evrone/postcss-px-to-viewport)\n- [postcss-write-svg](https://github.com/jonathantneal/postcss-write-svg)\n- [postcss-cssnext](https://github.com/MoOx/postcss-cssnext)\n- [cssnano](https://github.com/ben-eb/cssnano)\n- ~~[postcss-viewport-units](https://github.com/springuper/postcss-viewport-units)~~ 2018-11-02：经过一段时间项目的验证，大漠团队已经开始不引用Polyfill\n\n要使用这几个插件，先要进行安装：\n\n```javascript\n//依赖太多，故分开显示\nnpm i postcss-import postcss-url autoprefixer cssnano cssnano-preset-advanced -D\nnpm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext -D\n```\n#### 接下来在`postcss.config.js`文件对新安装的postcss插件进行配置\n\n```javascript\n  module.exports  =  {\n    plugins:  {\n      \"postcss-import\":  {},\n      \"postcss-url\":  {},\n      \"postcss-aspect-ratio-mini\":  {},\n      \"postcss-write-svg\":  {  utf8:  false  },\n      \"postcss-cssnext\":  {},//由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false\n      \"postcss-px-to-viewport\":  {\n        viewportWidth:  750,  // 视窗的宽度，对应的是我们设计稿的宽度，一般是750\n        viewportHeight:  1334,  // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置\n        unitPrecision:  3,  // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）\n        viewportUnit:  'vw',  // 指定需要转换成的视窗单位，建议使用vw\n        selectorBlackList:  ['.ignore',  '.hairlines'],  // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名\n        minPixelValue:  1,  // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值\n        mediaQuery:  false  // 允许在媒体查询中转换`px`\n      },\n      \"cssnano\":  {\n        preset:  \"advanced\",\n        autoprefixer:  false,\n        \"postcss-zindex\":  false\n      },\n      // \"autoprefixer\": { browsers: [\"> 1%\", \"ie > 8\", 'last 5 version'] },\n      //移动端项目开启此插件 将px转为rem\n      // \"postcss-px2rem\":{\n      // remUnit:'75'\n      // }\n    },\n  };\n```\n\n#### postcss-write-svg\n\n\n[`postcss-write-svg`](https://github.com/jonathantneal/postcss-write-svg)插件主要用来处理移动端`1px`的解决方案。该插件主要使用的是`border-image`和`background`来做`1px`的相关处理。比如：\n\n```css\n  @svg 1px-border {\n      height: 2px;\n      @rect {\n          fill: var(--color, black);\n          width: 100%;\n          height: 50%;\n      }\n  }\n  .example {\n      border: 1px solid transparent;\n      border-image: svg(1px-border param(--color #00b1ff)) 2 2 stretch;\n  }\n```\n\n编译出来的CSS:\n\n```css\n  .example {\n      border: 1px solid transparent;\n      border-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='2px'%3E%3Crect fill='%2300b1ff' width='100%25' height='50%25'/%3E%3C/svg%3E\") 2 2 stretch;\n  } \n```\n\n上面演示的是使用`border-image`方式，除此之外还可以使用`background-image`来实现。比如：\n\n```css\n  @svg square {\n      @rect {\n          fill: var(--color, black);\n          width: 100%;\n          height: 100%;\n      }\n  }\n  #example {\n      background: white svg(square param(--color #00b1ff));\n  }\n```\n\n编译出来就是：\n\n```css\n  #example {\n      background: white url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Crect fill='%2300b1ff' width='100%25' height='100%25'/%3E%3C/svg%3E\");\n  } \n\n```\n\n> **特别声明：** 由于有一些低端机对`border-image`支持度不够友好，个人建议你使用`background-image`的这个方案。\n\n### 相关链接\n> 知识付费模式开启，需要购买会员才可观看呦（2019-05-22购买，支付宝订单号：190522163630182750）\n\n[如何在Vue项目中使用vw实现移动端适配](https://www.w3cplus.com/mobile/vw-layout-in-vue.html)\n\n### 阿里红利真的吃完了\n\n![gougu.jpg](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/gougu_1558579159402.jpg)\n\n![ruanyifeng.png](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/ruanyifeng_1558579181115.png)\n\n![xuqiucengci.jpg](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/xuqiucengci_1558579197535.jpg)\n\n> 阿里红利吃完了？还是化身为神探究孔孟庄了？自行体会！\n\n### 圣诞彩蛋事件\n\n![caidan.jpg](https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/caidan_1558579502232.jpg)\n\n### 响应式开发中合理选定CSS媒体查询分割点\n\n```css\n\t/**\n\t\t使用sass minxin实现的针对不同屏幕的函数\n\t\t参数:\n\t\tphone-only:手机屏幕\n\t\ttablet-portrait-up:平板竖屏及更大屏幕\n\t\ttablet-portait-only:仅限平板竖屏\n\t\ttablet-landscape-up:平板横屏及更大屏幕\n\t\ttablet-landscape-only 仅限平板横屏\n\t\tdesktop-up:PC及更大屏幕\n\t\tdesktop-only:仅限PC\n\t\tbig-desktop-up 大号PC\n\t**/\n\t@mixin for-size($range) {\n\t\t$phone-upper-boundary: 600px;\n\t\t$tablet-portrait-upper-boundary: 900px;\n\t\t$tablet-landscape-upper-boundary: 1200px;\n\t\t$desktop-upper-boundary: 1800px;\n\n\t\t@if $range == phone-only {\n\t\t\t@media (max-width: $phone-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == tablet-portrait-up {\n\t\t\t@media (min-width: $phone-upper-boundary) { @content; }\n\t\t} @else if $range == tablet-portait-only {\n\t\t\t@media (min-width: $phone-upper-boundary) and (max-width: $tablet-portrait-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == tablet-landscape-up {\n\t\t\t@media (min-width: $tablet-landscape-upper-boundary) { @content; }\n\t\t} @else if $range == tablet-landscape-only {\n\t\t\t@media (min-width: $tablet-portrait-upper-boundary) and (max-width: $tablet-landscape-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == desktop-up {\n\t\t\t@media (min-width: $tablet-landscape-upper-boundary) { @content; }\n\t\t} @else if $range == desktop-only {\n\t\t\t@media (min-width: $tablet-landscape-upper-boundary) and (max-width: $desktop-upper-boundary - 1px) { @content; }\n\t\t} @else if $range == big-desktop-up {\n\t\t\t@media (min-width: $desktop-upper-boundary) { @content; }\n\t\t}\n\t}\n\n\t.test {\n\t\tpadding: 10px;\n\t\t\n\t\t@include for-size(desktop-up) {\n\t\t\tpadding: 20px;\n\t\t}\n\t}\n```\n\n[响应式开发中合理选定CSS媒体查询分割点](https://segmentfault.com/a/1190000007567739)","published":1,"updated":"2024-10-09T10:45:07.382Z","_id":"cm21m7rq400032y9k27x8bkru","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h2><h3 id=\"viewport-视口-可视区窗口\"><a href=\"#viewport-视口-可视区窗口\" class=\"headerlink\" title=\"viewport 视口(可视区窗口)\"></a>viewport 视口(可视区窗口)</h3><pre><code>    默认不设置viewport一般可视区宽度在移动端是980\n    \n    width  可视区的宽度 (number||device-width)\n    \n    user-scalable 是否允许用户缩放 (yes||no) iOS10无效\n    \n    initial-scale 初始缩放比例\n    \n    minimum-scale 最小缩放比例\n    \n    maximum-scale 最大缩放比例\n</code></pre>\n<h3 id=\"设备像素比-device-pixel-ratio\"><a href=\"#设备像素比-device-pixel-ratio\" class=\"headerlink\" title=\"设备像素比(device pixel ratio)\"></a>设备像素比(device pixel ratio)</h3><pre><code>    设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：\n    \n        设备像素比 ＝ 物理像素 / 设备独立像素\n        \n    在JavaScript中，可以通过window.devicePixelRatio获取到当前设备的dpr\n</code></pre>\n<h3 id=\"CSS单位rem\"><a href=\"#CSS单位rem\" class=\"headerlink\" title=\"CSS单位rem\"></a>CSS单位rem</h3><pre><code>    在W3C规范中是这样描述rem的:\n    \n    font size of the root element.\n    \n    简单的理解，rem就是相对于根元素&lt;html&gt;的font-size来做计算。\n    而我们的方案中使用rem单位，是能轻易的根据&lt;html&gt;的font-size计算出元素的盒模型大小。\n</code></pre>\n<h3 id=\"meta设置\"><a href=\"#meta设置\" class=\"headerlink\" title=\"meta设置\"></a>meta设置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--QQ强制竖屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;x5-orientation&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;portrait&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--QQ全屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;x5-fullscreen&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--UC强制竖屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screen-orientation&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;portrait&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--UC全屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;full-screen&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--禁止识别电话号码和邮箱地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no, email=no&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--页面适合在pc和mobile上进行浏览--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;applicable-device&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;pc, mobile&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--针对Apple是否启动WebApp功能--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Apple顶部导航栏颜色--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t\thref=&quot;tel:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t\thref=&quot;mailto:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>13888888888<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;tel:18888888888&quot;</span>&gt;</span>请拨打电话18888888888<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:zyh@qq.com&quot;</span>&gt;</span>请发送邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认样式设置\"><a href=\"#默认样式设置\" class=\"headerlink\" title=\"默认样式设置\"></a>默认样式设置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/*默认字体设置*/</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"attribute\">font-family</span>: Helvetica;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"comment\">/*禁止文字缩放*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-<span class=\"selector-tag\">text</span>-size-adjust: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"comment\">/*选中文字设置*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-user-<span class=\"selector-tag\">select</span>: none; </span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/*清除点击阴影*/</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"comment\">/*-webkit-tap-highlight-color: transparent*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/*消除圆角按钮（针对iOS系统）*/</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-<span class=\"attribute\">appearance</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;按钮&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态获取像素比（取自–饿了么移动端）\"><a href=\"#动态获取像素比（取自–饿了么移动端）\" class=\"headerlink\" title=\"动态获取像素比（取自–饿了么移动端）\"></a>动态获取像素比（取自–饿了么移动端）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\">e, t</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = n.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">width</span>;</span><br><span class=\"line\">\t\tt / d &gt; <span class=\"number\">540</span> &amp;&amp; (t = <span class=\"number\">540</span> * d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> i = t / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tn.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = i + <span class=\"string\">&quot;px&quot;</span>, p.<span class=\"property\">rem</span> = e.<span class=\"property\">rem</span> = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a, r = e.<span class=\"property\">document</span>,</span><br><span class=\"line\">\t\tn = r.<span class=\"property\">documentElement</span>,</span><br><span class=\"line\">\t\to = r.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>),</span><br><span class=\"line\">\t\tl = r.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;meta[name=&quot;flexible&quot;]&#x27;</span>),</span><br><span class=\"line\">\t\tm = r.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;meta[name=&quot;flexible-in-x5&quot;]&#x27;</span>),</span><br><span class=\"line\">\t\ts = !<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\td = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tc = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tp = t.<span class=\"property\">flexible</span> || (t.<span class=\"property\">flexible</span> = &#123;&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (o) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;将根据已有的meta标签来设置缩放比例&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u = o.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;content&quot;</span>).<span class=\"title function_\">match</span>(<span class=\"regexp\">/initial\\-scale=([\\d\\.]+)/</span>);</span><br><span class=\"line\">\t\tu &amp;&amp; (c = <span class=\"built_in\">parseFloat</span>(u[<span class=\"number\">1</span>]), d = <span class=\"built_in\">parseInt</span>(<span class=\"number\">1</span> / c))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> f = l.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;content&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (f) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> v = f.<span class=\"title function_\">match</span>(<span class=\"regexp\">/initial\\-dpr=([\\d\\.]+)/</span>),</span><br><span class=\"line\">\t\t\t\th = f.<span class=\"title function_\">match</span>(<span class=\"regexp\">/maximum\\-dpr=([\\d\\.]+)/</span>);</span><br><span class=\"line\">\t\t\tv &amp;&amp; (d = <span class=\"built_in\">parseFloat</span>(v[<span class=\"number\">1</span>]), c = <span class=\"built_in\">parseFloat</span>((<span class=\"number\">1</span> / d).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>))), h &amp;&amp; (d = <span class=\"built_in\">parseFloat</span>(h[<span class=\"number\">1</span>]), c = <span class=\"built_in\">parseFloat</span>((<span class=\"number\">1</span> / d).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>)))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &amp;&amp; (s = <span class=\"string\">&quot;false&quot;</span> !== m.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;content&quot;</span>)), !d &amp;&amp; !c) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x = (e.<span class=\"property\">navigator</span>.<span class=\"property\">appVersion</span>.<span class=\"title function_\">match</span>(<span class=\"regexp\">/android/gi</span>), e.<span class=\"property\">chrome</span>),</span><br><span class=\"line\">\t\t\tg = e.<span class=\"property\">navigator</span>.<span class=\"property\">appVersion</span>.<span class=\"title function_\">match</span>(<span class=\"regexp\">/iphone/gi</span>),</span><br><span class=\"line\">\t\t\tb = e.<span class=\"property\">devicePixelRatio</span>,</span><br><span class=\"line\">\t\t\tw = <span class=\"regexp\">/TBS\\/\\d+/</span>.<span class=\"title function_\">test</span>(e.<span class=\"property\">navigator</span>.<span class=\"property\">userAgent</span>),</span><br><span class=\"line\">\t\t\ty = !<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\ty = <span class=\"string\">&quot;true&quot;</span> === <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;IN_FLEXIBLE_WHITE_LIST&quot;</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\ty = !<span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\td = g || x || w &amp;&amp; s &amp;&amp; y ? b &gt;= <span class=\"number\">3</span> &amp;&amp; (!d || d &gt;= <span class=\"number\">3</span>) ? <span class=\"number\">3</span> : b &gt;= <span class=\"number\">2</span> &amp;&amp; (!d || d &gt;= <span class=\"number\">2</span>) ? <span class=\"number\">2</span> : <span class=\"number\">1</span> : <span class=\"number\">1</span>, c = <span class=\"number\">1</span> / d</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;data-dpr&quot;</span>, d), !o) <span class=\"keyword\">if</span> (o = r.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;meta&quot;</span>), o.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;viewport&quot;</span>), o.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;content&quot;</span>, <span class=\"string\">&quot;initial-scale=&quot;</span> + c + <span class=\"string\">&quot;, maximum-scale=&quot;</span> + c + <span class=\"string\">&quot;, minimum-scale=&quot;</span> + c + <span class=\"string\">&quot;, user-scalable=no&quot;</span>), n.<span class=\"property\">firstElementChild</span>) n.<span class=\"property\">firstElementChild</span>.<span class=\"title function_\">appendChild</span>(o);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> E = r.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">\t\tE.<span class=\"title function_\">appendChild</span>(o), r.<span class=\"title function_\">write</span>(E.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clearTimeout</span>(a), a = <span class=\"built_in\">setTimeout</span>(i, <span class=\"number\">300</span>)</span><br><span class=\"line\">\t&#125;, !<span class=\"number\">1</span>), e.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;pageshow&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\te.<span class=\"property\">persisted</span> &amp;&amp; (<span class=\"built_in\">clearTimeout</span>(a), a = <span class=\"built_in\">setTimeout</span>(i, <span class=\"number\">300</span>))</span><br><span class=\"line\">\t&#125;, !<span class=\"number\">1</span>), <span class=\"string\">&quot;complete&quot;</span> === r.<span class=\"property\">readyState</span> ? r.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"number\">12</span> * d + <span class=\"string\">&quot;px&quot;</span> : r.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\tr.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"number\">12</span> * d + <span class=\"string\">&quot;px&quot;</span></span><br><span class=\"line\">\t&#125;, !<span class=\"number\">1</span>), <span class=\"title function_\">i</span>(), p.<span class=\"property\">dpr</span> = e.<span class=\"property\">dpr</span> = d, p.<span class=\"property\">refreshRem</span> = i, p.<span class=\"property\">rem2px</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = <span class=\"built_in\">parseFloat</span>(e) * <span class=\"variable language_\">this</span>.<span class=\"property\">rem</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;string&quot;</span> == <span class=\"keyword\">typeof</span> e &amp;&amp; e.<span class=\"title function_\">match</span>(<span class=\"regexp\">/rem$/</span>) &amp;&amp; (t += <span class=\"string\">&quot;px&quot;</span>), t</span><br><span class=\"line\">\t&#125;, p.<span class=\"property\">px2rem</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = <span class=\"built_in\">parseFloat</span>(e) / <span class=\"variable language_\">this</span>.<span class=\"property\">rem</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;string&quot;</span> == <span class=\"keyword\">typeof</span> e &amp;&amp; e.<span class=\"title function_\">match</span>(<span class=\"regexp\">/px$/</span>) &amp;&amp; (t += <span class=\"string\">&quot;rem&quot;</span>), t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">lib</span> || (<span class=\"variable language_\">window</span>.<span class=\"property\">lib</span> = &#123;&#125;))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"像素比简单设置\"><a href=\"#像素比简单设置\" class=\"headerlink\" title=\"像素比简单设置\"></a>像素比简单设置</h3><pre><code>    //获取像素比\n    var PixelRatio = 1 / window.devicePixelRatio;\n    //写入meta\n    document.write(&#39;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=&#39;+PixelRatio+&#39;,minimum-scale=&#39;+PixelRatio+&#39;,maximum-scale=&#39;+PixelRatio+&#39;,user-scalable=no&quot; /&gt;&#39;);\n    //获取html元素\n    var html = document.getElementsByTagName(&#39;html&#39;)[0];\n    //获取html（屏幕）的宽度\n    var pageWidth = html.getBoundingClientRect().width;\n    //获取html的字号\n    html.style.fontSize = pageWidth / 10 + &#39;px&#39;;\n</code></pre>\n<h3 id=\"弹性盒模型\"><a href=\"#弹性盒模型\" class=\"headerlink\" title=\"弹性盒模型\"></a>弹性盒模型</h3><blockquote>\n<p>主轴和侧轴的样式都需要加在元素的父级，而元素的位置设置只需要加在自身即可（别忘了父级要加display: flex;）</p>\n</blockquote>\n<pre><code>    主轴方向设置\n    \n        /*新版弹性盒模型*/\n        display: flex;\n        \n        /*设置主轴方向为水平方向*/\n        /*flex-direction: row;*/\n        \n        /*设置主轴方向为垂直方向*/\n        /*flex-direction: column;*/\n        \n        \n        /*老版弹性盒模型*/\n        display: -webkit-box;\n        \n        /*设置主轴方向为水平方向*/\n        -webkit-box-orient: horizontal;\n        \n        /*设置主轴方向为垂直方向*/\n        /*-webkit-box-orient: vertical;*/\n    \n    主轴上元素排列方向\n    \n        /*新版弹性盒模型*/\n        /*display: flex;*/\n        \n        /*设置主轴方向为水平,元素排列为反序*/\n        /*flex-direction: row-reverse;*/\n        \n        /*设置主轴方向为垂直,元素排列为反序*/\n        /*flex-direction: column-reverse;*/\n        \n        \n        /*老版弹性盒模型*/\n        display: -webkit-box;\n        \n        /*元素在主轴上排列为反序*/\n        /*-webkit-box-direction: reverse;*/\n        \n        /*元素在主轴上排列为正序*/\n        /*-webkit-box-direction: normal;*/\n    \n    主轴上富裕空间管理\n    \n        /*新版弹性盒模型*/\n        display: flex;\n        \n        /*元素在主轴开始位置 ，富裕空间在主轴的结束位置*/\n        /*justify-content: flex-start;*/\n        \n        /*元素在主轴结束位置，富裕空间在主轴开始位置*/\n        /*justify-content: flex-end;*/\n        \n        /*元素在主轴中间,富裕空间在主轴两侧*/\n        /*justify-content: center;*/\n        \n        /*富裕空间平均分配在每两个元素之间*/\n        /*justify-content: space-between;*/\n        \n        /*富裕空间平均分配在每个元素两侧*/\n        /*justify-content: space-around;*/\n        \n        \n        /*老版弹性盒模型*/\n        display: -webkit-box;\n        \n        /*元素在主轴的开始位置,富裕空间在主轴的结束位置*/\n        /*-webkit-box-pack: start;*/\n        \n        /*元素在主轴结束位置，富裕空间在主轴开始位置*/\n        /*-webkit-box-pack: end;*/\n        \n        /*元素在主轴中间,富裕空间在主轴两侧*/\n        /*-webkit-box-pack: center;*/\n        \n        /*富裕空间平均分配在每两个元素之间*/\n        /*-webkit-box-pack: justify;*/\n    \n    侧轴上富裕空间管理\n    \n        /*新版弹性盒模型*/\n        /*display: flex;*/\n        \n        /*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n        /*align-items: flex-start;*/\n        \n        /*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n        /*align-items: flex-end;*/\n        \n        /*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n        /*align-items: center;*/\n        \n        /*根据侧轴方向上文字的基线对齐*/\n        /*align-items: baseline;*/\n        \n        \n        /*老版弹性盒模型*/\n        /*display: -webkit-box;*/\n        \n        /*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n        /*-webkit-box-align: start;*/\n        \n        /*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n        /*-webkit-box-align: end;*/\n        \n        /*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n        /*-webkit-box-align: center;*/\n    \n    元素弹性空间\n    \n        /*新版*/\n        /*flex-grow: 1;*/\n        \n        /*老版*/\n        -webkit-box-flex:1;\n    \n    元素具体位置设置\n    \n        /* 数值越小越靠前，可以接受0或者负值 */\n        /*order:5;*/\n        \n        /* 数值越小越靠前， 最小值默认处理为1*/\n        /*-webkit-box-ordinal-group:-2;*/\n</code></pre>\n<h3 id=\"移动端事件\"><a href=\"#移动端事件\" class=\"headerlink\" title=\"移动端事件\"></a>移动端事件</h3><pre><code>    手指按下：\n        ontouchstart\n        \n    手指移动：\n        ontouchmove\n        \n    手指抬起：\n        ontouchend\n        \n    注意：\n        在移动端开发的时候，浏览器的模拟器时好时坏，\n        一般不用on的方式绑定事件函数，要用事件绑定的方式(addEventListener)\n    \n    移动端click屏幕产生200-300ms的延迟响应\n    \n        移动设备上的web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。\n    \n    以下是历史原因：\n    \n        2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，\n        使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，\n        你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，\n        你就能看清该部分放大后的内容，再次双击后能回到原始状态。\n        \n        双击缩放是指用手指在屏幕上快速点击两次，iOS自带的 Safari浏览器会将网页缩放至原始比例。\n        \n        原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，\n        此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，\n        所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，\n        则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，\n        转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。\n        这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，\n        对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。\n</code></pre>\n<h3 id=\"触摸事件的响应顺序\"><a href=\"#触摸事件的响应顺序\" class=\"headerlink\" title=\"触摸事件的响应顺序\"></a>触摸事件的响应顺序</h3><pre><code>    1、ontouchstart \n    2、ontouchmove \n    3、ontouchend \n    4、onclick\n    \n    解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应\n</code></pre>\n<h3 id=\"移动端的点透\"><a href=\"#移动端的点透\" class=\"headerlink\" title=\"移动端的点透\"></a>移动端的点透</h3><pre><code>    当上层元素发生点击的时候，下层元素也有点击（焦点）特性，\n    在300ms之后，如果上层元素消失或者隐藏，目标点就会“漂移”到下层元素身上，就会触发点击行为。\n        \n    解决：\n    \n        1.下层不要使用有点击（焦点）特性的元素\n        \n        2.阻止pc事件\n</code></pre>\n<h3 id=\"移动端阻止PC事件优点\"><a href=\"#移动端阻止PC事件优点\" class=\"headerlink\" title=\"移动端阻止PC事件优点\"></a>移动端阻止PC事件优点</h3><pre><code>    document.addEventListener(&#39;touchstart&#39;,function(ev)&#123;\n        ev.preventDefault();\n    &#125;);\n    \n    \n    1.IOS10下设置meta禁止用户缩放是不可行的。（使用阻止pc事件就可以在IOS10下禁止用户缩放）\n        \n    2.解决IOS10下溢出隐藏的问题。\n    \n    3.禁止系统默认的滚动条、阻止橡皮筋效果\n    \n    4.禁止长按选中文字、选中图片、系统默认菜单\n    \n    5.解决点透问题\n    \n    6.也阻止了焦点元素的焦点行为(要正常使用：ev.stopPropagation()阻止冒泡)\n</code></pre>\n<h3 id=\"移动端事件对象\"><a href=\"#移动端事件对象\" class=\"headerlink\" title=\"移动端事件对象\"></a>移动端事件对象</h3><pre><code>    当给某个元素加上了事件绑定函数之后，事件函数默认的第一个参数就是事件对象\n    \n    事件对象：\n        当用户在浏览器下触发了某个行为，事件对象会记录用户操作时一些细节信息。\n    \n    touches 当前位于*屏幕*上的所有手指的一个列表\n    \n    targetTouches 位于当前DOM元素上的手指的一个列表\n    \n    changedTouches  涉及当前事件的手指的一个列表\n    \n    div.addEventListener(&#39;touchmove&#39;,start);\n    function start(ev)&#123;\n        //this.innerHTML = ev.touches.length;\n        //this.innerHTML = ev.targetTouches.length;\n        this.innerHTML = ev.changedTouches.length;\n    &#125;\n</code></pre>\n<h3 id=\"移动端input无法获取焦点的问题\"><a href=\"#移动端input无法获取焦点的问题\" class=\"headerlink\" title=\"移动端input无法获取焦点的问题\"></a>移动端input无法获取焦点的问题</h3><p>在移动端开发中，我们有时有针对性的写一些特殊的重置，比如：</p>\n<pre><code>    * &#123;\n        -webkit-touch-callout: none;\n        //阻止长按图片之后呼出菜单提示复制的行为\n        \n        -webkit-text-size-adjust: none;\n        //禁用Webkit内核浏览器的文字大小调整功能\n        \n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n        //避免点击a标签或者注册了click事件的元素时产生高亮\n        \n        -webkit-user-select: none;\n        //禁止用户进行复制、选择\n    &#125;\n    \n    其中，-webkit-user-select: none;会产生一些问题，这是webkit内核浏览器下的一个bug\n    阻止了用户的选择内容行为，会导致一些“内容可编辑”标签无法正常使用，比如input、textarea\n    \n    如果网站不需要阻止用户的选择内容的行为就可以使用如下样式：\n    \n        * &#123;\n            -webkit-user-select: text;\n            -user-select: text;\n        &#125;\n        \n        另一种方式：\n        *: not(input, textarea) &#123;\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n        &#125;\n        \n    user-select可能会导致与contenteditable = &quot;true&quot;元素的问题，以便更好的使用，所以下面的CSS也要加上\n    \n        HTML5全局 contenteditable属性\n            contenteditable 属性规定是否可编辑元素的内容\n    \n        [contenteditable=&quot;true&quot;] , input, textarea &#123;\n            -webkit-user-select: auto !important;\n            -khtml-user-select: auto !important;\n            -moz-user-select: auto !important;\n            -ms-user-select: auto !important;\n            -o-user-select: auto !important;\n            user-select: auto !important;\n        &#125;\n</code></pre>\n<h3 id=\"表单输入框placeholder的颜色值\"><a href=\"#表单输入框placeholder的颜色值\" class=\"headerlink\" title=\"表单输入框placeholder的颜色值\"></a>表单输入框placeholder的颜色值</h3><pre><code>    input::-webkit-input-placeholder&#123;color:#ccc;&#125;\n    input:focus::-webkit-input-placeholder&#123;color:#ddd;&#125;\n</code></pre>\n<h3 id=\"模拟按钮hover效果\"><a href=\"#模拟按钮hover效果\" class=\"headerlink\" title=\"模拟按钮hover效果\"></a>模拟按钮hover效果</h3><pre><code>    直接在body上添加ontouchstart，同样可激活移动端css的active效果\n    移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，\n    使用css的hover并不能满足我们的需求，还好国外有个激活移动端css的active效果\n</code></pre>\n<blockquote>\n<p>第一种</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">a</span>&#123;-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">border-radius</span>:<span class=\"number\">4px</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">18px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;<span class=\"attribute\">background-color</span>: <span class=\"number\">#4185F3</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span><span class=\"selector-pseudo\">:active</span>&#123;<span class=\"attribute\">background-color</span>: <span class=\"number\">#357AE8</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ontouchstart</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-blue&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">a</span>&#123;-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">border-radius</span>:<span class=\"number\">4px</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">18px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;<span class=\"attribute\">background-color</span>: <span class=\"number\">#4185F3</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span><span class=\"selector-pseudo\">:active</span>&#123;<span class=\"attribute\">background-color</span>: <span class=\"number\">#357AE8</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-blue&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;touchstart&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;, <span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>兼容性ios5+、部分android 4+、winphone 8</p>\n</blockquote>\n<blockquote>\n<p>第三种</p>\n</blockquote>\n<blockquote>\n<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">a</span>&#123;-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">border-radius</span>:<span class=\"number\">4px</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">18px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;<span class=\"attribute\">background-color</span>: <span class=\"number\">#4185F3</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue-on</span>&#123;<span class=\"attribute\">background-color</span>: <span class=\"number\">#357AE8</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-blue&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> btnBlue = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.btn-blue&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">btnBlue.<span class=\"property\">ontouchstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = <span class=\"string\">&quot;btn-blue btn-blue-on&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">btnBlue.<span class=\"property\">ontouchend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = <span class=\"string\">&quot;btn-blue&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁止ios长按时不触发系统的菜单，禁止ios-android长按时下载图片\"><a href=\"#禁止ios长按时不触发系统的菜单，禁止ios-android长按时下载图片\" class=\"headerlink\" title=\"禁止ios长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片\"></a>禁止ios长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3><pre><code>    .css&#123;-webkit-touch-callout: none&#125;\n</code></pre>\n<h3 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h3><pre><code>    .css&#123;-webkit-user-select:none&#125;\n</code></pre>\n<h3 id=\"打电话发短信写邮件\"><a href=\"#打电话发短信写邮件\" class=\"headerlink\" title=\"打电话发短信写邮件\"></a>打电话发短信写邮件</h3><pre><code>    打电话\n    &lt;a href=&quot;tel:10086&quot;&gt;打电话给:10086&lt;/a&gt;\n    \n    发短信\n    &lt;a href=&quot;sms:10086&quot;&gt;发短信给:10086&lt;/a&gt;\n    \n    写邮件\n    &lt;a href=&quot;mailto:zyh@qq.com&quot;&gt;zyh@qq.com&lt;/a&gt;\n</code></pre>\n<h3 id=\"实现0-5px的线条\"><a href=\"#实现0-5px的线条\" class=\"headerlink\" title=\"实现0.5px的线条\"></a>实现0.5px的线条</h3><pre><code>    网络上有很多方法，如设置viewport，box-shawdow，border-image，background-image，transform:scale等，\n    本文只介绍一种觉得比较好用的方法，一来兼容性好，二来不依赖图片。\n    \n    transform:scale(x,y)\n    \n    通过css支持定义border或者height为.5px大的线条，在android设备中的无法显示出来，这里有个小技巧，\n    设置线条为1px，然后通过transform:scale(x,y)来缩放线条为原来的一半，可显示0.5px的线条。\n</code></pre>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>点5测试 - scale<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.line</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">1px</span> solid red</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125; </span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.scale</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span></span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.scale</span><span class=\"selector-pseudo\">:after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>,.<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>,.<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">transform-origin</span>: center bottom;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">transform-origin</span>: center bottom</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;line&quot;</span>&gt;</span>1px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>    </span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;scale&quot;</span>&gt;</span>0.5px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现0-5px的圆角边框\"><a href=\"#实现0-5px的圆角边框\" class=\"headerlink\" title=\"实现0.5px的圆角边框\"></a>实现0.5px的圆角边框</h3><pre><code>    原理：先定义1px的圆角边框，然后拉伸内容的宽度和高度为父级的2倍(边框厚度不变)，\n    然后再使用transform:scale(0.5)缩放为原来的0.5倍\n</code></pre>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>点5测试 - border-radius<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">padding</span>: <span class=\"number\">50px</span>;-webkit-touch-callout:none;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-attr\">[class*=<span class=\"string\">&quot;btn&quot;</span>]</span>&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#EDEDED</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#EDEDED</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn</span><span class=\"selector-pseudo\">:before</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">top</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">bottom</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">left</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">right</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-1&quot;</span>&gt;</span>1px border<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>.5px border<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS实现隐藏滚动条同时又可以滚动\"><a href=\"#CSS实现隐藏滚动条同时又可以滚动\" class=\"headerlink\" title=\"CSS实现隐藏滚动条同时又可以滚动\"></a>CSS实现隐藏滚动条同时又可以滚动</h3><pre><code>    移动端页面为了更接近原生的体验，是否可以隐藏滚动条，同时又保证页面可以滚动？\n    \n    使用 overflow:hidden 隐藏滚动条，但存在的问题是：页面或元素失去了滚动的特性。\n    由于只需要兼容移动浏览器（Chrome 和 Safari），于是想到了自定义滚动条的伪对象选择器\n    ::-webkit-scrollbar。\n    \n    应用如下 CSS 可以隐藏滚动条：\n        //.element就是指出现滚动条的元素\n        .element::-webkit-scrollbar &#123;display:none&#125;\n    \n    如果要兼容PC其他浏览器（IE、Firefox等），国外一位才人John Kurlak也研究出了一种办法。\n    在容器外面再嵌套一层 overflow:hidden内部内容再限制尺寸和外部嵌套层一样，就变相隐藏了。\n    \n    &lt;div class=&quot;outer-container&quot;&gt;\n        &lt;div class=&quot;inner-container&quot;&gt;\n            &lt;div class=&quot;content&quot;&gt;\n            \t......\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    .outer-container,.content &#123;\n        width: 200px; height: 200px;\n    &#125;\n    .outer-container &#123;\n        position: relative;\n        overflow: hidden;\n    &#125;\n    .inner-container &#123;\n        position: absolute; \n        left: 0;\n        overflow-x: hidden;\n        overflow-y: scroll;\n    &#125;\n     \n     /* for Chrome */\n    .inner-container::-webkit-scrollbar &#123;\n        display: none;\n    &#125;\n</code></pre>\n<h3 id=\"Rem布局原理\"><a href=\"#Rem布局原理\" class=\"headerlink\" title=\"Rem布局原理\"></a>Rem布局原理</h3><pre><code>    其实rem布局的本质是等比缩放，一般是基于宽度\n    \n    假设我们将屏幕宽度平均分成100份，每一份的宽度用x表示，x = 屏幕宽度 / 100，\n    如果将x作为单位，x前面的数值就代表屏幕宽度的百分比\n    \n    p &#123;width: 50x&#125; /* 屏幕宽度的50% */\n    \n    如果想要页面元素随着屏幕宽度等比变化，我们需要上面的x单位，不幸的是css中并没有这样的单位，\n    幸运的是在css中有rem，通过rem这个桥梁，可以实现神奇的x\n    \n    通过上面对rem的介绍，可以发现，如果子元素设置rem单位的属性，\n    通过更改html元素的字体大小，就可以让子元素实际大小发生变化\n    \n    html &#123;font-size: 16px&#125;\n    p &#123;width: 2rem&#125; /* 32px*/\n    \n    html &#123;font-size: 32px&#125;\n    p &#123;width: 2rem&#125; /*64px*/\n    \n    如果让html元素字体的大小，等于屏幕宽度的1/100，那1rem和1x就等价了\n    \n    html &#123;fons-size: width / 100&#125;\n    p &#123;width: 50rem&#125; /* 50rem = 50x = 屏幕宽度的50% */\n    \n    如何让html字体大小一直等于屏幕宽度的百分之一呢？ 可以通过js来设置，一般需要在页面dom ready、resize和屏幕旋转中设置\n    \n    document.documentElement.style.fontSize = document.documentElement.clientWidth / 100 + &#39;px&#39;;\n    \n    那么如何把UE图中的获取的像素单位的值，转换为已rem为单位的值呢？公式是元素宽度 / UE图宽度 * 100\n    \n    假设UE图尺寸是640px，UE图中的一个元素宽度是100px，根据公式100/640*100 = 15.625\n    \n    p &#123;width: 15.625rem&#125;\n</code></pre>\n<h3 id=\"比Rem更好的方案\"><a href=\"#比Rem更好的方案\" class=\"headerlink\" title=\"比Rem更好的方案\"></a>比Rem更好的方案</h3><pre><code>    上面提到想让页面元素随着页面宽度变化，需要一个新的单位x，x等于屏幕宽度的百分之一，css3带来了rem的同时，也带来了vw和vh\n    \n        vw —— 视口宽度的 1/100\n        vh —— 视口高度的 1/100\n        \n    聪明的你也许一经发现，这不就是单位x吗，没错根据定义可以发现1vw=1x，有了vw我们完全可以绕过rem这个中介了，\n    下面两种方案是等价的，可以看到vw比rem更简单\n    \n        /* rem方案 */\n        html &#123;fons-size: width / 100&#125;\n        p &#123;width: 15.625rem&#125;\n        \n        /* vw方案 */\n        p &#123;width: 15.625vw&#125;\n        vw还可以和rem方案结合，这样计算html字体大小就不需要用js了\n        \n        html &#123;fons-size: 1vw&#125; /* 1vw = width / 100 */\n        p &#123;width: 15.625rem&#125;\n        虽然vw各种优点，但是vw也有缺点，首先vw的兼容性不如rem好，使用之前要看下\n    \n    兼容性\tIOS\t安卓\n    rem\t4.1+\t2.1+\n    vw\t6.1+\t4.4+\n    另外，在使用弹性布局时，一般会限制最大宽度，比如在pc端查看我们的页面，此时vw就无法力不从心了，\n    因为除了width有max-width，其他单位都没有，而rem可以通过控制html根元素的font-size最大值，而轻松解决这个问题\n</code></pre>\n<h3 id=\"H5禁止手机虚拟键盘弹出\"><a href=\"#H5禁止手机虚拟键盘弹出\" class=\"headerlink\" title=\"H5禁止手机虚拟键盘弹出\"></a>H5禁止手机虚拟键盘弹出</h3><pre><code>    在移动端，input会默认触发手机的虚拟键盘，如何阻止手机虚拟键盘弹起呢？\n    目前我试过有两个方案，一个是给input添加readonly属性，\n    另一个就是在input事件处理方法前面添加一句document.activeElement.blur()\n    \n    readonly\n    \n        使用readonly方式来阻止虚拟键盘弹出应该是最简单最优雅的方式了。\n        readonly属性规定输入字段为只读。只读字段是不能修改的。\n        不过，用户仍然可以使用 tab键切换到该字段，还可以选中或拷贝其文本。\n        \n        值得一提的是它的取值，只要声明了readonly属性，不管取什么值都可以，\n        比如readonly=&quot;&quot;、readonly=&quot;readonly&quot;、readonly=&quot;abc&quot;都是一样的\n        \n        优点：简单\n        缺点：在iOS的Safari中无效（未做更多情况测试）\n    \n    document.activeElement.blur()\n    \n        这是个什么玩意儿？document.activeElement是一个Web API接口。\n        MDN上的解释是：它返回当前页面中获得焦点的元素，也就是说，如果此时用户按下了键盘上某个键，\n        会在该元素上触发键盘事件，该属性是只读的。\n    \n        document.activeElement属性始终会引用DOM中当前获得了焦点的元素。\n        元素获得焦点的方式有用户输入(通常是按Tab键)、在代码中调用focus()方法和页面加载。\n        \n        它里面有很多方法，在浏览器控制台查看，可以看到有很多方法\n        \n        MDN上还展示了一个有意思的示例，看这里 http://jsfiddle.net/w9gFj/\n        \n        那么document.activeElement.blur()为什么可以阻止虚拟键盘弹出呢？\n        原因是：当你点击input的时候，document.activeElement获得了DOM中被聚焦的元素，\n        也就是你点击的input，而调用.blur()方法，blur我相信大家都知道吧，就是取消聚焦。\n        获得被聚焦的元素然后强制blur以达到没有聚焦的样子\n        \n        优点：支持Android、iOS\n        缺点：需要添加额外的JS代码\n    \n        这句代码加在什么地方？加入有如下HTML\n        \n            &lt;div class=&quot;calendar&quot;&gt;\n                &lt;div&gt;\n                    &lt;input type=&quot;text&quot; id=&quot;datePicker&quot; placeholder=&quot;点击选择日期&quot;/&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \n        那么这句JS加在事件处理方法中\n    \n            $(&quot;#datePicker&quot;).focus(function()&#123;\n                document.activeElement.blur();\n            &#125;);\n            \n    就现在来说，用document.activeElement.blur()确实是在绕弯子，直接使用readonly是最佳方案。\n    但是document.activeElement很强大，可以做很多事。\n</code></pre>\n<h3 id=\"只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\"><a href=\"#只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\" class=\"headerlink\" title=\"只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\"></a>只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？</h3><pre><code>    只是头部绝对定位，内容区不使用绝对定位来解决\n    \n        body&#123;\n            height:100%;\n            overflow:hidden;\n        &#125;\n        header&#123;\n            position:absolute;\n            top:0;\n            left:0;\n            right:0;\n            height:80px;\n        &#125;\n        content&#123;\n            padding:80px 0 20px;\n            height:100%;\n            overflow-x:hidden;\n            overflow-y:scroll;\n            box-sizing:border-box;\n        &#125;\n        \n    分析：\n        \n        body设置固定显示区域（类似划个固定的区域框选子元素），header可以用绝对定位，内容区高度是不确定的，\n        所以用上padding来设置内容的显示区域（左右下padding可适当添加），但是给内容加上height:100%的同时，\n        一定要加上box-sizing:border-box，要不然内容区的高度就不是100%了\n</code></pre>\n<h3 id=\"多行文本溢出\"><a href=\"#多行文本溢出\" class=\"headerlink\" title=\"多行文本溢出\"></a>多行文本溢出</h3><pre><code>    单行文本溢出，对title类的使用非常多，而多行文本类，在详情介绍则用的比较多。\n    \n    /*单行文本溢出*/\n    .inaline&#123;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    &#125;\n    \n    /*多行文本溢出*/\n    .intwoline&#123;\n        display: -webkit-box !important;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        word-break: break-all;\n        -webkit-box-orient:vertical;\n        -webkit-line-clamp:4;\n    &#125;\n    属性-webkit-line-clamp就可以控制几行溢出，4就是第四行进行截断加...\n</code></pre>\n<h3 id=\"移动端遇上表单元素底部被顶起\"><a href=\"#移动端遇上表单元素底部被顶起\" class=\"headerlink\" title=\"移动端遇上表单元素底部被顶起\"></a>移动端遇上表单元素底部被顶起</h3><pre><code>    @media (max-height:400px)&#123;\n        element&#123;\n            display: none;\n        &#125;\n    &#125;\n    \n    分辨率高度小于等于设置值的时候识别\n    \n    一般设置为400px，但也不排除有些键盘高低不一致的情况，可根据情况适当修改\n</code></pre>\n<h3 id=\"当input遇见了全屏背景\"><a href=\"#当input遇见了全屏背景\" class=\"headerlink\" title=\"当input遇见了全屏背景\"></a>当input遇见了全屏背景</h3><pre><code>    在移动端开发过程中，有极少数使用全屏背景的情况。当input遇见了全屏背景，一切便不再美好。\n    \n    解决办法：\n    \n        let viewH = document.documentElement.clientHeight;\n        document.getElementsByTagName(&#39;html&#39;)[0].style.cssText += `height:$&#123;viewH&#125;px`;\n        document.body.style.cssText += `height:$&#123;viewH&#125;px`;\n</code></pre>\n<blockquote>\n<p>补充可视区宽高小知识</p>\n</blockquote>\n<pre><code>    可视区宽度\n    \n        document.body.clientWidth\n        document.documentElement.clientWidth\n    \n    可视区高度\n    \n        document.documentElement.clientHeight\n    \n    仔细一看可视区高度怎么和可视区宽度少了一个呢？\n    \n    其实不难理解，body本身块元素，宽度自然撑满可视区宽度\n    \n    而高度并非如此，body自身的高度则根据子元素的高度来撑\n    \n    所以document.body.clientHeight指的就是body自身的宽度\n</code></pre>\n<h3 id=\"移动网页调试神器vConsole以及Eruda使用技巧\"><a href=\"#移动网页调试神器vConsole以及Eruda使用技巧\" class=\"headerlink\" title=\"移动网页调试神器vConsole以及Eruda使用技巧\"></a>移动网页调试神器vConsole以及Eruda使用技巧</h3><pre><code>    做移动端Web开发的一大痛点就是，在真机运行下无法查看console.log日志和其他信息如网络请求、显示本地存储等信息\n    \n    如果网页是运行在手机浏览器中还算好，可以把网址在电脑上打开查看console信息\n    \n    但是如果是做APP的内嵌H5页面，那就只能靠开发阶段在浏览器模拟环境中尽量没有Bug\n    \n    但是，一旦H5上线后报错那就比较麻烦了，而且还依赖APP环境才能跑的网页，更加难以查找问题\n    \n    如果让移动端也拥有类似Chrome DevTools工具那岂不是很愉快么？\n    \n    vConsole便是这样一款很棒的移动端DevTools工具，由大厂企鹅出品。\n</code></pre>\n<p><a href=\"https://github.com/Tencent/vConsole\">vConsole github地址</a></p>\n<blockquote>\n<p>Eruda</p>\n</blockquote>\n<pre><code>    Eruda是谁？\n    \n    Eruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版\n    \n    其主要功能包括：\n    \n    捕获 console 日志、检查元素状态、显示性能指标、捕获XHR请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。\n</code></pre>\n<p><a href=\"https://github.com/liriliri/eruda\">集颜值技能于一身的Erdua</a></p>\n<p><a href=\"https://github.com/liriliri/eruda/blob/master/doc/README_CN.md\">使用技巧</a></p>\n<blockquote>\n<p>Erdua的基本使用方法推荐使用CDN和可配置参数的形式，在页面引入如下代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> src = <span class=\"string\">&#x27;//cdn.bootcss.com/eruda/1.2.4/eruda.min.js&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/eruda=true/</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>) &amp;&amp; <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;active-eruda&#x27;</span>) !== <span class=\"string\">&#x27;true&#x27;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt src=&quot;&#x27;</span> + src + <span class=\"string\">&#x27;&quot;&gt;&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;eruda.init();&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">eruda.<span class=\"title function_\">init</span>();<span class=\"comment\">//里面可以传入要初始化哪些面板，默认加载所有</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>    这样使用方式没有错，但是如果Eruda要跟着发布到线上的话，那我们要删除这段代码？\n    \n    因为这样会不管你需不需要调试Eruda都会立即加载，在页面出现Eruda的图标\n    \n    我的目标是，Eruda可以保留在页面里，无论什么环境，只要我们想呼唤它出现的时候它才出现\n    \n    不需要它的时候它只是一段不会生效的普通代码\n</code></pre>\n<blockquote>\n<p>办法</p>\n</blockquote>\n<pre><code>    首先把上述引入代码的src放到if里，同时把localStorage改为sessionStorage\n    \n    active-eruda参数也可以改个更短的名字，改后的代码如下：\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/eruda=true/</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>) || <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>) !== <span class=\"string\">&#x27;true&#x27;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> src = <span class=\"string\">&#x27;//cdn.bootcss.com/eruda/1.4.3/eruda.min.js&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt src=&quot;&#x27;</span> + src + <span class=\"string\">&#x27;&quot;&gt;&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;eruda.init();&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<pre><code>    这段代码的意思是如果URL中有参数eruda=true或者sessionStorage中eruda的值为true才加载Eruda\n    \n    这样的好处是，我们需要调试的时候可以在网页URL后面加个参数即可，不需要调试的它不会加载\n    \n    然而，这在开发阶段可以这样做比较好，但是在线上环境可能要加URL参数比较麻烦\n    \n    于是我想到了在页面中点击某个元素10次再加载Eruda，点击10次或者更多次，然后在sessionStorage中写入eruda=true\n    \n    然后刷新当前页。相反，再点击10次关闭Eruda。用这样比较隐藏的方式开启或关闭Eruda\n    \n    这样线上环境也可以自由开启或关闭Eruda了\n</code></pre>\n<blockquote>\n<p>例子：假如有这样的一个页面，里有一个标题文字</p>\n</blockquote>\n<pre><code>    &lt;h2&gt;——规则详情——&lt;/h2&gt;\n    &lt;div&gt;\n    .....\n    &lt;/div&gt;\n    那么我们可以在h2标签上绑定一个click事件，加入方法名叫showEruda\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 onclick=<span class=\"string\">&quot;showEruda&quot;</span>&gt;——规则详情——&lt;/h2&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">.....</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">function</span> <span class=\"title function_\">showEruda</span> (<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">10</span>) &#123;    </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> eruda = <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (!eruda || eruda === <span class=\"string\">&#x27;false&#x27;</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>, <span class=\"string\">&#x27;true&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        location.<span class=\"title function_\">reload</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    count++</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.dunizb.com/2017/10/16/erdua/\">原文链接地址，请戳我</a></p>\n<h3 id=\"webkit-overflow-scrolling-touch\"><a href=\"#webkit-overflow-scrolling-touch\" class=\"headerlink\" title=\"-webkit-overflow-scrolling: touch\"></a>-webkit-overflow-scrolling: touch</h3><pre><code>    在ios设备中，利用 overflow 来模拟滚动会出现卡顿的情况\n    \n    可以通过设置 -webkit-overflow-scrolling: touch; 来解决\n    \n    原因是设置后ios会为其创建一个 UIScrollView ，利用硬件来加速渲染\n</code></pre>\n<h3 id=\"1-监听屏幕旋转变化接口-orientationchange\"><a href=\"#1-监听屏幕旋转变化接口-orientationchange\" class=\"headerlink\" title=\"1. 监听屏幕旋转变化接口: orientationchange\"></a>1. 监听屏幕旋转变化接口: orientationchange</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以检测手机是否横屏的情况。</p>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测屏幕旋转角度</span></span><br><span class=\"line\"><span class=\"title function_\">screenOrientation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> orientation = screen.<span class=\"property\">orientation</span> || screen.<span class=\"property\">mozOrientation</span> || screen.<span class=\"property\">msOrientation</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;onorientationchange&quot;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span> ? <span class=\"string\">&quot;orientationchange&quot;</span> : <span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">angle</span> = orientation.<span class=\"property\">angle</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>orientation.angle 值</th>\n<th>屏幕方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>竖屏</td>\n</tr>\n<tr>\n<td>90</td>\n<td>向左横屏</td>\n</tr>\n<tr>\n<td>-90&#x2F;270</td>\n<td>向右横屏</td>\n</tr>\n<tr>\n<td>180</td>\n<td>倒屏</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>通过这个 <code>API</code> 我们在横屏和竖屏的时候可以添加一些动作或者是样式的改变。</p>\n</blockquote>\n<p>如果只是样式的改变也可以通过媒体查询来监听：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 竖屏 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: portrait) &#123;</span><br><span class=\"line\">  // css <span class=\"selector-tag\">code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/* 横屏 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">  // css <span class=\"selector-tag\">code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-电池状态：navigator-getBattery\"><a href=\"#2-电池状态：navigator-getBattery\" class=\"headerlink\" title=\"2. 电池状态：navigator.getBattery()\"></a>2. 电池状态：navigator.getBattery()</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以检测手机电池状态的情况。</p>\n<blockquote>\n<p>这个 <code>api</code> 返回的是一个 <code>promise</code> 对象，会给出一个 <code>BatteryManager</code> 对象，对象中包含了以下信息：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>charging</td>\n<td>是否在充电</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>chargingTime</td>\n<td>若在充电，还需充电时间</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>dischargingTime</td>\n<td>剩余电量</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>level</td>\n<td>剩余电量百分数</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>onchargingchange</td>\n<td>监听充电状态的改变</td>\n<td>可监听事件</td>\n</tr>\n<tr>\n<td>onchargingtimechange</td>\n<td>监听充电时间的改变</td>\n<td>可监听事件</td>\n</tr>\n<tr>\n<td>ondischargingtimechange</td>\n<td>监听电池可用时间的改变</td>\n<td>可监听事件</td>\n</tr>\n<tr>\n<td>onlevelchange</td>\n<td>监听剩余电量百分数的改变</td>\n<td>可监听事件</td>\n</tr>\n</tbody></table>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测是否充电以及电量</span></span><br><span class=\"line\"><span class=\"title function_\">getBatteryInfo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (navigator.<span class=\"property\">getBattery</span>) &#123;</span><br><span class=\"line\">    navigator.<span class=\"title function_\">getBattery</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">battery</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否在充电</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">batteryInfo</span> = battery.<span class=\"property\">charging</span> ? <span class=\"string\">`在充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span> : <span class=\"string\">`没充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 电池充电状态改变事件</span></span><br><span class=\"line\">      battery.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;chargingchange&#x27;</span>, <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">batteryInfo</span> = battery.<span class=\"property\">charging</span> ? <span class=\"string\">`在充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span> : <span class=\"string\">`没充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span>;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">batteryInfo</span> = <span class=\"string\">&#x27;不支持电池状态接口&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-让你的手机震动-window-navigator-vibrate-200\"><a href=\"#3-让你的手机震动-window-navigator-vibrate-200\" class=\"headerlink\" title=\"3. 让你的手机震动: window.navigator.vibrate(200)\"></a>3. 让你的手机震动: window.navigator.vibrate(200)</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以让你的手机按你的想法震动。</p>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//触发手机振动</span></span><br><span class=\"line\"><span class=\"title function_\">vibrateFun</span>(<span class=\"params\"></span>)  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (navigator.<span class=\"property\">vibrate</span>) &#123;</span><br><span class=\"line\">    navigator.<span class=\"title function_\">vibrate</span>([<span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vibrateInfo</span> = <span class=\"string\">&quot;您的设备不支持震动&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-联网状态：navigator-onLine\"><a href=\"#4-联网状态：navigator-onLine\" class=\"headerlink\" title=\"4. 联网状态：navigator.onLine\"></a>4. 联网状态：navigator.onLine</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以告诉你设备的网络状态是否连接。</p>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;online&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">updateOnlineStatus</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;offline&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">updateOnlineStatus</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//检测网络信号</span></span><br><span class=\"line\">  <span class=\"title function_\">updateOnlineStatus</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onLineInfo</span> = navigator.<span class=\"property\">onLine</span> ? <span class=\"string\">&quot;online&quot;</span> : <span class=\"string\">&quot;offline&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>navigator.onLine</code> 只会在设备未连接到局域网或路由器时返回 <code>false</code>，其他情况下均返回 <code>true</code>。也就是说，设备连接上路由器后，即使这个路由器没联通网络， <code>navigator.onLine</code>仍然返回 <code>true</code>。</p>\n</blockquote>\n<h3 id=\"5-浏览器活跃窗口监听-window-onblur-window-onfocus\"><a href=\"#5-浏览器活跃窗口监听-window-onblur-window-onfocus\" class=\"headerlink\" title=\"5. 浏览器活跃窗口监听: window.onblur &amp; window.onfocus\"></a>5. 浏览器活跃窗口监听: window.onblur &amp; window.onfocus</h3><p><strong>定义：</strong></p>\n<p>这两个 <code>API</code> 分别表示窗口失去焦点和窗口处于活跃状态。</p>\n<blockquote>\n<p>浏览其他窗口、浏览器最小化、点击其他程序等，<code>window.onblur</code> 事件就会触发;  回到该窗口，<code>window.onfocus</code> 事件就会触发。</p>\n</blockquote>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;blur&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">doFlashTitle</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;focus&#x27;</span>, <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;微信网页版&#x27;</span>;</span><br><span class=\"line\">  &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//浏览器活跃窗口监听</span></span><br><span class=\"line\">  <span class=\"title function_\">doFlashTitle</span>(<span class=\"params\"></span>)  &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>  =  <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span>  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">flashFlag</span>)  &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&quot;微信网页版&quot;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`微信（<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.infoNum&#125;</span>）`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">flashFlag</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">flashFlag</span></span><br><span class=\"line\">    &#125;,  <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-全屏-API（Fullscreen-API）\"><a href=\"#6-全屏-API（Fullscreen-API）\" class=\"headerlink\" title=\"6. 全屏 API（Fullscreen API）\"></a>6. 全屏 API（Fullscreen API）</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以使你所打开的页面全屏展示。</p>\n<p><strong>使用：</strong></p>\n<blockquote>\n<p>Element.requestFullscreen() 方法用于发出异步请求使元素进入全屏模式。</p>\n</blockquote>\n<p>调用此 <code>API</code> 并不能保证元素一定能够进入全屏模式。如果元素被允许进入全屏幕模式，document 对象会收到一个 <code>fullscreenchange</code> 事件，通知调用者当前元素已经进入全屏模式。如果全屏请求不被许可，则会收到一个 <code>fullscreenerror</code> 事件。<br>当进入&#x2F;退出全屏模式时,会触发 <code>fullscreenchange</code> 事件。你可以在监听这个事件，做你想做的事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打开、关闭全屏 </span></span><br><span class=\"line\"><span class=\"title function_\">fullScreenFun</span>(<span class=\"params\"></span>)  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span> ||</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span> ||</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span> ||</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fullscreenEnabled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> de = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> === <span class=\"string\">&#x27;打开全屏&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (de.<span class=\"property\">requestFullscreen</span>) &#123;</span><br><span class=\"line\">        de.<span class=\"title function_\">requestFullscreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (de.<span class=\"property\">mozRequestFullScreen</span>) &#123;</span><br><span class=\"line\">        de.<span class=\"title function_\">mozRequestFullScreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (de.<span class=\"property\">webkitRequestFullScreen</span>) &#123;</span><br><span class=\"line\">        de.<span class=\"title function_\">webkitRequestFullScreen</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> = <span class=\"string\">&#x27;退出全屏&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">exitFullscreen</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">exitFullscreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">mozCancelFullScreen</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">mozCancelFullScreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">webkitCancelFullScreen</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">webkitCancelFullScreen</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> = <span class=\"string\">&#x27;打开全屏&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> = <span class=\"string\">&#x27;浏览器当前不能全屏&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-媒体查询\"><a href=\"#1-媒体查询\" class=\"headerlink\" title=\"1. 媒体查询\"></a>1. 媒体查询</h3><p><code>CSS3</code>媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n<h4 id=\"何选择屏幕大小分割点\"><a href=\"#何选择屏幕大小分割点\" class=\"headerlink\" title=\"何选择屏幕大小分割点\"></a>何选择屏幕大小分割点</h4><p>如何确定媒体查询的分割点也是一个开发中会遇到的问题，下面是市场上的移动设备和电脑屏幕分辨率的分布情况，可以发现不同品牌和型号的设备屏幕分辨率一般都不一样。<br><a href=\"https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions\">The Ultimate Guide To iPhone Resolutions，可点击</a></p>\n<p><a href=\"http://gs.statcounter.com/screen-resolution-stats#monthly-201804-201904-bar\">全球屏幕分辨率统计2018年4月 - 2019年4月，可点击</a></p>\n<p>如果我们选择<code>600px</code>,<code>900px</code>,<code>1200px</code>,<code>1800px</code>作为分割点，可以适配到常见的14个机型。<br>当然这只是其中的一种分割方案，不一定满足项目中的实际需求，我们可以先用跨度大的分割点进行分割，如果出现不适配的情况可以再根据实际情况增加新的分割点。</p>\n<h4 id=\"移动优先-OR-PC优先\"><a href=\"#移动优先-OR-PC优先\" class=\"headerlink\" title=\"移动优先 OR PC优先\"></a>移动优先 OR PC优先</h4><p>不管是移动优先还是PC优先，都是依据当随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式。因此，移动端优先首先使用的是<code>min-width</code>，PC端优先使用的<code>max-width</code>。</p>\n<h3 id=\"2-百分比布局\"><a href=\"#2-百分比布局\" class=\"headerlink\" title=\"2.百分比布局\"></a>2.百分比布局</h3><p>通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果。Bootstrap里面的栅格系统就是利用百分比来定义元素的宽高，<code>CSS3</code>支持最大最小高，可以将百分比和<code>max(min)</code>一起结合使用来定义元素在不同设备下的宽高。</p>\n<p>但是我们必须要弄清楚css中子元素的百分比到底是相对谁的百分比。直接上结论吧：</p>\n<p>子元素的<code>height</code>或<code>width</code>中使用百分比，是相对于子元素的直接父元素，<code>width</code>相对于父元素的<code>width</code>，<code>height</code>相对于父元素的<code>height</code>；子元素的<code>top</code>和<code>bottom</code>如果设置百分比，则相对于直接非<code>static</code>定位(默认定位)的父元素的高度，同样子元素的<code>left</code>和<code>right</code>如果设置百分比，则相对于直接非<code>static</code>定位(默认定位的)父元素的宽度；子元素的<code>padding</code>如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的<code>width</code>，而与父元素的<code>height</code>无关。跟<code>padding</code>一样，<code>margin</code>也是如此，子元素的<code>margin</code>如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的<code>width</code>；<code>border-radius</code>不一样，如果设置<code>border-radius</code>为百分比，则是相对于自身的宽度，除了<code>border-radius</code>外，还有比如<code>translate</code>、<code>background-size</code>等都是相对于自身的；</p>\n<h3 id=\"3-rem布局\"><a href=\"#3-rem布局\" class=\"headerlink\" title=\"3.rem布局\"></a>3.rem布局</h3><p><code>REM</code>是<code>CSS3</code>新增的单位，并且移动端的支持度很高，Android2.x+,ios5+都支持。<code>rem</code>单位都是相对于根元素html的<code>font-size</code>来决定大小的,根元素的<code>font-size</code>相当于提供了一个基准，当页面的size发生变化时，只需要改变<code>font-size</code>的值，那么以<code>rem</code>为固定单位的元素的大小也会发生响应的变化。 因此，如果通过<code>rem</code>来实现响应式的布局，只需要根据视图容器的大小，动态的改变<code>font-size</code>即可（而<code>em</code>是相对于父元素的）</p>\n<h3 id=\"4-视口单位\"><a href=\"#4-视口单位\" class=\"headerlink\" title=\"4.视口单位\"></a>4.视口单位</h3><p><code>css3</code>中引入了一个新的单位<code>vw/vh</code>，与视图窗口有关，<code>vw</code>表示相对于视图窗口的宽度，<code>vh</code>表示相对于视图窗口高度，除了<code>vw</code>和<code>vh</code>外，还有<code>vmin</code>和<code>vmax</code>两个相关的单位。各个单位具体的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vw</td>\n<td>相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw</td>\n</tr>\n<tr>\n<td>vh</td>\n<td>相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh</td>\n</tr>\n<tr>\n<td>vmin</td>\n<td>vw和vh中的较小值</td>\n</tr>\n<tr>\n<td>vmax</td>\n<td>vw和vh中的较大值</td>\n</tr>\n</tbody></table>\n<p><strong>参考文章：</strong></p>\n<p><a href=\"https://juejin.im/post/5caaa230e51d452b672f9703\">八叉树：前端响应式布局原理与方案</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/\">张鑫旭：设备像素比devicePixelRatio简单介绍</a></p>\n<p><a href=\"https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/\">颜海镜：Rem布局的原理解析</a></p>\n<h3 id=\"安装postcss插件\"><a href=\"#安装postcss插件\" class=\"headerlink\" title=\"安装postcss插件\"></a>安装postcss插件</h3><h4 id=\"postcss-import\"><a href=\"#postcss-import\" class=\"headerlink\" title=\"postcss-import\"></a>postcss-import</h4><p><a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a>相关配置可以<a href=\"https://github.com/postcss/postcss-import\">点击这里</a>。目前使用的是默认配置。只在<code>postcss.config.js</code>文件中引入了该插件。</p>\n<p><code>postcss-import</code>主要功有是解决<code>@import</code>引入路径问题。使用这个插件，可以让你很轻易的使用本地文件、<code>node_modules</code>或者<code>web_modules</code>的文件。这个插件配合<a href=\"https://github.com/postcss/postcss-url\"><code>postcss-url</code></a>让你引入文件变得更轻松。</p>\n<h4 id=\"postcss-url\"><a href=\"#postcss-url\" class=\"headerlink\" title=\"postcss-url\"></a>postcss-url</h4><p><a href=\"https://github.com/postcss/postcss-url\"><code>postcss-url</code></a>相关配置可以点击<a href=\"https://github.com/postcss/postcss-url\">这里</a>。该插件主要用来处理文件，比如图片文件、字体文件等引用路径的处理。</p>\n<p>在Vue项目中，<a href=\"https://github.com/vuejs/vue-loader\"><code>vue-loader</code></a>已具有类似的功能，只需要配置中将<code>vue-loader</code>配置进去。</p>\n<h4 id=\"autoprefixer\"><a href=\"#autoprefixer\" class=\"headerlink\" title=\"autoprefixer\"></a>autoprefixer</h4><p><a href=\"https://github.com/postcss/autoprefixer\"><code>autoprefixer</code></a>插件是用来自动处理浏览器前缀的一个插件。如果你配置了<a href=\"https://github.com/MoOx/postcss-cssnext\"><code>postcss-cssnext</code></a>，其中就已具备了<code>autoprefixer</code>的功能。在配置的时候，未显示的配置相关参数的话，表示使用的是<a href=\"https://github.com/ai/browserslist\">Browserslist</a>指定的列表参数，你也可以像这样来指定<code>last 2 versions</code> 或者 <code>&gt; 5%</code>。</p>\n<h3 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h3><ul>\n<li><a href=\"https://github.com/yisibl/postcss-aspect-ratio-mini\">postcss-aspect-ratio-mini</a></li>\n<li><a href=\"https://github.com/evrone/postcss-px-to-viewport\">postcss-px-to-viewport</a></li>\n<li><a href=\"https://github.com/jonathantneal/postcss-write-svg\">postcss-write-svg</a></li>\n<li><a href=\"https://github.com/MoOx/postcss-cssnext\">postcss-cssnext</a></li>\n<li><a href=\"https://github.com/ben-eb/cssnano\">cssnano</a></li>\n<li><del><a href=\"https://github.com/springuper/postcss-viewport-units\">postcss-viewport-units</a></del> 2018-11-02：经过一段时间项目的验证，大漠团队已经开始不引用Polyfill</li>\n</ul>\n<p>要使用这几个插件，先要进行安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//依赖太多，故分开显示</span></span><br><span class=\"line\">npm i postcss-<span class=\"keyword\">import</span> postcss-url autoprefixer cssnano cssnano-preset-advanced -D</span><br><span class=\"line\">npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"接下来在postcss-config-js文件对新安装的postcss插件进行配置\"><a href=\"#接下来在postcss-config-js文件对新安装的postcss插件进行配置\" class=\"headerlink\" title=\"接下来在postcss.config.js文件对新安装的postcss插件进行配置\"></a>接下来在<code>postcss.config.js</code>文件对新安装的postcss插件进行配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>  =  &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-import&quot;</span>:  &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-url&quot;</span>:  &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-aspect-ratio-mini&quot;</span>:  &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-write-svg&quot;</span>:  &#123;  <span class=\"attr\">utf8</span>:  <span class=\"literal\">false</span>  &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-cssnext&quot;</span>:  &#123;&#125;,<span class=\"comment\">//由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false</span></span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-px-to-viewport&quot;</span>:  &#123;</span><br><span class=\"line\">      <span class=\"attr\">viewportWidth</span>:  <span class=\"number\">750</span>,  <span class=\"comment\">// 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span></span><br><span class=\"line\">      <span class=\"attr\">viewportHeight</span>:  <span class=\"number\">1334</span>,  <span class=\"comment\">// 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span></span><br><span class=\"line\">      <span class=\"attr\">unitPrecision</span>:  <span class=\"number\">3</span>,  <span class=\"comment\">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class=\"line\">      <span class=\"attr\">viewportUnit</span>:  <span class=\"string\">&#x27;vw&#x27;</span>,  <span class=\"comment\">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class=\"line\">      <span class=\"attr\">selectorBlackList</span>:  [<span class=\"string\">&#x27;.ignore&#x27;</span>,  <span class=\"string\">&#x27;.hairlines&#x27;</span>],  <span class=\"comment\">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class=\"line\">      <span class=\"attr\">minPixelValue</span>:  <span class=\"number\">1</span>,  <span class=\"comment\">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class=\"line\">      <span class=\"attr\">mediaQuery</span>:  <span class=\"literal\">false</span>  <span class=\"comment\">// 允许在媒体查询中转换`px`</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;cssnano&quot;</span>:  &#123;</span><br><span class=\"line\">      <span class=\"attr\">preset</span>:  <span class=\"string\">&quot;advanced&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">autoprefixer</span>:  <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;postcss-zindex&quot;</span>:  <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// &quot;autoprefixer&quot;: &#123; browsers: [&quot;&gt; 1%&quot;, &quot;ie &gt; 8&quot;, &#x27;last 5 version&#x27;] &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">//移动端项目开启此插件 将px转为rem</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;postcss-px2rem&quot;:&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// remUnit:&#x27;75&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"postcss-write-svg\"><a href=\"#postcss-write-svg\" class=\"headerlink\" title=\"postcss-write-svg\"></a>postcss-write-svg</h4><p><a href=\"https://github.com/jonathantneal/postcss-write-svg\"><code>postcss-write-svg</code></a>插件主要用来处理移动端<code>1px</code>的解决方案。该插件主要使用的是<code>border-image</code>和<code>background</code>来做<code>1px</code>的相关处理。比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@svg</span> <span class=\"number\">1px</span>-border &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"keyword\">@rect</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fill</span>: <span class=\"built_in\">var</span>(--color, black);</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-image</span>: <span class=\"built_in\">svg</span>(<span class=\"number\">1px</span>-border <span class=\"built_in\">param</span>(--color <span class=\"number\">#00b1ff</span>)) <span class=\"number\">2</span> <span class=\"number\">2</span> stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译出来的CSS:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;data:image/svg+xml;charset=utf-8,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; height=&#x27;2px&#x27;%3E%3Crect fill=&#x27;%2300b1ff&#x27; width=&#x27;100%25&#x27; height=&#x27;50%25&#x27;/%3E%3C/svg%3E&quot;</span>) <span class=\"number\">2</span> <span class=\"number\">2</span> stretch;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>上面演示的是使用<code>border-image</code>方式，除此之外还可以使用<code>background-image</code>来实现。比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@svg</span> square &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@rect</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fill</span>: <span class=\"built_in\">var</span>(--color, black);</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white <span class=\"built_in\">svg</span>(square <span class=\"built_in\">param</span>(--color <span class=\"number\">#00b1ff</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译出来就是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white <span class=\"built_in\">url</span>(<span class=\"string\">&quot;data:image/svg+xml;charset=utf-8,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Crect fill=&#x27;%2300b1ff&#x27; width=&#x27;100%25&#x27; height=&#x27;100%25&#x27;/%3E%3C/svg%3E&quot;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>特别声明：</strong> 由于有一些低端机对<code>border-image</code>支持度不够友好，个人建议你使用<code>background-image</code>的这个方案。</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p>知识付费模式开启，需要购买会员才可观看呦（2019-05-22购买，支付宝订单号：190522163630182750）</p>\n</blockquote>\n<p><a href=\"https://www.w3cplus.com/mobile/vw-layout-in-vue.html\">如何在Vue项目中使用vw实现移动端适配</a></p>\n<h3 id=\"阿里红利真的吃完了\"><a href=\"#阿里红利真的吃完了\" class=\"headerlink\" title=\"阿里红利真的吃完了\"></a>阿里红利真的吃完了</h3><p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/gougu_1558579159402.jpg\" alt=\"gougu.jpg\"></p>\n<p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/ruanyifeng_1558579181115.png\" alt=\"ruanyifeng.png\"></p>\n<p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/xuqiucengci_1558579197535.jpg\" alt=\"xuqiucengci.jpg\"></p>\n<blockquote>\n<p>阿里红利吃完了？还是化身为神探究孔孟庄了？自行体会！</p>\n</blockquote>\n<h3 id=\"圣诞彩蛋事件\"><a href=\"#圣诞彩蛋事件\" class=\"headerlink\" title=\"圣诞彩蛋事件\"></a>圣诞彩蛋事件</h3><p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/caidan_1558579502232.jpg\" alt=\"caidan.jpg\"></p>\n<h3 id=\"响应式开发中合理选定CSS媒体查询分割点\"><a href=\"#响应式开发中合理选定CSS媒体查询分割点\" class=\"headerlink\" title=\"响应式开发中合理选定CSS媒体查询分割点\"></a>响应式开发中合理选定CSS媒体查询分割点</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t使用sass minxin实现的针对不同屏幕的函数</span></span><br><span class=\"line\"><span class=\"comment\">\t参数:</span></span><br><span class=\"line\"><span class=\"comment\">\tphone-only:手机屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-portrait-up:平板竖屏及更大屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-portait-only:仅限平板竖屏</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-landscape-up:平板横屏及更大屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-landscape-only 仅限平板横屏</span></span><br><span class=\"line\"><span class=\"comment\">\tdesktop-up:PC及更大屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\tdesktop-only:仅限PC</span></span><br><span class=\"line\"><span class=\"comment\">\tbig-desktop-up 大号PC</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> for-size($range) &#123;</span><br><span class=\"line\">\t$phone-upper-boundary: <span class=\"number\">600px</span>;</span><br><span class=\"line\">\t$tablet-portrait-upper-boundary: <span class=\"number\">900px</span>;</span><br><span class=\"line\">\t$tablet-landscape-upper-boundary: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t$desktop-upper-boundary: <span class=\"number\">1800px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">@if</span> $range == phone-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: $phone-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-portrait-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $phone-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-portait-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $phone-upper-boundary) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $tablet-portrait-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-landscape-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-landscape-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-landscape-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-portrait-upper-boundary) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $tablet-landscape-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == desktop-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-landscape-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == desktop-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-landscape-upper-boundary) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $desktop-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == big-desktop-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $desktop-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">@include</span> for-size(desktop-up) &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://segmentfault.com/a/1190000007567739\">响应式开发中合理选定CSS媒体查询分割点</a></p>\n","excerpt":"","more":"<h2 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h2><h3 id=\"viewport-视口-可视区窗口\"><a href=\"#viewport-视口-可视区窗口\" class=\"headerlink\" title=\"viewport 视口(可视区窗口)\"></a>viewport 视口(可视区窗口)</h3><pre><code>    默认不设置viewport一般可视区宽度在移动端是980\n    \n    width  可视区的宽度 (number||device-width)\n    \n    user-scalable 是否允许用户缩放 (yes||no) iOS10无效\n    \n    initial-scale 初始缩放比例\n    \n    minimum-scale 最小缩放比例\n    \n    maximum-scale 最大缩放比例\n</code></pre>\n<h3 id=\"设备像素比-device-pixel-ratio\"><a href=\"#设备像素比-device-pixel-ratio\" class=\"headerlink\" title=\"设备像素比(device pixel ratio)\"></a>设备像素比(device pixel ratio)</h3><pre><code>    设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：\n    \n        设备像素比 ＝ 物理像素 / 设备独立像素\n        \n    在JavaScript中，可以通过window.devicePixelRatio获取到当前设备的dpr\n</code></pre>\n<h3 id=\"CSS单位rem\"><a href=\"#CSS单位rem\" class=\"headerlink\" title=\"CSS单位rem\"></a>CSS单位rem</h3><pre><code>    在W3C规范中是这样描述rem的:\n    \n    font size of the root element.\n    \n    简单的理解，rem就是相对于根元素&lt;html&gt;的font-size来做计算。\n    而我们的方案中使用rem单位，是能轻易的根据&lt;html&gt;的font-size计算出元素的盒模型大小。\n</code></pre>\n<h3 id=\"meta设置\"><a href=\"#meta设置\" class=\"headerlink\" title=\"meta设置\"></a>meta设置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--QQ强制竖屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;x5-orientation&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;portrait&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--QQ全屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;x5-fullscreen&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--UC强制竖屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screen-orientation&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;portrait&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--UC全屏显示--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;full-screen&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--禁止识别电话号码和邮箱地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no, email=no&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--页面适合在pc和mobile上进行浏览--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;applicable-device&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;pc, mobile&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--针对Apple是否启动WebApp功能--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Apple顶部导航栏颜色--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t\thref=&quot;tel:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t\thref=&quot;mailto:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>13888888888<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;tel:18888888888&quot;</span>&gt;</span>请拨打电话18888888888<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:zyh@qq.com&quot;</span>&gt;</span>请发送邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认样式设置\"><a href=\"#默认样式设置\" class=\"headerlink\" title=\"默认样式设置\"></a>默认样式设置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/*默认字体设置*/</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"attribute\">font-family</span>: Helvetica;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"comment\">/*禁止文字缩放*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-<span class=\"selector-tag\">text</span>-size-adjust: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"comment\">/*选中文字设置*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-user-<span class=\"selector-tag\">select</span>: none; </span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/*清除点击阴影*/</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"comment\">/*-webkit-tap-highlight-color: transparent*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/*消除圆角按钮（针对iOS系统）*/</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t-webkit-<span class=\"attribute\">appearance</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;按钮&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态获取像素比（取自–饿了么移动端）\"><a href=\"#动态获取像素比（取自–饿了么移动端）\" class=\"headerlink\" title=\"动态获取像素比（取自–饿了么移动端）\"></a>动态获取像素比（取自–饿了么移动端）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\">e, t</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = n.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">width</span>;</span><br><span class=\"line\">\t\tt / d &gt; <span class=\"number\">540</span> &amp;&amp; (t = <span class=\"number\">540</span> * d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> i = t / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tn.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = i + <span class=\"string\">&quot;px&quot;</span>, p.<span class=\"property\">rem</span> = e.<span class=\"property\">rem</span> = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a, r = e.<span class=\"property\">document</span>,</span><br><span class=\"line\">\t\tn = r.<span class=\"property\">documentElement</span>,</span><br><span class=\"line\">\t\to = r.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>),</span><br><span class=\"line\">\t\tl = r.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;meta[name=&quot;flexible&quot;]&#x27;</span>),</span><br><span class=\"line\">\t\tm = r.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;meta[name=&quot;flexible-in-x5&quot;]&#x27;</span>),</span><br><span class=\"line\">\t\ts = !<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\td = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tc = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tp = t.<span class=\"property\">flexible</span> || (t.<span class=\"property\">flexible</span> = &#123;&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (o) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;将根据已有的meta标签来设置缩放比例&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u = o.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;content&quot;</span>).<span class=\"title function_\">match</span>(<span class=\"regexp\">/initial\\-scale=([\\d\\.]+)/</span>);</span><br><span class=\"line\">\t\tu &amp;&amp; (c = <span class=\"built_in\">parseFloat</span>(u[<span class=\"number\">1</span>]), d = <span class=\"built_in\">parseInt</span>(<span class=\"number\">1</span> / c))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> f = l.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;content&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (f) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> v = f.<span class=\"title function_\">match</span>(<span class=\"regexp\">/initial\\-dpr=([\\d\\.]+)/</span>),</span><br><span class=\"line\">\t\t\t\th = f.<span class=\"title function_\">match</span>(<span class=\"regexp\">/maximum\\-dpr=([\\d\\.]+)/</span>);</span><br><span class=\"line\">\t\t\tv &amp;&amp; (d = <span class=\"built_in\">parseFloat</span>(v[<span class=\"number\">1</span>]), c = <span class=\"built_in\">parseFloat</span>((<span class=\"number\">1</span> / d).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>))), h &amp;&amp; (d = <span class=\"built_in\">parseFloat</span>(h[<span class=\"number\">1</span>]), c = <span class=\"built_in\">parseFloat</span>((<span class=\"number\">1</span> / d).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>)))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &amp;&amp; (s = <span class=\"string\">&quot;false&quot;</span> !== m.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;content&quot;</span>)), !d &amp;&amp; !c) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x = (e.<span class=\"property\">navigator</span>.<span class=\"property\">appVersion</span>.<span class=\"title function_\">match</span>(<span class=\"regexp\">/android/gi</span>), e.<span class=\"property\">chrome</span>),</span><br><span class=\"line\">\t\t\tg = e.<span class=\"property\">navigator</span>.<span class=\"property\">appVersion</span>.<span class=\"title function_\">match</span>(<span class=\"regexp\">/iphone/gi</span>),</span><br><span class=\"line\">\t\t\tb = e.<span class=\"property\">devicePixelRatio</span>,</span><br><span class=\"line\">\t\t\tw = <span class=\"regexp\">/TBS\\/\\d+/</span>.<span class=\"title function_\">test</span>(e.<span class=\"property\">navigator</span>.<span class=\"property\">userAgent</span>),</span><br><span class=\"line\">\t\t\ty = !<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\ty = <span class=\"string\">&quot;true&quot;</span> === <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;IN_FLEXIBLE_WHITE_LIST&quot;</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\ty = !<span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\td = g || x || w &amp;&amp; s &amp;&amp; y ? b &gt;= <span class=\"number\">3</span> &amp;&amp; (!d || d &gt;= <span class=\"number\">3</span>) ? <span class=\"number\">3</span> : b &gt;= <span class=\"number\">2</span> &amp;&amp; (!d || d &gt;= <span class=\"number\">2</span>) ? <span class=\"number\">2</span> : <span class=\"number\">1</span> : <span class=\"number\">1</span>, c = <span class=\"number\">1</span> / d</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;data-dpr&quot;</span>, d), !o) <span class=\"keyword\">if</span> (o = r.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;meta&quot;</span>), o.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;viewport&quot;</span>), o.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;content&quot;</span>, <span class=\"string\">&quot;initial-scale=&quot;</span> + c + <span class=\"string\">&quot;, maximum-scale=&quot;</span> + c + <span class=\"string\">&quot;, minimum-scale=&quot;</span> + c + <span class=\"string\">&quot;, user-scalable=no&quot;</span>), n.<span class=\"property\">firstElementChild</span>) n.<span class=\"property\">firstElementChild</span>.<span class=\"title function_\">appendChild</span>(o);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> E = r.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">\t\tE.<span class=\"title function_\">appendChild</span>(o), r.<span class=\"title function_\">write</span>(E.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clearTimeout</span>(a), a = <span class=\"built_in\">setTimeout</span>(i, <span class=\"number\">300</span>)</span><br><span class=\"line\">\t&#125;, !<span class=\"number\">1</span>), e.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;pageshow&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\te.<span class=\"property\">persisted</span> &amp;&amp; (<span class=\"built_in\">clearTimeout</span>(a), a = <span class=\"built_in\">setTimeout</span>(i, <span class=\"number\">300</span>))</span><br><span class=\"line\">\t&#125;, !<span class=\"number\">1</span>), <span class=\"string\">&quot;complete&quot;</span> === r.<span class=\"property\">readyState</span> ? r.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"number\">12</span> * d + <span class=\"string\">&quot;px&quot;</span> : r.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\tr.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"number\">12</span> * d + <span class=\"string\">&quot;px&quot;</span></span><br><span class=\"line\">\t&#125;, !<span class=\"number\">1</span>), <span class=\"title function_\">i</span>(), p.<span class=\"property\">dpr</span> = e.<span class=\"property\">dpr</span> = d, p.<span class=\"property\">refreshRem</span> = i, p.<span class=\"property\">rem2px</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = <span class=\"built_in\">parseFloat</span>(e) * <span class=\"variable language_\">this</span>.<span class=\"property\">rem</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;string&quot;</span> == <span class=\"keyword\">typeof</span> e &amp;&amp; e.<span class=\"title function_\">match</span>(<span class=\"regexp\">/rem$/</span>) &amp;&amp; (t += <span class=\"string\">&quot;px&quot;</span>), t</span><br><span class=\"line\">\t&#125;, p.<span class=\"property\">px2rem</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = <span class=\"built_in\">parseFloat</span>(e) / <span class=\"variable language_\">this</span>.<span class=\"property\">rem</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;string&quot;</span> == <span class=\"keyword\">typeof</span> e &amp;&amp; e.<span class=\"title function_\">match</span>(<span class=\"regexp\">/px$/</span>) &amp;&amp; (t += <span class=\"string\">&quot;rem&quot;</span>), t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">lib</span> || (<span class=\"variable language_\">window</span>.<span class=\"property\">lib</span> = &#123;&#125;))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"像素比简单设置\"><a href=\"#像素比简单设置\" class=\"headerlink\" title=\"像素比简单设置\"></a>像素比简单设置</h3><pre><code>    //获取像素比\n    var PixelRatio = 1 / window.devicePixelRatio;\n    //写入meta\n    document.write(&#39;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=&#39;+PixelRatio+&#39;,minimum-scale=&#39;+PixelRatio+&#39;,maximum-scale=&#39;+PixelRatio+&#39;,user-scalable=no&quot; /&gt;&#39;);\n    //获取html元素\n    var html = document.getElementsByTagName(&#39;html&#39;)[0];\n    //获取html（屏幕）的宽度\n    var pageWidth = html.getBoundingClientRect().width;\n    //获取html的字号\n    html.style.fontSize = pageWidth / 10 + &#39;px&#39;;\n</code></pre>\n<h3 id=\"弹性盒模型\"><a href=\"#弹性盒模型\" class=\"headerlink\" title=\"弹性盒模型\"></a>弹性盒模型</h3><blockquote>\n<p>主轴和侧轴的样式都需要加在元素的父级，而元素的位置设置只需要加在自身即可（别忘了父级要加display: flex;）</p>\n</blockquote>\n<pre><code>    主轴方向设置\n    \n        /*新版弹性盒模型*/\n        display: flex;\n        \n        /*设置主轴方向为水平方向*/\n        /*flex-direction: row;*/\n        \n        /*设置主轴方向为垂直方向*/\n        /*flex-direction: column;*/\n        \n        \n        /*老版弹性盒模型*/\n        display: -webkit-box;\n        \n        /*设置主轴方向为水平方向*/\n        -webkit-box-orient: horizontal;\n        \n        /*设置主轴方向为垂直方向*/\n        /*-webkit-box-orient: vertical;*/\n    \n    主轴上元素排列方向\n    \n        /*新版弹性盒模型*/\n        /*display: flex;*/\n        \n        /*设置主轴方向为水平,元素排列为反序*/\n        /*flex-direction: row-reverse;*/\n        \n        /*设置主轴方向为垂直,元素排列为反序*/\n        /*flex-direction: column-reverse;*/\n        \n        \n        /*老版弹性盒模型*/\n        display: -webkit-box;\n        \n        /*元素在主轴上排列为反序*/\n        /*-webkit-box-direction: reverse;*/\n        \n        /*元素在主轴上排列为正序*/\n        /*-webkit-box-direction: normal;*/\n    \n    主轴上富裕空间管理\n    \n        /*新版弹性盒模型*/\n        display: flex;\n        \n        /*元素在主轴开始位置 ，富裕空间在主轴的结束位置*/\n        /*justify-content: flex-start;*/\n        \n        /*元素在主轴结束位置，富裕空间在主轴开始位置*/\n        /*justify-content: flex-end;*/\n        \n        /*元素在主轴中间,富裕空间在主轴两侧*/\n        /*justify-content: center;*/\n        \n        /*富裕空间平均分配在每两个元素之间*/\n        /*justify-content: space-between;*/\n        \n        /*富裕空间平均分配在每个元素两侧*/\n        /*justify-content: space-around;*/\n        \n        \n        /*老版弹性盒模型*/\n        display: -webkit-box;\n        \n        /*元素在主轴的开始位置,富裕空间在主轴的结束位置*/\n        /*-webkit-box-pack: start;*/\n        \n        /*元素在主轴结束位置，富裕空间在主轴开始位置*/\n        /*-webkit-box-pack: end;*/\n        \n        /*元素在主轴中间,富裕空间在主轴两侧*/\n        /*-webkit-box-pack: center;*/\n        \n        /*富裕空间平均分配在每两个元素之间*/\n        /*-webkit-box-pack: justify;*/\n    \n    侧轴上富裕空间管理\n    \n        /*新版弹性盒模型*/\n        /*display: flex;*/\n        \n        /*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n        /*align-items: flex-start;*/\n        \n        /*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n        /*align-items: flex-end;*/\n        \n        /*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n        /*align-items: center;*/\n        \n        /*根据侧轴方向上文字的基线对齐*/\n        /*align-items: baseline;*/\n        \n        \n        /*老版弹性盒模型*/\n        /*display: -webkit-box;*/\n        \n        /*元素在侧轴开始位置，富裕空间在侧轴结束位置*/\n        /*-webkit-box-align: start;*/\n        \n        /*元素在侧轴结束位置，富裕空间在侧轴开始位置*/\n        /*-webkit-box-align: end;*/\n        \n        /*元素在侧轴中间位置，富裕空间在侧轴两侧*/\n        /*-webkit-box-align: center;*/\n    \n    元素弹性空间\n    \n        /*新版*/\n        /*flex-grow: 1;*/\n        \n        /*老版*/\n        -webkit-box-flex:1;\n    \n    元素具体位置设置\n    \n        /* 数值越小越靠前，可以接受0或者负值 */\n        /*order:5;*/\n        \n        /* 数值越小越靠前， 最小值默认处理为1*/\n        /*-webkit-box-ordinal-group:-2;*/\n</code></pre>\n<h3 id=\"移动端事件\"><a href=\"#移动端事件\" class=\"headerlink\" title=\"移动端事件\"></a>移动端事件</h3><pre><code>    手指按下：\n        ontouchstart\n        \n    手指移动：\n        ontouchmove\n        \n    手指抬起：\n        ontouchend\n        \n    注意：\n        在移动端开发的时候，浏览器的模拟器时好时坏，\n        一般不用on的方式绑定事件函数，要用事件绑定的方式(addEventListener)\n    \n    移动端click屏幕产生200-300ms的延迟响应\n    \n        移动设备上的web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。\n    \n    以下是历史原因：\n    \n        2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，\n        使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，\n        你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，\n        你就能看清该部分放大后的内容，再次双击后能回到原始状态。\n        \n        双击缩放是指用手指在屏幕上快速点击两次，iOS自带的 Safari浏览器会将网页缩放至原始比例。\n        \n        原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，\n        此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，\n        所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，\n        则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，\n        转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。\n        这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，\n        对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。\n</code></pre>\n<h3 id=\"触摸事件的响应顺序\"><a href=\"#触摸事件的响应顺序\" class=\"headerlink\" title=\"触摸事件的响应顺序\"></a>触摸事件的响应顺序</h3><pre><code>    1、ontouchstart \n    2、ontouchmove \n    3、ontouchend \n    4、onclick\n    \n    解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应\n</code></pre>\n<h3 id=\"移动端的点透\"><a href=\"#移动端的点透\" class=\"headerlink\" title=\"移动端的点透\"></a>移动端的点透</h3><pre><code>    当上层元素发生点击的时候，下层元素也有点击（焦点）特性，\n    在300ms之后，如果上层元素消失或者隐藏，目标点就会“漂移”到下层元素身上，就会触发点击行为。\n        \n    解决：\n    \n        1.下层不要使用有点击（焦点）特性的元素\n        \n        2.阻止pc事件\n</code></pre>\n<h3 id=\"移动端阻止PC事件优点\"><a href=\"#移动端阻止PC事件优点\" class=\"headerlink\" title=\"移动端阻止PC事件优点\"></a>移动端阻止PC事件优点</h3><pre><code>    document.addEventListener(&#39;touchstart&#39;,function(ev)&#123;\n        ev.preventDefault();\n    &#125;);\n    \n    \n    1.IOS10下设置meta禁止用户缩放是不可行的。（使用阻止pc事件就可以在IOS10下禁止用户缩放）\n        \n    2.解决IOS10下溢出隐藏的问题。\n    \n    3.禁止系统默认的滚动条、阻止橡皮筋效果\n    \n    4.禁止长按选中文字、选中图片、系统默认菜单\n    \n    5.解决点透问题\n    \n    6.也阻止了焦点元素的焦点行为(要正常使用：ev.stopPropagation()阻止冒泡)\n</code></pre>\n<h3 id=\"移动端事件对象\"><a href=\"#移动端事件对象\" class=\"headerlink\" title=\"移动端事件对象\"></a>移动端事件对象</h3><pre><code>    当给某个元素加上了事件绑定函数之后，事件函数默认的第一个参数就是事件对象\n    \n    事件对象：\n        当用户在浏览器下触发了某个行为，事件对象会记录用户操作时一些细节信息。\n    \n    touches 当前位于*屏幕*上的所有手指的一个列表\n    \n    targetTouches 位于当前DOM元素上的手指的一个列表\n    \n    changedTouches  涉及当前事件的手指的一个列表\n    \n    div.addEventListener(&#39;touchmove&#39;,start);\n    function start(ev)&#123;\n        //this.innerHTML = ev.touches.length;\n        //this.innerHTML = ev.targetTouches.length;\n        this.innerHTML = ev.changedTouches.length;\n    &#125;\n</code></pre>\n<h3 id=\"移动端input无法获取焦点的问题\"><a href=\"#移动端input无法获取焦点的问题\" class=\"headerlink\" title=\"移动端input无法获取焦点的问题\"></a>移动端input无法获取焦点的问题</h3><p>在移动端开发中，我们有时有针对性的写一些特殊的重置，比如：</p>\n<pre><code>    * &#123;\n        -webkit-touch-callout: none;\n        //阻止长按图片之后呼出菜单提示复制的行为\n        \n        -webkit-text-size-adjust: none;\n        //禁用Webkit内核浏览器的文字大小调整功能\n        \n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n        //避免点击a标签或者注册了click事件的元素时产生高亮\n        \n        -webkit-user-select: none;\n        //禁止用户进行复制、选择\n    &#125;\n    \n    其中，-webkit-user-select: none;会产生一些问题，这是webkit内核浏览器下的一个bug\n    阻止了用户的选择内容行为，会导致一些“内容可编辑”标签无法正常使用，比如input、textarea\n    \n    如果网站不需要阻止用户的选择内容的行为就可以使用如下样式：\n    \n        * &#123;\n            -webkit-user-select: text;\n            -user-select: text;\n        &#125;\n        \n        另一种方式：\n        *: not(input, textarea) &#123;\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n        &#125;\n        \n    user-select可能会导致与contenteditable = &quot;true&quot;元素的问题，以便更好的使用，所以下面的CSS也要加上\n    \n        HTML5全局 contenteditable属性\n            contenteditable 属性规定是否可编辑元素的内容\n    \n        [contenteditable=&quot;true&quot;] , input, textarea &#123;\n            -webkit-user-select: auto !important;\n            -khtml-user-select: auto !important;\n            -moz-user-select: auto !important;\n            -ms-user-select: auto !important;\n            -o-user-select: auto !important;\n            user-select: auto !important;\n        &#125;\n</code></pre>\n<h3 id=\"表单输入框placeholder的颜色值\"><a href=\"#表单输入框placeholder的颜色值\" class=\"headerlink\" title=\"表单输入框placeholder的颜色值\"></a>表单输入框placeholder的颜色值</h3><pre><code>    input::-webkit-input-placeholder&#123;color:#ccc;&#125;\n    input:focus::-webkit-input-placeholder&#123;color:#ddd;&#125;\n</code></pre>\n<h3 id=\"模拟按钮hover效果\"><a href=\"#模拟按钮hover效果\" class=\"headerlink\" title=\"模拟按钮hover效果\"></a>模拟按钮hover效果</h3><pre><code>    直接在body上添加ontouchstart，同样可激活移动端css的active效果\n    移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，\n    使用css的hover并不能满足我们的需求，还好国外有个激活移动端css的active效果\n</code></pre>\n<blockquote>\n<p>第一种</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">a</span>&#123;-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">border-radius</span>:<span class=\"number\">4px</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">18px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;<span class=\"attribute\">background-color</span>: <span class=\"number\">#4185F3</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span><span class=\"selector-pseudo\">:active</span>&#123;<span class=\"attribute\">background-color</span>: <span class=\"number\">#357AE8</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ontouchstart</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-blue&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">a</span>&#123;-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">border-radius</span>:<span class=\"number\">4px</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">18px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;<span class=\"attribute\">background-color</span>: <span class=\"number\">#4185F3</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span><span class=\"selector-pseudo\">:active</span>&#123;<span class=\"attribute\">background-color</span>: <span class=\"number\">#357AE8</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-blue&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;touchstart&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;, <span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>兼容性ios5+、部分android 4+、winphone 8</p>\n</blockquote>\n<blockquote>\n<p>第三种</p>\n</blockquote>\n<blockquote>\n<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">a</span>&#123;-webkit-tap-highlight-<span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">42px</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">border-radius</span>:<span class=\"number\">4px</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">18px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;<span class=\"attribute\">background-color</span>: <span class=\"number\">#4185F3</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-blue-on</span>&#123;<span class=\"attribute\">background-color</span>: <span class=\"number\">#357AE8</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-blue&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> btnBlue = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.btn-blue&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">btnBlue.<span class=\"property\">ontouchstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = <span class=\"string\">&quot;btn-blue btn-blue-on&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">btnBlue.<span class=\"property\">ontouchend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = <span class=\"string\">&quot;btn-blue&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁止ios长按时不触发系统的菜单，禁止ios-android长按时下载图片\"><a href=\"#禁止ios长按时不触发系统的菜单，禁止ios-android长按时下载图片\" class=\"headerlink\" title=\"禁止ios长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片\"></a>禁止ios长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3><pre><code>    .css&#123;-webkit-touch-callout: none&#125;\n</code></pre>\n<h3 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h3><pre><code>    .css&#123;-webkit-user-select:none&#125;\n</code></pre>\n<h3 id=\"打电话发短信写邮件\"><a href=\"#打电话发短信写邮件\" class=\"headerlink\" title=\"打电话发短信写邮件\"></a>打电话发短信写邮件</h3><pre><code>    打电话\n    &lt;a href=&quot;tel:10086&quot;&gt;打电话给:10086&lt;/a&gt;\n    \n    发短信\n    &lt;a href=&quot;sms:10086&quot;&gt;发短信给:10086&lt;/a&gt;\n    \n    写邮件\n    &lt;a href=&quot;mailto:zyh@qq.com&quot;&gt;zyh@qq.com&lt;/a&gt;\n</code></pre>\n<h3 id=\"实现0-5px的线条\"><a href=\"#实现0-5px的线条\" class=\"headerlink\" title=\"实现0.5px的线条\"></a>实现0.5px的线条</h3><pre><code>    网络上有很多方法，如设置viewport，box-shawdow，border-image，background-image，transform:scale等，\n    本文只介绍一种觉得比较好用的方法，一来兼容性好，二来不依赖图片。\n    \n    transform:scale(x,y)\n    \n    通过css支持定义border或者height为.5px大的线条，在android设备中的无法显示出来，这里有个小技巧，\n    设置线条为1px，然后通过transform:scale(x,y)来缩放线条为原来的一半，可显示0.5px的线条。\n</code></pre>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>点5测试 - scale<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.line</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">1px</span> solid red</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125; </span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.scale</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span></span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.scale</span><span class=\"selector-pseudo\">:after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>,.<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>,.<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">transform-origin</span>: center bottom;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">transform-origin</span>: center bottom</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;line&quot;</span>&gt;</span>1px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>    </span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;scale&quot;</span>&gt;</span>0.5px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现0-5px的圆角边框\"><a href=\"#实现0-5px的圆角边框\" class=\"headerlink\" title=\"实现0.5px的圆角边框\"></a>实现0.5px的圆角边框</h3><pre><code>    原理：先定义1px的圆角边框，然后拉伸内容的宽度和高度为父级的2倍(边框厚度不变)，\n    然后再使用transform:scale(0.5)缩放为原来的0.5倍\n</code></pre>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1,maximum-scale=1.0,user-scalable=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-capable&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-mobile-web-app-status-bar-style&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;email=no&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>点5测试 - border-radius<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">padding</span>: <span class=\"number\">50px</span>;-webkit-touch-callout:none;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-attr\">[class*=<span class=\"string\">&quot;btn&quot;</span>]</span>&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn-1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#EDEDED</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">42px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">background-color</span>: <span class=\"number\">#EDEDED</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.btn</span><span class=\"selector-pseudo\">:before</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">top</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">bottom</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">left</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">right</span>: -<span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-1&quot;</span>&gt;</span>1px border<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>.5px border<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS实现隐藏滚动条同时又可以滚动\"><a href=\"#CSS实现隐藏滚动条同时又可以滚动\" class=\"headerlink\" title=\"CSS实现隐藏滚动条同时又可以滚动\"></a>CSS实现隐藏滚动条同时又可以滚动</h3><pre><code>    移动端页面为了更接近原生的体验，是否可以隐藏滚动条，同时又保证页面可以滚动？\n    \n    使用 overflow:hidden 隐藏滚动条，但存在的问题是：页面或元素失去了滚动的特性。\n    由于只需要兼容移动浏览器（Chrome 和 Safari），于是想到了自定义滚动条的伪对象选择器\n    ::-webkit-scrollbar。\n    \n    应用如下 CSS 可以隐藏滚动条：\n        //.element就是指出现滚动条的元素\n        .element::-webkit-scrollbar &#123;display:none&#125;\n    \n    如果要兼容PC其他浏览器（IE、Firefox等），国外一位才人John Kurlak也研究出了一种办法。\n    在容器外面再嵌套一层 overflow:hidden内部内容再限制尺寸和外部嵌套层一样，就变相隐藏了。\n    \n    &lt;div class=&quot;outer-container&quot;&gt;\n        &lt;div class=&quot;inner-container&quot;&gt;\n            &lt;div class=&quot;content&quot;&gt;\n            \t......\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    .outer-container,.content &#123;\n        width: 200px; height: 200px;\n    &#125;\n    .outer-container &#123;\n        position: relative;\n        overflow: hidden;\n    &#125;\n    .inner-container &#123;\n        position: absolute; \n        left: 0;\n        overflow-x: hidden;\n        overflow-y: scroll;\n    &#125;\n     \n     /* for Chrome */\n    .inner-container::-webkit-scrollbar &#123;\n        display: none;\n    &#125;\n</code></pre>\n<h3 id=\"Rem布局原理\"><a href=\"#Rem布局原理\" class=\"headerlink\" title=\"Rem布局原理\"></a>Rem布局原理</h3><pre><code>    其实rem布局的本质是等比缩放，一般是基于宽度\n    \n    假设我们将屏幕宽度平均分成100份，每一份的宽度用x表示，x = 屏幕宽度 / 100，\n    如果将x作为单位，x前面的数值就代表屏幕宽度的百分比\n    \n    p &#123;width: 50x&#125; /* 屏幕宽度的50% */\n    \n    如果想要页面元素随着屏幕宽度等比变化，我们需要上面的x单位，不幸的是css中并没有这样的单位，\n    幸运的是在css中有rem，通过rem这个桥梁，可以实现神奇的x\n    \n    通过上面对rem的介绍，可以发现，如果子元素设置rem单位的属性，\n    通过更改html元素的字体大小，就可以让子元素实际大小发生变化\n    \n    html &#123;font-size: 16px&#125;\n    p &#123;width: 2rem&#125; /* 32px*/\n    \n    html &#123;font-size: 32px&#125;\n    p &#123;width: 2rem&#125; /*64px*/\n    \n    如果让html元素字体的大小，等于屏幕宽度的1/100，那1rem和1x就等价了\n    \n    html &#123;fons-size: width / 100&#125;\n    p &#123;width: 50rem&#125; /* 50rem = 50x = 屏幕宽度的50% */\n    \n    如何让html字体大小一直等于屏幕宽度的百分之一呢？ 可以通过js来设置，一般需要在页面dom ready、resize和屏幕旋转中设置\n    \n    document.documentElement.style.fontSize = document.documentElement.clientWidth / 100 + &#39;px&#39;;\n    \n    那么如何把UE图中的获取的像素单位的值，转换为已rem为单位的值呢？公式是元素宽度 / UE图宽度 * 100\n    \n    假设UE图尺寸是640px，UE图中的一个元素宽度是100px，根据公式100/640*100 = 15.625\n    \n    p &#123;width: 15.625rem&#125;\n</code></pre>\n<h3 id=\"比Rem更好的方案\"><a href=\"#比Rem更好的方案\" class=\"headerlink\" title=\"比Rem更好的方案\"></a>比Rem更好的方案</h3><pre><code>    上面提到想让页面元素随着页面宽度变化，需要一个新的单位x，x等于屏幕宽度的百分之一，css3带来了rem的同时，也带来了vw和vh\n    \n        vw —— 视口宽度的 1/100\n        vh —— 视口高度的 1/100\n        \n    聪明的你也许一经发现，这不就是单位x吗，没错根据定义可以发现1vw=1x，有了vw我们完全可以绕过rem这个中介了，\n    下面两种方案是等价的，可以看到vw比rem更简单\n    \n        /* rem方案 */\n        html &#123;fons-size: width / 100&#125;\n        p &#123;width: 15.625rem&#125;\n        \n        /* vw方案 */\n        p &#123;width: 15.625vw&#125;\n        vw还可以和rem方案结合，这样计算html字体大小就不需要用js了\n        \n        html &#123;fons-size: 1vw&#125; /* 1vw = width / 100 */\n        p &#123;width: 15.625rem&#125;\n        虽然vw各种优点，但是vw也有缺点，首先vw的兼容性不如rem好，使用之前要看下\n    \n    兼容性\tIOS\t安卓\n    rem\t4.1+\t2.1+\n    vw\t6.1+\t4.4+\n    另外，在使用弹性布局时，一般会限制最大宽度，比如在pc端查看我们的页面，此时vw就无法力不从心了，\n    因为除了width有max-width，其他单位都没有，而rem可以通过控制html根元素的font-size最大值，而轻松解决这个问题\n</code></pre>\n<h3 id=\"H5禁止手机虚拟键盘弹出\"><a href=\"#H5禁止手机虚拟键盘弹出\" class=\"headerlink\" title=\"H5禁止手机虚拟键盘弹出\"></a>H5禁止手机虚拟键盘弹出</h3><pre><code>    在移动端，input会默认触发手机的虚拟键盘，如何阻止手机虚拟键盘弹起呢？\n    目前我试过有两个方案，一个是给input添加readonly属性，\n    另一个就是在input事件处理方法前面添加一句document.activeElement.blur()\n    \n    readonly\n    \n        使用readonly方式来阻止虚拟键盘弹出应该是最简单最优雅的方式了。\n        readonly属性规定输入字段为只读。只读字段是不能修改的。\n        不过，用户仍然可以使用 tab键切换到该字段，还可以选中或拷贝其文本。\n        \n        值得一提的是它的取值，只要声明了readonly属性，不管取什么值都可以，\n        比如readonly=&quot;&quot;、readonly=&quot;readonly&quot;、readonly=&quot;abc&quot;都是一样的\n        \n        优点：简单\n        缺点：在iOS的Safari中无效（未做更多情况测试）\n    \n    document.activeElement.blur()\n    \n        这是个什么玩意儿？document.activeElement是一个Web API接口。\n        MDN上的解释是：它返回当前页面中获得焦点的元素，也就是说，如果此时用户按下了键盘上某个键，\n        会在该元素上触发键盘事件，该属性是只读的。\n    \n        document.activeElement属性始终会引用DOM中当前获得了焦点的元素。\n        元素获得焦点的方式有用户输入(通常是按Tab键)、在代码中调用focus()方法和页面加载。\n        \n        它里面有很多方法，在浏览器控制台查看，可以看到有很多方法\n        \n        MDN上还展示了一个有意思的示例，看这里 http://jsfiddle.net/w9gFj/\n        \n        那么document.activeElement.blur()为什么可以阻止虚拟键盘弹出呢？\n        原因是：当你点击input的时候，document.activeElement获得了DOM中被聚焦的元素，\n        也就是你点击的input，而调用.blur()方法，blur我相信大家都知道吧，就是取消聚焦。\n        获得被聚焦的元素然后强制blur以达到没有聚焦的样子\n        \n        优点：支持Android、iOS\n        缺点：需要添加额外的JS代码\n    \n        这句代码加在什么地方？加入有如下HTML\n        \n            &lt;div class=&quot;calendar&quot;&gt;\n                &lt;div&gt;\n                    &lt;input type=&quot;text&quot; id=&quot;datePicker&quot; placeholder=&quot;点击选择日期&quot;/&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \n        那么这句JS加在事件处理方法中\n    \n            $(&quot;#datePicker&quot;).focus(function()&#123;\n                document.activeElement.blur();\n            &#125;);\n            \n    就现在来说，用document.activeElement.blur()确实是在绕弯子，直接使用readonly是最佳方案。\n    但是document.activeElement很强大，可以做很多事。\n</code></pre>\n<h3 id=\"只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\"><a href=\"#只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\" class=\"headerlink\" title=\"只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？\"></a>只有一个头部和内容不确定的高度，怎样实现头部固定和内容滚动？</h3><pre><code>    只是头部绝对定位，内容区不使用绝对定位来解决\n    \n        body&#123;\n            height:100%;\n            overflow:hidden;\n        &#125;\n        header&#123;\n            position:absolute;\n            top:0;\n            left:0;\n            right:0;\n            height:80px;\n        &#125;\n        content&#123;\n            padding:80px 0 20px;\n            height:100%;\n            overflow-x:hidden;\n            overflow-y:scroll;\n            box-sizing:border-box;\n        &#125;\n        \n    分析：\n        \n        body设置固定显示区域（类似划个固定的区域框选子元素），header可以用绝对定位，内容区高度是不确定的，\n        所以用上padding来设置内容的显示区域（左右下padding可适当添加），但是给内容加上height:100%的同时，\n        一定要加上box-sizing:border-box，要不然内容区的高度就不是100%了\n</code></pre>\n<h3 id=\"多行文本溢出\"><a href=\"#多行文本溢出\" class=\"headerlink\" title=\"多行文本溢出\"></a>多行文本溢出</h3><pre><code>    单行文本溢出，对title类的使用非常多，而多行文本类，在详情介绍则用的比较多。\n    \n    /*单行文本溢出*/\n    .inaline&#123;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    &#125;\n    \n    /*多行文本溢出*/\n    .intwoline&#123;\n        display: -webkit-box !important;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        word-break: break-all;\n        -webkit-box-orient:vertical;\n        -webkit-line-clamp:4;\n    &#125;\n    属性-webkit-line-clamp就可以控制几行溢出，4就是第四行进行截断加...\n</code></pre>\n<h3 id=\"移动端遇上表单元素底部被顶起\"><a href=\"#移动端遇上表单元素底部被顶起\" class=\"headerlink\" title=\"移动端遇上表单元素底部被顶起\"></a>移动端遇上表单元素底部被顶起</h3><pre><code>    @media (max-height:400px)&#123;\n        element&#123;\n            display: none;\n        &#125;\n    &#125;\n    \n    分辨率高度小于等于设置值的时候识别\n    \n    一般设置为400px，但也不排除有些键盘高低不一致的情况，可根据情况适当修改\n</code></pre>\n<h3 id=\"当input遇见了全屏背景\"><a href=\"#当input遇见了全屏背景\" class=\"headerlink\" title=\"当input遇见了全屏背景\"></a>当input遇见了全屏背景</h3><pre><code>    在移动端开发过程中，有极少数使用全屏背景的情况。当input遇见了全屏背景，一切便不再美好。\n    \n    解决办法：\n    \n        let viewH = document.documentElement.clientHeight;\n        document.getElementsByTagName(&#39;html&#39;)[0].style.cssText += `height:$&#123;viewH&#125;px`;\n        document.body.style.cssText += `height:$&#123;viewH&#125;px`;\n</code></pre>\n<blockquote>\n<p>补充可视区宽高小知识</p>\n</blockquote>\n<pre><code>    可视区宽度\n    \n        document.body.clientWidth\n        document.documentElement.clientWidth\n    \n    可视区高度\n    \n        document.documentElement.clientHeight\n    \n    仔细一看可视区高度怎么和可视区宽度少了一个呢？\n    \n    其实不难理解，body本身块元素，宽度自然撑满可视区宽度\n    \n    而高度并非如此，body自身的高度则根据子元素的高度来撑\n    \n    所以document.body.clientHeight指的就是body自身的宽度\n</code></pre>\n<h3 id=\"移动网页调试神器vConsole以及Eruda使用技巧\"><a href=\"#移动网页调试神器vConsole以及Eruda使用技巧\" class=\"headerlink\" title=\"移动网页调试神器vConsole以及Eruda使用技巧\"></a>移动网页调试神器vConsole以及Eruda使用技巧</h3><pre><code>    做移动端Web开发的一大痛点就是，在真机运行下无法查看console.log日志和其他信息如网络请求、显示本地存储等信息\n    \n    如果网页是运行在手机浏览器中还算好，可以把网址在电脑上打开查看console信息\n    \n    但是如果是做APP的内嵌H5页面，那就只能靠开发阶段在浏览器模拟环境中尽量没有Bug\n    \n    但是，一旦H5上线后报错那就比较麻烦了，而且还依赖APP环境才能跑的网页，更加难以查找问题\n    \n    如果让移动端也拥有类似Chrome DevTools工具那岂不是很愉快么？\n    \n    vConsole便是这样一款很棒的移动端DevTools工具，由大厂企鹅出品。\n</code></pre>\n<p><a href=\"https://github.com/Tencent/vConsole\">vConsole github地址</a></p>\n<blockquote>\n<p>Eruda</p>\n</blockquote>\n<pre><code>    Eruda是谁？\n    \n    Eruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版\n    \n    其主要功能包括：\n    \n    捕获 console 日志、检查元素状态、显示性能指标、捕获XHR请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。\n</code></pre>\n<p><a href=\"https://github.com/liriliri/eruda\">集颜值技能于一身的Erdua</a></p>\n<p><a href=\"https://github.com/liriliri/eruda/blob/master/doc/README_CN.md\">使用技巧</a></p>\n<blockquote>\n<p>Erdua的基本使用方法推荐使用CDN和可配置参数的形式，在页面引入如下代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> src = <span class=\"string\">&#x27;//cdn.bootcss.com/eruda/1.2.4/eruda.min.js&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/eruda=true/</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>) &amp;&amp; <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;active-eruda&#x27;</span>) !== <span class=\"string\">&#x27;true&#x27;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt src=&quot;&#x27;</span> + src + <span class=\"string\">&#x27;&quot;&gt;&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;eruda.init();&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">eruda.<span class=\"title function_\">init</span>();<span class=\"comment\">//里面可以传入要初始化哪些面板，默认加载所有</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>    这样使用方式没有错，但是如果Eruda要跟着发布到线上的话，那我们要删除这段代码？\n    \n    因为这样会不管你需不需要调试Eruda都会立即加载，在页面出现Eruda的图标\n    \n    我的目标是，Eruda可以保留在页面里，无论什么环境，只要我们想呼唤它出现的时候它才出现\n    \n    不需要它的时候它只是一段不会生效的普通代码\n</code></pre>\n<blockquote>\n<p>办法</p>\n</blockquote>\n<pre><code>    首先把上述引入代码的src放到if里，同时把localStorage改为sessionStorage\n    \n    active-eruda参数也可以改个更短的名字，改后的代码如下：\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/eruda=true/</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>) || <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>) !== <span class=\"string\">&#x27;true&#x27;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> src = <span class=\"string\">&#x27;//cdn.bootcss.com/eruda/1.4.3/eruda.min.js&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt src=&quot;&#x27;</span> + src + <span class=\"string\">&#x27;&quot;&gt;&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;eruda.init();&lt;/scr&#x27;</span> + <span class=\"string\">&#x27;ipt&gt;&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<pre><code>    这段代码的意思是如果URL中有参数eruda=true或者sessionStorage中eruda的值为true才加载Eruda\n    \n    这样的好处是，我们需要调试的时候可以在网页URL后面加个参数即可，不需要调试的它不会加载\n    \n    然而，这在开发阶段可以这样做比较好，但是在线上环境可能要加URL参数比较麻烦\n    \n    于是我想到了在页面中点击某个元素10次再加载Eruda，点击10次或者更多次，然后在sessionStorage中写入eruda=true\n    \n    然后刷新当前页。相反，再点击10次关闭Eruda。用这样比较隐藏的方式开启或关闭Eruda\n    \n    这样线上环境也可以自由开启或关闭Eruda了\n</code></pre>\n<blockquote>\n<p>例子：假如有这样的一个页面，里有一个标题文字</p>\n</blockquote>\n<pre><code>    &lt;h2&gt;——规则详情——&lt;/h2&gt;\n    &lt;div&gt;\n    .....\n    &lt;/div&gt;\n    那么我们可以在h2标签上绑定一个click事件，加入方法名叫showEruda\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 onclick=<span class=\"string\">&quot;showEruda&quot;</span>&gt;——规则详情——&lt;/h2&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">.....</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">function</span> <span class=\"title function_\">showEruda</span> (<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">10</span>) &#123;    </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> eruda = <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (!eruda || eruda === <span class=\"string\">&#x27;false&#x27;</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>, <span class=\"string\">&#x27;true&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;eruda&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        location.<span class=\"title function_\">reload</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    count++</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.dunizb.com/2017/10/16/erdua/\">原文链接地址，请戳我</a></p>\n<h3 id=\"webkit-overflow-scrolling-touch\"><a href=\"#webkit-overflow-scrolling-touch\" class=\"headerlink\" title=\"-webkit-overflow-scrolling: touch\"></a>-webkit-overflow-scrolling: touch</h3><pre><code>    在ios设备中，利用 overflow 来模拟滚动会出现卡顿的情况\n    \n    可以通过设置 -webkit-overflow-scrolling: touch; 来解决\n    \n    原因是设置后ios会为其创建一个 UIScrollView ，利用硬件来加速渲染\n</code></pre>\n<h3 id=\"1-监听屏幕旋转变化接口-orientationchange\"><a href=\"#1-监听屏幕旋转变化接口-orientationchange\" class=\"headerlink\" title=\"1. 监听屏幕旋转变化接口: orientationchange\"></a>1. 监听屏幕旋转变化接口: orientationchange</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以检测手机是否横屏的情况。</p>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测屏幕旋转角度</span></span><br><span class=\"line\"><span class=\"title function_\">screenOrientation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> orientation = screen.<span class=\"property\">orientation</span> || screen.<span class=\"property\">mozOrientation</span> || screen.<span class=\"property\">msOrientation</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;onorientationchange&quot;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span> ? <span class=\"string\">&quot;orientationchange&quot;</span> : <span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">angle</span> = orientation.<span class=\"property\">angle</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>orientation.angle 值</th>\n<th>屏幕方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>竖屏</td>\n</tr>\n<tr>\n<td>90</td>\n<td>向左横屏</td>\n</tr>\n<tr>\n<td>-90&#x2F;270</td>\n<td>向右横屏</td>\n</tr>\n<tr>\n<td>180</td>\n<td>倒屏</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>通过这个 <code>API</code> 我们在横屏和竖屏的时候可以添加一些动作或者是样式的改变。</p>\n</blockquote>\n<p>如果只是样式的改变也可以通过媒体查询来监听：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 竖屏 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: portrait) &#123;</span><br><span class=\"line\">  // css <span class=\"selector-tag\">code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/* 横屏 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">  // css <span class=\"selector-tag\">code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-电池状态：navigator-getBattery\"><a href=\"#2-电池状态：navigator-getBattery\" class=\"headerlink\" title=\"2. 电池状态：navigator.getBattery()\"></a>2. 电池状态：navigator.getBattery()</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以检测手机电池状态的情况。</p>\n<blockquote>\n<p>这个 <code>api</code> 返回的是一个 <code>promise</code> 对象，会给出一个 <code>BatteryManager</code> 对象，对象中包含了以下信息：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>charging</td>\n<td>是否在充电</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>chargingTime</td>\n<td>若在充电，还需充电时间</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>dischargingTime</td>\n<td>剩余电量</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>level</td>\n<td>剩余电量百分数</td>\n<td>可读属性</td>\n</tr>\n<tr>\n<td>onchargingchange</td>\n<td>监听充电状态的改变</td>\n<td>可监听事件</td>\n</tr>\n<tr>\n<td>onchargingtimechange</td>\n<td>监听充电时间的改变</td>\n<td>可监听事件</td>\n</tr>\n<tr>\n<td>ondischargingtimechange</td>\n<td>监听电池可用时间的改变</td>\n<td>可监听事件</td>\n</tr>\n<tr>\n<td>onlevelchange</td>\n<td>监听剩余电量百分数的改变</td>\n<td>可监听事件</td>\n</tr>\n</tbody></table>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测是否充电以及电量</span></span><br><span class=\"line\"><span class=\"title function_\">getBatteryInfo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (navigator.<span class=\"property\">getBattery</span>) &#123;</span><br><span class=\"line\">    navigator.<span class=\"title function_\">getBattery</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">battery</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否在充电</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">batteryInfo</span> = battery.<span class=\"property\">charging</span> ? <span class=\"string\">`在充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span> : <span class=\"string\">`没充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 电池充电状态改变事件</span></span><br><span class=\"line\">      battery.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;chargingchange&#x27;</span>, <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">batteryInfo</span> = battery.<span class=\"property\">charging</span> ? <span class=\"string\">`在充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span> : <span class=\"string\">`没充电 : 剩余 <span class=\"subst\">$&#123;battery.level * <span class=\"number\">100</span>&#125;</span>%`</span>;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">batteryInfo</span> = <span class=\"string\">&#x27;不支持电池状态接口&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-让你的手机震动-window-navigator-vibrate-200\"><a href=\"#3-让你的手机震动-window-navigator-vibrate-200\" class=\"headerlink\" title=\"3. 让你的手机震动: window.navigator.vibrate(200)\"></a>3. 让你的手机震动: window.navigator.vibrate(200)</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以让你的手机按你的想法震动。</p>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//触发手机振动</span></span><br><span class=\"line\"><span class=\"title function_\">vibrateFun</span>(<span class=\"params\"></span>)  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (navigator.<span class=\"property\">vibrate</span>) &#123;</span><br><span class=\"line\">    navigator.<span class=\"title function_\">vibrate</span>([<span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vibrateInfo</span> = <span class=\"string\">&quot;您的设备不支持震动&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-联网状态：navigator-onLine\"><a href=\"#4-联网状态：navigator-onLine\" class=\"headerlink\" title=\"4. 联网状态：navigator.onLine\"></a>4. 联网状态：navigator.onLine</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以告诉你设备的网络状态是否连接。</p>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;online&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">updateOnlineStatus</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;offline&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">updateOnlineStatus</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//检测网络信号</span></span><br><span class=\"line\">  <span class=\"title function_\">updateOnlineStatus</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onLineInfo</span> = navigator.<span class=\"property\">onLine</span> ? <span class=\"string\">&quot;online&quot;</span> : <span class=\"string\">&quot;offline&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>navigator.onLine</code> 只会在设备未连接到局域网或路由器时返回 <code>false</code>，其他情况下均返回 <code>true</code>。也就是说，设备连接上路由器后，即使这个路由器没联通网络， <code>navigator.onLine</code>仍然返回 <code>true</code>。</p>\n</blockquote>\n<h3 id=\"5-浏览器活跃窗口监听-window-onblur-window-onfocus\"><a href=\"#5-浏览器活跃窗口监听-window-onblur-window-onfocus\" class=\"headerlink\" title=\"5. 浏览器活跃窗口监听: window.onblur &amp; window.onfocus\"></a>5. 浏览器活跃窗口监听: window.onblur &amp; window.onfocus</h3><p><strong>定义：</strong></p>\n<p>这两个 <code>API</code> 分别表示窗口失去焦点和窗口处于活跃状态。</p>\n<blockquote>\n<p>浏览其他窗口、浏览器最小化、点击其他程序等，<code>window.onblur</code> 事件就会触发;  回到该窗口，<code>window.onfocus</code> 事件就会触发。</p>\n</blockquote>\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;blur&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">doFlashTitle</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;focus&#x27;</span>, <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;微信网页版&#x27;</span>;</span><br><span class=\"line\">  &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//浏览器活跃窗口监听</span></span><br><span class=\"line\">  <span class=\"title function_\">doFlashTitle</span>(<span class=\"params\"></span>)  &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>  =  <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span>  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">flashFlag</span>)  &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&quot;微信网页版&quot;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`微信（<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.infoNum&#125;</span>）`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">flashFlag</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">flashFlag</span></span><br><span class=\"line\">    &#125;,  <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-全屏-API（Fullscreen-API）\"><a href=\"#6-全屏-API（Fullscreen-API）\" class=\"headerlink\" title=\"6. 全屏 API（Fullscreen API）\"></a>6. 全屏 API（Fullscreen API）</h3><p><strong>定义：</strong></p>\n<p>这个 <code>API</code> 可以使你所打开的页面全屏展示。</p>\n<p><strong>使用：</strong></p>\n<blockquote>\n<p>Element.requestFullscreen() 方法用于发出异步请求使元素进入全屏模式。</p>\n</blockquote>\n<p>调用此 <code>API</code> 并不能保证元素一定能够进入全屏模式。如果元素被允许进入全屏幕模式，document 对象会收到一个 <code>fullscreenchange</code> 事件，通知调用者当前元素已经进入全屏模式。如果全屏请求不被许可，则会收到一个 <code>fullscreenerror</code> 事件。<br>当进入&#x2F;退出全屏模式时,会触发 <code>fullscreenchange</code> 事件。你可以在监听这个事件，做你想做的事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打开、关闭全屏 </span></span><br><span class=\"line\"><span class=\"title function_\">fullScreenFun</span>(<span class=\"params\"></span>)  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fullscreenEnabled = <span class=\"variable language_\">document</span>.<span class=\"property\">fullscreenEnabled</span> ||</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">mozFullScreenEnabled</span> ||</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">webkitFullscreenEnabled</span> ||</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">msFullscreenEnabled</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fullscreenEnabled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> de = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> === <span class=\"string\">&#x27;打开全屏&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (de.<span class=\"property\">requestFullscreen</span>) &#123;</span><br><span class=\"line\">        de.<span class=\"title function_\">requestFullscreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (de.<span class=\"property\">mozRequestFullScreen</span>) &#123;</span><br><span class=\"line\">        de.<span class=\"title function_\">mozRequestFullScreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (de.<span class=\"property\">webkitRequestFullScreen</span>) &#123;</span><br><span class=\"line\">        de.<span class=\"title function_\">webkitRequestFullScreen</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> = <span class=\"string\">&#x27;退出全屏&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">exitFullscreen</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">exitFullscreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">mozCancelFullScreen</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">mozCancelFullScreen</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">webkitCancelFullScreen</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">webkitCancelFullScreen</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> = <span class=\"string\">&#x27;打开全屏&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fullScreenInfo</span> = <span class=\"string\">&#x27;浏览器当前不能全屏&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-媒体查询\"><a href=\"#1-媒体查询\" class=\"headerlink\" title=\"1. 媒体查询\"></a>1. 媒体查询</h3><p><code>CSS3</code>媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n<h4 id=\"何选择屏幕大小分割点\"><a href=\"#何选择屏幕大小分割点\" class=\"headerlink\" title=\"何选择屏幕大小分割点\"></a>何选择屏幕大小分割点</h4><p>如何确定媒体查询的分割点也是一个开发中会遇到的问题，下面是市场上的移动设备和电脑屏幕分辨率的分布情况，可以发现不同品牌和型号的设备屏幕分辨率一般都不一样。<br><a href=\"https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions\">The Ultimate Guide To iPhone Resolutions，可点击</a></p>\n<p><a href=\"http://gs.statcounter.com/screen-resolution-stats#monthly-201804-201904-bar\">全球屏幕分辨率统计2018年4月 - 2019年4月，可点击</a></p>\n<p>如果我们选择<code>600px</code>,<code>900px</code>,<code>1200px</code>,<code>1800px</code>作为分割点，可以适配到常见的14个机型。<br>当然这只是其中的一种分割方案，不一定满足项目中的实际需求，我们可以先用跨度大的分割点进行分割，如果出现不适配的情况可以再根据实际情况增加新的分割点。</p>\n<h4 id=\"移动优先-OR-PC优先\"><a href=\"#移动优先-OR-PC优先\" class=\"headerlink\" title=\"移动优先 OR PC优先\"></a>移动优先 OR PC优先</h4><p>不管是移动优先还是PC优先，都是依据当随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式。因此，移动端优先首先使用的是<code>min-width</code>，PC端优先使用的<code>max-width</code>。</p>\n<h3 id=\"2-百分比布局\"><a href=\"#2-百分比布局\" class=\"headerlink\" title=\"2.百分比布局\"></a>2.百分比布局</h3><p>通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果。Bootstrap里面的栅格系统就是利用百分比来定义元素的宽高，<code>CSS3</code>支持最大最小高，可以将百分比和<code>max(min)</code>一起结合使用来定义元素在不同设备下的宽高。</p>\n<p>但是我们必须要弄清楚css中子元素的百分比到底是相对谁的百分比。直接上结论吧：</p>\n<p>子元素的<code>height</code>或<code>width</code>中使用百分比，是相对于子元素的直接父元素，<code>width</code>相对于父元素的<code>width</code>，<code>height</code>相对于父元素的<code>height</code>；子元素的<code>top</code>和<code>bottom</code>如果设置百分比，则相对于直接非<code>static</code>定位(默认定位)的父元素的高度，同样子元素的<code>left</code>和<code>right</code>如果设置百分比，则相对于直接非<code>static</code>定位(默认定位的)父元素的宽度；子元素的<code>padding</code>如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的<code>width</code>，而与父元素的<code>height</code>无关。跟<code>padding</code>一样，<code>margin</code>也是如此，子元素的<code>margin</code>如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的<code>width</code>；<code>border-radius</code>不一样，如果设置<code>border-radius</code>为百分比，则是相对于自身的宽度，除了<code>border-radius</code>外，还有比如<code>translate</code>、<code>background-size</code>等都是相对于自身的；</p>\n<h3 id=\"3-rem布局\"><a href=\"#3-rem布局\" class=\"headerlink\" title=\"3.rem布局\"></a>3.rem布局</h3><p><code>REM</code>是<code>CSS3</code>新增的单位，并且移动端的支持度很高，Android2.x+,ios5+都支持。<code>rem</code>单位都是相对于根元素html的<code>font-size</code>来决定大小的,根元素的<code>font-size</code>相当于提供了一个基准，当页面的size发生变化时，只需要改变<code>font-size</code>的值，那么以<code>rem</code>为固定单位的元素的大小也会发生响应的变化。 因此，如果通过<code>rem</code>来实现响应式的布局，只需要根据视图容器的大小，动态的改变<code>font-size</code>即可（而<code>em</code>是相对于父元素的）</p>\n<h3 id=\"4-视口单位\"><a href=\"#4-视口单位\" class=\"headerlink\" title=\"4.视口单位\"></a>4.视口单位</h3><p><code>css3</code>中引入了一个新的单位<code>vw/vh</code>，与视图窗口有关，<code>vw</code>表示相对于视图窗口的宽度，<code>vh</code>表示相对于视图窗口高度，除了<code>vw</code>和<code>vh</code>外，还有<code>vmin</code>和<code>vmax</code>两个相关的单位。各个单位具体的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vw</td>\n<td>相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw</td>\n</tr>\n<tr>\n<td>vh</td>\n<td>相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh</td>\n</tr>\n<tr>\n<td>vmin</td>\n<td>vw和vh中的较小值</td>\n</tr>\n<tr>\n<td>vmax</td>\n<td>vw和vh中的较大值</td>\n</tr>\n</tbody></table>\n<p><strong>参考文章：</strong></p>\n<p><a href=\"https://juejin.im/post/5caaa230e51d452b672f9703\">八叉树：前端响应式布局原理与方案</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/\">张鑫旭：设备像素比devicePixelRatio简单介绍</a></p>\n<p><a href=\"https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/\">颜海镜：Rem布局的原理解析</a></p>\n<h3 id=\"安装postcss插件\"><a href=\"#安装postcss插件\" class=\"headerlink\" title=\"安装postcss插件\"></a>安装postcss插件</h3><h4 id=\"postcss-import\"><a href=\"#postcss-import\" class=\"headerlink\" title=\"postcss-import\"></a>postcss-import</h4><p><a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a>相关配置可以<a href=\"https://github.com/postcss/postcss-import\">点击这里</a>。目前使用的是默认配置。只在<code>postcss.config.js</code>文件中引入了该插件。</p>\n<p><code>postcss-import</code>主要功有是解决<code>@import</code>引入路径问题。使用这个插件，可以让你很轻易的使用本地文件、<code>node_modules</code>或者<code>web_modules</code>的文件。这个插件配合<a href=\"https://github.com/postcss/postcss-url\"><code>postcss-url</code></a>让你引入文件变得更轻松。</p>\n<h4 id=\"postcss-url\"><a href=\"#postcss-url\" class=\"headerlink\" title=\"postcss-url\"></a>postcss-url</h4><p><a href=\"https://github.com/postcss/postcss-url\"><code>postcss-url</code></a>相关配置可以点击<a href=\"https://github.com/postcss/postcss-url\">这里</a>。该插件主要用来处理文件，比如图片文件、字体文件等引用路径的处理。</p>\n<p>在Vue项目中，<a href=\"https://github.com/vuejs/vue-loader\"><code>vue-loader</code></a>已具有类似的功能，只需要配置中将<code>vue-loader</code>配置进去。</p>\n<h4 id=\"autoprefixer\"><a href=\"#autoprefixer\" class=\"headerlink\" title=\"autoprefixer\"></a>autoprefixer</h4><p><a href=\"https://github.com/postcss/autoprefixer\"><code>autoprefixer</code></a>插件是用来自动处理浏览器前缀的一个插件。如果你配置了<a href=\"https://github.com/MoOx/postcss-cssnext\"><code>postcss-cssnext</code></a>，其中就已具备了<code>autoprefixer</code>的功能。在配置的时候，未显示的配置相关参数的话，表示使用的是<a href=\"https://github.com/ai/browserslist\">Browserslist</a>指定的列表参数，你也可以像这样来指定<code>last 2 versions</code> 或者 <code>&gt; 5%</code>。</p>\n<h3 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h3><ul>\n<li><a href=\"https://github.com/yisibl/postcss-aspect-ratio-mini\">postcss-aspect-ratio-mini</a></li>\n<li><a href=\"https://github.com/evrone/postcss-px-to-viewport\">postcss-px-to-viewport</a></li>\n<li><a href=\"https://github.com/jonathantneal/postcss-write-svg\">postcss-write-svg</a></li>\n<li><a href=\"https://github.com/MoOx/postcss-cssnext\">postcss-cssnext</a></li>\n<li><a href=\"https://github.com/ben-eb/cssnano\">cssnano</a></li>\n<li><del><a href=\"https://github.com/springuper/postcss-viewport-units\">postcss-viewport-units</a></del> 2018-11-02：经过一段时间项目的验证，大漠团队已经开始不引用Polyfill</li>\n</ul>\n<p>要使用这几个插件，先要进行安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//依赖太多，故分开显示</span></span><br><span class=\"line\">npm i postcss-<span class=\"keyword\">import</span> postcss-url autoprefixer cssnano cssnano-preset-advanced -D</span><br><span class=\"line\">npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"接下来在postcss-config-js文件对新安装的postcss插件进行配置\"><a href=\"#接下来在postcss-config-js文件对新安装的postcss插件进行配置\" class=\"headerlink\" title=\"接下来在postcss.config.js文件对新安装的postcss插件进行配置\"></a>接下来在<code>postcss.config.js</code>文件对新安装的postcss插件进行配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>  =  &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-import&quot;</span>:  &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-url&quot;</span>:  &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-aspect-ratio-mini&quot;</span>:  &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-write-svg&quot;</span>:  &#123;  <span class=\"attr\">utf8</span>:  <span class=\"literal\">false</span>  &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-cssnext&quot;</span>:  &#123;&#125;,<span class=\"comment\">//由于cssnext和cssnano都具有autoprefixer,事实上只需要一个，所以把默认的autoprefixer删除掉，然后把cssnano中的autoprefixer设置为false</span></span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-px-to-viewport&quot;</span>:  &#123;</span><br><span class=\"line\">      <span class=\"attr\">viewportWidth</span>:  <span class=\"number\">750</span>,  <span class=\"comment\">// 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span></span><br><span class=\"line\">      <span class=\"attr\">viewportHeight</span>:  <span class=\"number\">1334</span>,  <span class=\"comment\">// 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span></span><br><span class=\"line\">      <span class=\"attr\">unitPrecision</span>:  <span class=\"number\">3</span>,  <span class=\"comment\">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class=\"line\">      <span class=\"attr\">viewportUnit</span>:  <span class=\"string\">&#x27;vw&#x27;</span>,  <span class=\"comment\">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class=\"line\">      <span class=\"attr\">selectorBlackList</span>:  [<span class=\"string\">&#x27;.ignore&#x27;</span>,  <span class=\"string\">&#x27;.hairlines&#x27;</span>],  <span class=\"comment\">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class=\"line\">      <span class=\"attr\">minPixelValue</span>:  <span class=\"number\">1</span>,  <span class=\"comment\">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class=\"line\">      <span class=\"attr\">mediaQuery</span>:  <span class=\"literal\">false</span>  <span class=\"comment\">// 允许在媒体查询中转换`px`</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;cssnano&quot;</span>:  &#123;</span><br><span class=\"line\">      <span class=\"attr\">preset</span>:  <span class=\"string\">&quot;advanced&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">autoprefixer</span>:  <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;postcss-zindex&quot;</span>:  <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// &quot;autoprefixer&quot;: &#123; browsers: [&quot;&gt; 1%&quot;, &quot;ie &gt; 8&quot;, &#x27;last 5 version&#x27;] &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">//移动端项目开启此插件 将px转为rem</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;postcss-px2rem&quot;:&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// remUnit:&#x27;75&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"postcss-write-svg\"><a href=\"#postcss-write-svg\" class=\"headerlink\" title=\"postcss-write-svg\"></a>postcss-write-svg</h4><p><a href=\"https://github.com/jonathantneal/postcss-write-svg\"><code>postcss-write-svg</code></a>插件主要用来处理移动端<code>1px</code>的解决方案。该插件主要使用的是<code>border-image</code>和<code>background</code>来做<code>1px</code>的相关处理。比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@svg</span> <span class=\"number\">1px</span>-border &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"keyword\">@rect</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fill</span>: <span class=\"built_in\">var</span>(--color, black);</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-image</span>: <span class=\"built_in\">svg</span>(<span class=\"number\">1px</span>-border <span class=\"built_in\">param</span>(--color <span class=\"number\">#00b1ff</span>)) <span class=\"number\">2</span> <span class=\"number\">2</span> stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译出来的CSS:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;data:image/svg+xml;charset=utf-8,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; height=&#x27;2px&#x27;%3E%3Crect fill=&#x27;%2300b1ff&#x27; width=&#x27;100%25&#x27; height=&#x27;50%25&#x27;/%3E%3C/svg%3E&quot;</span>) <span class=\"number\">2</span> <span class=\"number\">2</span> stretch;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>上面演示的是使用<code>border-image</code>方式，除此之外还可以使用<code>background-image</code>来实现。比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@svg</span> square &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@rect</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fill</span>: <span class=\"built_in\">var</span>(--color, black);</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white <span class=\"built_in\">svg</span>(square <span class=\"built_in\">param</span>(--color <span class=\"number\">#00b1ff</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译出来就是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white <span class=\"built_in\">url</span>(<span class=\"string\">&quot;data:image/svg+xml;charset=utf-8,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Crect fill=&#x27;%2300b1ff&#x27; width=&#x27;100%25&#x27; height=&#x27;100%25&#x27;/%3E%3C/svg%3E&quot;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>特别声明：</strong> 由于有一些低端机对<code>border-image</code>支持度不够友好，个人建议你使用<code>background-image</code>的这个方案。</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p>知识付费模式开启，需要购买会员才可观看呦（2019-05-22购买，支付宝订单号：190522163630182750）</p>\n</blockquote>\n<p><a href=\"https://www.w3cplus.com/mobile/vw-layout-in-vue.html\">如何在Vue项目中使用vw实现移动端适配</a></p>\n<h3 id=\"阿里红利真的吃完了\"><a href=\"#阿里红利真的吃完了\" class=\"headerlink\" title=\"阿里红利真的吃完了\"></a>阿里红利真的吃完了</h3><p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/gougu_1558579159402.jpg\" alt=\"gougu.jpg\"></p>\n<p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/ruanyifeng_1558579181115.png\" alt=\"ruanyifeng.png\"></p>\n<p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/xuqiucengci_1558579197535.jpg\" alt=\"xuqiucengci.jpg\"></p>\n<blockquote>\n<p>阿里红利吃完了？还是化身为神探究孔孟庄了？自行体会！</p>\n</blockquote>\n<h3 id=\"圣诞彩蛋事件\"><a href=\"#圣诞彩蛋事件\" class=\"headerlink\" title=\"圣诞彩蛋事件\"></a>圣诞彩蛋事件</h3><p><img src=\"https://uufe-web.oss-cn-beijing.aliyuncs.com/PicLib/uunote/images/caidan_1558579502232.jpg\" alt=\"caidan.jpg\"></p>\n<h3 id=\"响应式开发中合理选定CSS媒体查询分割点\"><a href=\"#响应式开发中合理选定CSS媒体查询分割点\" class=\"headerlink\" title=\"响应式开发中合理选定CSS媒体查询分割点\"></a>响应式开发中合理选定CSS媒体查询分割点</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t使用sass minxin实现的针对不同屏幕的函数</span></span><br><span class=\"line\"><span class=\"comment\">\t参数:</span></span><br><span class=\"line\"><span class=\"comment\">\tphone-only:手机屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-portrait-up:平板竖屏及更大屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-portait-only:仅限平板竖屏</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-landscape-up:平板横屏及更大屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\ttablet-landscape-only 仅限平板横屏</span></span><br><span class=\"line\"><span class=\"comment\">\tdesktop-up:PC及更大屏幕</span></span><br><span class=\"line\"><span class=\"comment\">\tdesktop-only:仅限PC</span></span><br><span class=\"line\"><span class=\"comment\">\tbig-desktop-up 大号PC</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> for-size($range) &#123;</span><br><span class=\"line\">\t$phone-upper-boundary: <span class=\"number\">600px</span>;</span><br><span class=\"line\">\t$tablet-portrait-upper-boundary: <span class=\"number\">900px</span>;</span><br><span class=\"line\">\t$tablet-landscape-upper-boundary: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t$desktop-upper-boundary: <span class=\"number\">1800px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">@if</span> $range == phone-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: $phone-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-portrait-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $phone-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-portait-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $phone-upper-boundary) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $tablet-portrait-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-landscape-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-landscape-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == tablet-landscape-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-portrait-upper-boundary) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $tablet-landscape-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == desktop-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-landscape-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == desktop-only &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $tablet-landscape-upper-boundary) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $desktop-upper-boundary - <span class=\"number\">1px</span>) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">@else</span> if $range == big-desktop-up &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: $desktop-upper-boundary) &#123; <span class=\"keyword\">@content</span>; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">@include</span> for-size(desktop-up) &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://segmentfault.com/a/1190000007567739\">响应式开发中合理选定CSS媒体查询分割点</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm215vers00007k9kasrshvzx","tag_id":"cm215verx00027k9k3lqye0kv","_id":"cm215vesf00077k9k2a6u70yi"},{"post_id":"cm215veru00017k9kbh6m0ebw","tag_id":"cm215verx00027k9k3lqye0kv","_id":"cm215veso000b7k9ka5j45yal"},{"post_id":"cm215vet900137k9kcwyu7jgq","tag_id":"cm215vetf00227k9k049z5b8e","_id":"cm215veth002d7k9kbodz60if"},{"post_id":"cm215vevb003p7k9k22pz3wrz","tag_id":"cm215vevc003r7k9k2tg3benf","_id":"cm215vevd003t7k9kb9xe7nx8"},{"post_id":"cm215vevc003q7k9k1y7v4inf","tag_id":"cm215vevc003r7k9k2tg3benf","_id":"cm215vevd003u7k9k3zp5b5e9"},{"post_id":"cm215veve003v7k9kg8the2rz","tag_id":"cm215vevc003r7k9k2tg3benf","_id":"cm215vevg003x7k9k2nqng2py"},{"post_id":"cm215vevf003w7k9k6zne37v9","tag_id":"cm215vevc003r7k9k2tg3benf","_id":"cm215vevg003y7k9kdxvrcpux"},{"post_id":"cm215vet6000y7k9kcrflf8gs","tag_id":"cm2178yek0000x99k745s2295","_id":"cm2178yel0001x99kdn6r73a2"},{"post_id":"cm215vet700117k9keg3gh0a6","tag_id":"cm2178yek0000x99k745s2295","_id":"cm217a60s0002x99k2l0479pc"},{"post_id":"cm217igjs000kx99ke1z7bxbd","tag_id":"cm217iqdo000mx99k2bw8b016","_id":"cm217iqdq000nx99kaq0n8txm"},{"post_id":"cm217ko8f000tx99k5x31a8hu","tag_id":"cm217mwde000ux99k9xgg8lbr","_id":"cm217mwdf000vx99kd27m20an"},{"post_id":"cm215vet4000w7k9k1yssee7b","tag_id":"cm2178yek0000x99k745s2295","_id":"cm217sdcg00006t9kcmj5cnwg"},{"post_id":"cm215veu7002h7k9kcu4sh0u9","tag_id":"cm215vesn000a7k9k7bsrhlbj","_id":"cm21qty9h0002h79kgjxc4dv3"},{"post_id":"cm215veu7002h7k9kcu4sh0u9","tag_id":"cm215vess000e7k9kefi19kqd","_id":"cm21qty9i0003h79kcitz2orr"},{"post_id":"cm215veu7002h7k9kcu4sh0u9","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qty9i0005h79k69i31x3l"},{"post_id":"cm217e1r0000bx99k069cbvd1","tag_id":"cm217fb91000fx99khdjy5po4","_id":"cm21qty9j0006h79k98ep9klw"},{"post_id":"cm217e1r0000bx99k069cbvd1","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qty9j0007h79k6hp00soz"},{"post_id":"cm21m7rq400032y9k27x8bkru","tag_id":"cm217wfz600077y9kdqrx2hgr","_id":"cm21qty9j0008h79k0l394luz"},{"post_id":"cm21m7rq400032y9k27x8bkru","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qty9l0009h79k23c2dqmj"},{"post_id":"cm215veu8002i7k9kf91q3afx","tag_id":"cm215vesn000a7k9k7bsrhlbj","_id":"cm21qty9o000ah79ke1bu73f7"},{"post_id":"cm215veu8002i7k9kf91q3afx","tag_id":"cm215vess000e7k9kefi19kqd","_id":"cm21qty9o000bh79kai5e4nw4"},{"post_id":"cm215veu8002i7k9kf91q3afx","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qty9o000ch79k49gr1maq"},{"post_id":"cm217i859000jx99k78fgfm29","tag_id":"cm217mwde000ux99k9xgg8lbr","_id":"cm21qtybd000dh79ke3201hqu"},{"post_id":"cm217i859000jx99k78fgfm29","tag_id":"cm217o417000wx99k9vh5gj6n","_id":"cm21qtybd000eh79kdujp6340"},{"post_id":"cm217i859000jx99k78fgfm29","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qtybd000fh79k4k9r6ow9"},{"post_id":"cm217cg1o0006x99k0ref0awg","tag_id":"cm215vesn000a7k9k7bsrhlbj","_id":"cm21qtybh000gh79k60v8aqde"},{"post_id":"cm217cg1o0006x99k0ref0awg","tag_id":"cm215vess000e7k9kefi19kqd","_id":"cm21qtybh000hh79k80nc0jw9"},{"post_id":"cm217cg1o0006x99k0ref0awg","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qtybh000ih79k0cvc7lx3"},{"post_id":"cm217uz3000007y9khnmn2de9","tag_id":"cm215vesn000a7k9k7bsrhlbj","_id":"cm21qtybh000jh79kcn4h1n4p"},{"post_id":"cm217uz3000007y9khnmn2de9","tag_id":"cm215vess000e7k9kefi19kqd","_id":"cm21qtybh000kh79kd1gd87b2"},{"post_id":"cm217uz3000007y9khnmn2de9","tag_id":"cm21qty9b0000h79k77cb9apj","_id":"cm21qtybh000lh79kduhn2u3x"}],"Tag":[{"name":"持续集成","_id":"cm215verx00027k9k3lqye0kv"},{"name":"微前端","_id":"cm215vesn000a7k9k7bsrhlbj"},{"name":"MicroFrontend","_id":"cm215vess000e7k9kefi19kqd"},{"name":"前端架构","_id":"cm215vesu000h7k9kdi4i244t"},{"name":"nodejs","_id":"cm215vetf00227k9k049z5b8e"},{"name":"Taro","_id":"cm215veub002l7k9ke5024a75"},{"name":"跨端开发","_id":"cm215veuf002p7k9k5u7tbkyb"},{"name":"Code Review","_id":"cm215vevc003r7k9k2tg3benf"},{"name":"里程碑","_id":"cm215vf0v00407k9k0lxhccgt"},{"name":"whistle","_id":"cm2173asg0000ue9k7cjv4n6s"},{"name":"Nginx","_id":"cm2178yek0000x99k745s2295"},{"name":"React","_id":"cm217fb91000fx99khdjy5po4"},{"name":"debug","_id":"cm217iqdo000mx99k2bw8b016"},{"name":"vue","_id":"cm217mwde000ux99k9xgg8lbr"},{"name":"源码","_id":"cm217o417000wx99k9vh5gj6n"},{"name":"移动端","_id":"cm217wfz600077y9kdqrx2hgr"},{"name":"前端全栈","_id":"cm21qty9b0000h79k77cb9apj"}]}}